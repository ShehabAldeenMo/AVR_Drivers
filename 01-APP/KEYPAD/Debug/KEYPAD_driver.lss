
KEYPAD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002754  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002754  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001af4  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ac1  00000000  00000000  000042c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000070b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000081ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000913c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000092bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000957e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 31 13 	call	0x2662	; 0x2662 <main>
      7a:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_VidSetPinDirection>:
#include"../LIB/STD_TYPES.h"
#include"../LIB/BIT_MATH.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	27 97       	sbiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <DIO_VidSetPinDirection+0x22>
     cae:	6f c0       	rjmp	.+222    	; 0xd8e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3f 83       	std	Y+7, r19	; 0x07
     cb8:	2e 83       	std	Y+6, r18	; 0x06
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	49 f1       	breq	.+82     	; 0xd16 <DIO_VidSetPinDirection+0x88>
     cc4:	2e 81       	ldd	r18, Y+6	; 0x06
     cc6:	3f 81       	ldd	r19, Y+7	; 0x07
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <DIO_VidSetPinDirection+0x4a>
     cce:	8e 81       	ldd	r24, Y+6	; 0x06
     cd0:	9f 81       	ldd	r25, Y+7	; 0x07
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <DIO_VidSetPinDirection+0x60>
     cd6:	d2 c0       	rjmp	.+420    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
     cd8:	2e 81       	ldd	r18, Y+6	; 0x06
     cda:	3f 81       	ldd	r19, Y+7	; 0x07
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	71 f1       	breq	.+92     	; 0xd3e <DIO_VidSetPinDirection+0xb0>
     ce2:	8e 81       	ldd	r24, Y+6	; 0x06
     ce4:	9f 81       	ldd	r25, Y+7	; 0x07
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	e9 f1       	breq	.+122    	; 0xd66 <DIO_VidSetPinDirection+0xd8>
     cec:	c7 c0       	rjmp	.+398    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_VidSetPinDirection+0x7e>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_VidSetPinDirection+0x7a>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	b3 c0       	rjmp	.+358    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_VidSetPinDirection+0xa6>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_VidSetPinDirection+0xa2>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	9f c0       	rjmp	.+318    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_VidSetPinDirection+0xce>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_VidSetPinDirection+0xca>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	8b c0       	rjmp	.+278    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_VidSetPinDirection+0xf6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_VidSetPinDirection+0xf2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	77 c0       	rjmp	.+238    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_VidSetPinDirection+0x108>
     d94:	73 c0       	rjmp	.+230    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <DIO_VidSetPinDirection+0x172>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_VidSetPinDirection+0x130>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <DIO_VidSetPinDirection+0x148>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <DIO_VidSetPinDirection+0x19c>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_VidSetPinDirection+0x146>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <DIO_VidSetPinDirection+0x1c6>
     dd4:	53 c0       	rjmp	.+166    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_VidSetPinDirection+0x166>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_VidSetPinDirection+0x162>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	3e c0       	rjmp	.+124    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
     e00:	a7 e3       	ldi	r26, 0x37	; 55
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e7 e3       	ldi	r30, 0x37	; 55
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_VidSetPinDirection+0x190>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_VidSetPinDirection+0x18c>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	29 c0       	rjmp	.+82     	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_VidSetPinDirection+0x1ba>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_VidSetPinDirection+0x1b6>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_VidSetPinDirection+0x1e4>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_VidSetPinDirection+0x1e0>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
     e7c:	27 96       	adiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_VidSetPortDirection+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_VidSetPortDirection+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3c 83       	std	Y+4, r19	; 0x04
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	d1 f0       	breq	.+52     	; 0xee6 <DIO_VidSetPortDirection+0x58>
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	2c f4       	brge	.+10     	; 0xec6 <DIO_VidSetPortDirection+0x38>
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	61 f0       	breq	.+24     	; 0xedc <DIO_VidSetPortDirection+0x4e>
     ec4:	1e c0       	rjmp	.+60     	; 0xf02 <DIO_VidSetPortDirection+0x74>
     ec6:	2b 81       	ldd	r18, Y+3	; 0x03
     ec8:	3c 81       	ldd	r19, Y+4	; 0x04
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	81 f0       	breq	.+32     	; 0xef0 <DIO_VidSetPortDirection+0x62>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	81 f0       	breq	.+32     	; 0xefa <DIO_VidSetPortDirection+0x6c>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	80 83       	st	Z, r24
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
     ee6:	e7 e3       	ldi	r30, 0x37	; 55
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 83       	st	Z, r24
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	27 97       	sbiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
     f28:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <DIO_VidSetPinValue+0x22>
     f30:	6f c0       	rjmp	.+222    	; 0x1010 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3f 83       	std	Y+7, r19	; 0x07
     f3a:	2e 83       	std	Y+6, r18	; 0x06
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	49 f1       	breq	.+82     	; 0xf98 <DIO_VidSetPinValue+0x88>
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	3f 81       	ldd	r19, Y+7	; 0x07
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	2c f4       	brge	.+10     	; 0xf5a <DIO_VidSetPinValue+0x4a>
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	9f 81       	ldd	r25, Y+7	; 0x07
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	61 f0       	breq	.+24     	; 0xf70 <DIO_VidSetPinValue+0x60>
     f58:	d2 c0       	rjmp	.+420    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
     f5a:	2e 81       	ldd	r18, Y+6	; 0x06
     f5c:	3f 81       	ldd	r19, Y+7	; 0x07
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	71 f1       	breq	.+92     	; 0xfc0 <DIO_VidSetPinValue+0xb0>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	e9 f1       	breq	.+122    	; 0xfe8 <DIO_VidSetPinValue+0xd8>
     f6e:	c7 c0       	rjmp	.+398    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VidSetPinValue+0x7e>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VidSetPinValue+0x7a>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	b3 c0       	rjmp	.+358    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_VidSetPinValue+0xa6>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_VidSetPinValue+0xa2>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	9f c0       	rjmp	.+318    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
     fc0:	a5 e3       	ldi	r26, 0x35	; 53
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_VidSetPinValue+0xce>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_VidSetPinValue+0xca>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	8b c0       	rjmp	.+278    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
     fe8:	a2 e3       	ldi	r26, 0x32	; 50
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_VidSetPinValue+0xf6>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_VidSetPinValue+0xf2>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	77 c0       	rjmp	.+238    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 23       	and	r24, r24
    1014:	09 f0       	breq	.+2      	; 0x1018 <DIO_VidSetPinValue+0x108>
    1016:	73 c0       	rjmp	.+230    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	59 f1       	breq	.+86     	; 0x1082 <DIO_VidSetPinValue+0x172>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	2c f4       	brge	.+10     	; 0x1040 <DIO_VidSetPinValue+0x130>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	69 f0       	breq	.+26     	; 0x1058 <DIO_VidSetPinValue+0x148>
    103e:	5f c0       	rjmp	.+190    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
    1040:	2c 81       	ldd	r18, Y+4	; 0x04
    1042:	3d 81       	ldd	r19, Y+5	; 0x05
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	31 05       	cpc	r19, r1
    1048:	89 f1       	breq	.+98     	; 0x10ac <DIO_VidSetPinValue+0x19c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_VidSetPinValue+0x146>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <DIO_VidSetPinValue+0x1c6>
    1056:	53 c0       	rjmp	.+166    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_VidSetPinValue+0x166>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_VidSetPinValue+0x162>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	3e c0       	rjmp	.+124    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1082:	a8 e3       	ldi	r26, 0x38	; 56
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e3       	ldi	r30, 0x38	; 56
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_VidSetPinValue+0x190>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_VidSetPinValue+0x18c>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_VidSetPinValue+0x1ba>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_VidSetPinValue+0x1b6>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_VidSetPinValue+0x1e4>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_VidSetPinValue+0x1e0>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    10fe:	27 96       	adiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_VidSetPortValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_VidSetPortValue+0x8>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <DIO_VidSetPortValue+0x58>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <DIO_VidSetPortValue+0x38>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <DIO_VidSetPortValue+0x4e>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <DIO_VidSetPortValue+0x74>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <DIO_VidSetPortValue+0x62>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <DIO_VidSetPortValue+0x6c>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1172:	e5 e3       	ldi	r30, 0x35	; 53
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_VidTogglePinValue+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <DIO_VidTogglePinValue+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3c 83       	std	Y+4, r19	; 0x04
    11aa:	2b 83       	std	Y+3, r18	; 0x03
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	49 f1       	breq	.+82     	; 0x1208 <DIO_VidTogglePinValue+0x76>
    11b6:	2b 81       	ldd	r18, Y+3	; 0x03
    11b8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <DIO_VidTogglePinValue+0x38>
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <DIO_VidTogglePinValue+0x4e>
    11c8:	5a c0       	rjmp	.+180    	; 0x127e <DIO_VidTogglePinValue+0xec>
    11ca:	2b 81       	ldd	r18, Y+3	; 0x03
    11cc:	3c 81       	ldd	r19, Y+4	; 0x04
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	71 f1       	breq	.+92     	; 0x1230 <DIO_VidTogglePinValue+0x9e>
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	e9 f1       	breq	.+122    	; 0x1258 <DIO_VidTogglePinValue+0xc6>
    11de:	4f c0       	rjmp	.+158    	; 0x127e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_VidTogglePinValue+0x6c>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_VidTogglePinValue+0x68>
    1202:	84 27       	eor	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	3b c0       	rjmp	.+118    	; 0x127e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_VidTogglePinValue+0x94>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_VidTogglePinValue+0x90>
    122a:	84 27       	eor	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	27 c0       	rjmp	.+78     	; 0x127e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_VidTogglePinValue+0xbc>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_VidTogglePinValue+0xb8>
    1252:	84 27       	eor	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	13 c0       	rjmp	.+38     	; 0x127e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_VidTogglePinValue+0xe4>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_VidTogglePinValue+0xe0>
    127a:	84 27       	eor	r24, r20
    127c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_U8GetPinValue+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_U8GetPinValue+0x8>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_U8GetPinValue+0xa>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	4c 81       	ldd	r20, Y+4	; 0x04
    12aa:	5d 81       	ldd	r21, Y+5	; 0x05
    12ac:	41 30       	cpi	r20, 0x01	; 1
    12ae:	51 05       	cpc	r21, r1
    12b0:	49 f1       	breq	.+82     	; 0x1304 <DIO_U8GetPinValue+0x78>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	91 05       	cpc	r25, r1
    12ba:	34 f4       	brge	.+12     	; 0x12c8 <DIO_U8GetPinValue+0x3c>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	21 15       	cp	r18, r1
    12c2:	31 05       	cpc	r19, r1
    12c4:	61 f0       	breq	.+24     	; 0x12de <DIO_U8GetPinValue+0x52>
    12c6:	57 c0       	rjmp	.+174    	; 0x1376 <DIO_U8GetPinValue+0xea>
    12c8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ca:	5d 81       	ldd	r21, Y+5	; 0x05
    12cc:	42 30       	cpi	r20, 0x02	; 2
    12ce:	51 05       	cpc	r21, r1
    12d0:	61 f1       	breq	.+88     	; 0x132a <DIO_U8GetPinValue+0x9e>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	d1 f1       	breq	.+116    	; 0x1350 <DIO_U8GetPinValue+0xc4>
    12dc:	4c c0       	rjmp	.+152    	; 0x1376 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    12de:	e9 e3       	ldi	r30, 0x39	; 57
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_U8GetPinValue+0x6a>
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_U8GetPinValue+0x66>
    12fa:	ca 01       	movw	r24, r20
    12fc:	58 2f       	mov	r21, r24
    12fe:	51 70       	andi	r21, 0x01	; 1
    1300:	5b 83       	std	Y+3, r21	; 0x03
    1302:	3a c0       	rjmp	.+116    	; 0x1378 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    1304:	e6 e3       	ldi	r30, 0x36	; 54
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_U8GetPinValue+0x90>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_U8GetPinValue+0x8c>
    1320:	ca 01       	movw	r24, r20
    1322:	58 2f       	mov	r21, r24
    1324:	51 70       	andi	r21, 0x01	; 1
    1326:	5b 83       	std	Y+3, r21	; 0x03
    1328:	27 c0       	rjmp	.+78     	; 0x1378 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    132a:	e3 e3       	ldi	r30, 0x33	; 51
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_U8GetPinValue+0xb6>
    133e:	55 95       	asr	r21
    1340:	47 95       	ror	r20
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_U8GetPinValue+0xb2>
    1346:	ca 01       	movw	r24, r20
    1348:	58 2f       	mov	r21, r24
    134a:	51 70       	andi	r21, 0x01	; 1
    134c:	5b 83       	std	Y+3, r21	; 0x03
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    1350:	e0 e3       	ldi	r30, 0x30	; 48
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_U8GetPinValue+0xdc>
    1364:	55 95       	asr	r21
    1366:	47 95       	ror	r20
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_U8GetPinValue+0xd8>
    136c:	ca 01       	movw	r24, r20
    136e:	58 2f       	mov	r21, r24
    1370:	51 70       	andi	r21, 0x01	; 1
    1372:	5b 83       	std	Y+3, r21	; 0x03
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <DIO_U8GetPinValue+0xec>
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	8e 83       	std	Y+6, r24	; 0x06
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	26 96       	adiw	r28, 0x06	; 6
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <KeyPad_VidInit>:

/*prg*/

#ifdef KEYPAD_4_4

void KeyPad_VidInit(void){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62

	/*to define first 4 pins as inputs for rows
	and second 4 pins as output for columns*/
	DIO_VidSetPortDirection( KEYPAD_PORT , 0xf0 ) ;
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	60 ef       	ldi	r22, 0xF0	; 240
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_VidSetPortDirection>

	/*to active Pull_up_resistor for 4 pins input for rows
	and output high on columns*/
	DIO_VidSetPortValue( KEYPAD_PORT , 0xff );
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	6f ef       	ldi	r22, 0xFF	; 255
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VidSetPortValue>
     }
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <KeyPad_U8Num>:
#endif



#ifdef KEYPAD_4_4
u8 KeyPad_U8Num(u8 Copy_num){
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <KeyPad_U8Num+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <KeyPad_U8Num+0x8>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_num){
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3c 83       	std	Y+4, r19	; 0x04
    13cc:	2b 83       	std	Y+3, r18	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	87 30       	cpi	r24, 0x07	; 7
    13d4:	91 05       	cpc	r25, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <KeyPad_U8Num+0x24>
    13d8:	6f c0       	rjmp	.+222    	; 0x14b8 <KeyPad_U8Num+0x102>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	28 30       	cpi	r18, 0x08	; 8
    13e0:	31 05       	cpc	r19, r1
    13e2:	54 f5       	brge	.+84     	; 0x1438 <KeyPad_U8Num+0x82>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <KeyPad_U8Num+0x3a>
    13ee:	58 c0       	rjmp	.+176    	; 0x14a0 <KeyPad_U8Num+0xea>
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	3c 81       	ldd	r19, Y+4	; 0x04
    13f4:	24 30       	cpi	r18, 0x04	; 4
    13f6:	31 05       	cpc	r19, r1
    13f8:	94 f4       	brge	.+36     	; 0x141e <KeyPad_U8Num+0x68>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <KeyPad_U8Num+0x50>
    1404:	47 c0       	rjmp	.+142    	; 0x1494 <KeyPad_U8Num+0xde>
    1406:	2b 81       	ldd	r18, Y+3	; 0x03
    1408:	3c 81       	ldd	r19, Y+4	; 0x04
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	0c f0       	brlt	.+2      	; 0x1412 <KeyPad_U8Num+0x5c>
    1410:	44 c0       	rjmp	.+136    	; 0x149a <KeyPad_U8Num+0xe4>
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	09 f4       	brne	.+2      	; 0x141c <KeyPad_U8Num+0x66>
    141a:	39 c0       	rjmp	.+114    	; 0x148e <KeyPad_U8Num+0xd8>
    141c:	68 c0       	rjmp	.+208    	; 0x14ee <KeyPad_U8Num+0x138>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	25 30       	cpi	r18, 0x05	; 5
    1424:	31 05       	cpc	r19, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <KeyPad_U8Num+0x74>
    1428:	41 c0       	rjmp	.+130    	; 0x14ac <KeyPad_U8Num+0xf6>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	86 30       	cpi	r24, 0x06	; 6
    1430:	91 05       	cpc	r25, r1
    1432:	0c f0       	brlt	.+2      	; 0x1436 <KeyPad_U8Num+0x80>
    1434:	3e c0       	rjmp	.+124    	; 0x14b2 <KeyPad_U8Num+0xfc>
    1436:	37 c0       	rjmp	.+110    	; 0x14a6 <KeyPad_U8Num+0xf0>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	2b 30       	cpi	r18, 0x0B	; 11
    143e:	31 05       	cpc	r19, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <KeyPad_U8Num+0x8e>
    1442:	46 c0       	rjmp	.+140    	; 0x14d0 <KeyPad_U8Num+0x11a>
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	8c 30       	cpi	r24, 0x0C	; 12
    144a:	91 05       	cpc	r25, r1
    144c:	5c f4       	brge	.+22     	; 0x1464 <KeyPad_U8Num+0xae>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	29 30       	cpi	r18, 0x09	; 9
    1454:	31 05       	cpc	r19, r1
    1456:	b1 f1       	breq	.+108    	; 0x14c4 <KeyPad_U8Num+0x10e>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	8a 30       	cpi	r24, 0x0A	; 10
    145e:	91 05       	cpc	r25, r1
    1460:	a4 f5       	brge	.+104    	; 0x14ca <KeyPad_U8Num+0x114>
    1462:	2d c0       	rjmp	.+90     	; 0x14be <KeyPad_U8Num+0x108>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	2d 30       	cpi	r18, 0x0D	; 13
    146a:	31 05       	cpc	r19, r1
    146c:	b9 f1       	breq	.+110    	; 0x14dc <KeyPad_U8Num+0x126>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	8d 30       	cpi	r24, 0x0D	; 13
    1474:	91 05       	cpc	r25, r1
    1476:	7c f1       	brlt	.+94     	; 0x14d6 <KeyPad_U8Num+0x120>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	2e 30       	cpi	r18, 0x0E	; 14
    147e:	31 05       	cpc	r19, r1
    1480:	81 f1       	breq	.+96     	; 0x14e2 <KeyPad_U8Num+0x12c>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	8f 30       	cpi	r24, 0x0F	; 15
    1488:	91 05       	cpc	r25, r1
    148a:	71 f1       	breq	.+92     	; 0x14e8 <KeyPad_U8Num+0x132>
    148c:	30 c0       	rjmp	.+96     	; 0x14ee <KeyPad_U8Num+0x138>
	case 0 : return 1 ;
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	2f c0       	rjmp	.+94     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 1 : return 2 ;
    1494:	22 e0       	ldi	r18, 0x02	; 2
    1496:	2a 83       	std	Y+2, r18	; 0x02
    1498:	2c c0       	rjmp	.+88     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 2 : return 3 ;
    149a:	33 e0       	ldi	r19, 0x03	; 3
    149c:	3a 83       	std	Y+2, r19	; 0x02
    149e:	29 c0       	rjmp	.+82     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 3 : return '/' ;
    14a0:	8f e2       	ldi	r24, 0x2F	; 47
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	26 c0       	rjmp	.+76     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 4 : return 4 ;
    14a6:	94 e0       	ldi	r25, 0x04	; 4
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	23 c0       	rjmp	.+70     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 5 : return 5 ;
    14ac:	25 e0       	ldi	r18, 0x05	; 5
    14ae:	2a 83       	std	Y+2, r18	; 0x02
    14b0:	20 c0       	rjmp	.+64     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 6 : return 6 ;
    14b2:	36 e0       	ldi	r19, 0x06	; 6
    14b4:	3a 83       	std	Y+2, r19	; 0x02
    14b6:	1d c0       	rjmp	.+58     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 7 : return '*' ;
    14b8:	8a e2       	ldi	r24, 0x2A	; 42
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	1a c0       	rjmp	.+52     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 8 : return 7 ;
    14be:	97 e0       	ldi	r25, 0x07	; 7
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	17 c0       	rjmp	.+46     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 9 : return 8 ;
    14c4:	28 e0       	ldi	r18, 0x08	; 8
    14c6:	2a 83       	std	Y+2, r18	; 0x02
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 10 : return 9 ;
    14ca:	39 e0       	ldi	r19, 0x09	; 9
    14cc:	3a 83       	std	Y+2, r19	; 0x02
    14ce:	11 c0       	rjmp	.+34     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 11 : return '-' ;
    14d0:	8d e2       	ldi	r24, 0x2D	; 45
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	0e c0       	rjmp	.+28     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 12 : return 50 ;
    14d6:	92 e3       	ldi	r25, 0x32	; 50
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 13 : return 9 ;
    14dc:	29 e0       	ldi	r18, 0x09	; 9
    14de:	2a 83       	std	Y+2, r18	; 0x02
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 14 : return '=' ;
    14e2:	3d e3       	ldi	r19, 0x3D	; 61
    14e4:	3a 83       	std	Y+2, r19	; 0x02
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <KeyPad_U8Num+0x13c>
	case 15 : return '+' ;
    14e8:	8b e2       	ldi	r24, 0x2B	; 43
    14ea:	8a 83       	std	Y+2, r24	; 0x02
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <KeyPad_U8Num+0x13c>
	default : return Copy_num ;
    14ee:	99 81       	ldd	r25, Y+1	; 0x01
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <KeyPad_U8GetNUM>:
#endif


u8 KeyPad_U8GetNUM (void){
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	62 97       	sbiw	r28, 0x12	; 18
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
	u8 local_key = 50 ;
    1516:	82 e3       	ldi	r24, 0x32	; 50
    1518:	8a 8b       	std	Y+18, r24	; 0x12
	for (u8 C=0 ; C<KEYPAD_NUM_COL ; C++){
    151a:	19 8a       	std	Y+17, r1	; 0x11
    151c:	bd c0       	rjmp	.+378    	; 0x1698 <KeyPad_U8GetNUM+0x196>
		DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , LOW ) ;
    151e:	89 89       	ldd	r24, Y+17	; 0x11
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9c 01       	movw	r18, r24
    1526:	2c 5f       	subi	r18, 0xFC	; 252
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	b9 01       	movw	r22, r18
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
		for (u8 R=0 ; R<KEYPAD_NUM_ROW ; R++){
    1538:	18 8a       	std	Y+16, r1	; 0x10
    153a:	9a c0       	rjmp	.+308    	; 0x1670 <KeyPad_U8GetNUM+0x16e>
			u8 pressed = DIO_U8GetPinValue(KEYPAD_PORT,R);
    153c:	88 89       	ldd	r24, Y+16	; 0x10
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	b9 01       	movw	r22, r18
    1548:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_U8GetPinValue>
    154c:	8f 87       	std	Y+15, r24	; 0x0f
			if (LOW == pressed )
    154e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1550:	88 23       	and	r24, r24
    1552:	09 f0       	breq	.+2      	; 0x1556 <KeyPad_U8GetNUM+0x54>
    1554:	8a c0       	rjmp	.+276    	; 0x166a <KeyPad_U8GetNUM+0x168>
			{
				local_key = (KEYPAD_NUM_ROW*R)+C ;
    1556:	88 89       	ldd	r24, Y+16	; 0x10
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	98 2f       	mov	r25, r24
    1566:	89 89       	ldd	r24, Y+17	; 0x11
    1568:	89 0f       	add	r24, r25
    156a:	8a 8b       	std	Y+18, r24	; 0x12
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <KeyPad_U8GetNUM+0x7e>
				while(LOW == pressed)
				{
				    pressed = DIO_U8GetPinValue(KEYPAD_PORT,R) ;
    156e:	88 89       	ldd	r24, Y+16	; 0x10
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	b9 01       	movw	r22, r18
    157a:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_U8GetPinValue>
    157e:	8f 87       	std	Y+15, r24	; 0x0f
		for (u8 R=0 ; R<KEYPAD_NUM_ROW ; R++){
			u8 pressed = DIO_U8GetPinValue(KEYPAD_PORT,R);
			if (LOW == pressed )
			{
				local_key = (KEYPAD_NUM_ROW*R)+C ;
				while(LOW == pressed)
    1580:	8f 85       	ldd	r24, Y+15	; 0x0f
    1582:	88 23       	and	r24, r24
    1584:	a1 f3       	breq	.-24     	; 0x156e <KeyPad_U8GetNUM+0x6c>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 ea       	ldi	r26, 0xA0	; 160
    158c:	b0 e4       	ldi	r27, 0x40	; 64
    158e:	8b 87       	std	Y+11, r24	; 0x0b
    1590:	9c 87       	std	Y+12, r25	; 0x0c
    1592:	ad 87       	std	Y+13, r26	; 0x0d
    1594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	6b 85       	ldd	r22, Y+11	; 0x0b
    1598:	7c 85       	ldd	r23, Y+12	; 0x0c
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	9e 85       	ldd	r25, Y+14	; 0x0e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a ef       	ldi	r20, 0xFA	; 250
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8f 83       	std	Y+7, r24	; 0x07
    15b0:	98 87       	std	Y+8, r25	; 0x08
    15b2:	a9 87       	std	Y+9, r26	; 0x09
    15b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b6:	6f 81       	ldd	r22, Y+7	; 0x07
    15b8:	78 85       	ldd	r23, Y+8	; 0x08
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <KeyPad_U8GetNUM+0xd6>
		__ticks = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	3f c0       	rjmp	.+126    	; 0x1656 <KeyPad_U8GetNUM+0x154>
	else if (__tmp > 65535)
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	4c f5       	brge	.+82     	; 0x1642 <KeyPad_U8GetNUM+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <KeyPad_U8GetNUM+0x136>
    161a:	88 ec       	ldi	r24, 0xC8	; 200
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <KeyPad_U8GetNUM+0x124>
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f7       	brne	.-38     	; 0x161a <KeyPad_U8GetNUM+0x118>
    1640:	14 c0       	rjmp	.+40     	; 0x166a <KeyPad_U8GetNUM+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <KeyPad_U8GetNUM+0x160>
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01

u8 KeyPad_U8GetNUM (void){
	u8 local_key = 50 ;
	for (u8 C=0 ; C<KEYPAD_NUM_COL ; C++){
		DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , LOW ) ;
		for (u8 R=0 ; R<KEYPAD_NUM_ROW ; R++){
    166a:	88 89       	ldd	r24, Y+16	; 0x10
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	88 8b       	std	Y+16, r24	; 0x10
    1670:	88 89       	ldd	r24, Y+16	; 0x10
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	08 f4       	brcc	.+2      	; 0x1678 <KeyPad_U8GetNUM+0x176>
    1676:	62 cf       	rjmp	.-316    	; 0x153c <KeyPad_U8GetNUM+0x3a>
				    pressed = DIO_U8GetPinValue(KEYPAD_PORT,R) ;
				}//end while loop
				_delay_ms(5);
			}//end if loop
		}//end 1st for loop
	DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , HIGH );
    1678:	89 89       	ldd	r24, Y+17	; 0x11
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9c 01       	movw	r18, r24
    1680:	2c 5f       	subi	r18, 0xFC	; 252
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	b9 01       	movw	r22, r18
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
#endif


u8 KeyPad_U8GetNUM (void){
	u8 local_key = 50 ;
	for (u8 C=0 ; C<KEYPAD_NUM_COL ; C++){
    1692:	89 89       	ldd	r24, Y+17	; 0x11
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	89 8b       	std	Y+17, r24	; 0x11
    1698:	89 89       	ldd	r24, Y+17	; 0x11
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <KeyPad_U8GetNUM+0x19e>
    169e:	3f cf       	rjmp	.-386    	; 0x151e <KeyPad_U8GetNUM+0x1c>
			}//end if loop
		}//end 1st for loop
	DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , HIGH );
	}//end 2nd for loop
#ifdef KEYPAD_4_4
     local_key = KeyPad_U8Num( local_key ) ;
    16a0:	8a 89       	ldd	r24, Y+18	; 0x12
    16a2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <KeyPad_U8Num>
    16a6:	8a 8b       	std	Y+18, r24	; 0x12
#endif
	return local_key ;
    16a8:	8a 89       	ldd	r24, Y+18	; 0x12
}//end FUNC KeyPad_U8GetNUM
    16aa:	62 96       	adiw	r28, 0x12	; 18
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <LCD_VidSendCommend>:
#include"LCD_cfg.h"
#include"LCD_private.h" 
#include<avr/delay.h>


void LCD_VidSendCommend(u8 Copy_U8Commend){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	6d 97       	sbiw	r28, 0x1d	; 29
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	DIO_VidSetPinValue(CONTROL_PORT,RS,LOW);
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
/******to out the value of commend on data port *****/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Commend);
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16e0:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VidSetPortValue>
/*************to make pulse for enable **************/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e8       	ldi	r26, 0x80	; 128
    16f4:	bf e3       	ldi	r27, 0x3F	; 63
    16f6:	89 8f       	std	Y+25, r24	; 0x19
    16f8:	9a 8f       	std	Y+26, r25	; 0x1a
    16fa:	ab 8f       	std	Y+27, r26	; 0x1b
    16fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a ef       	ldi	r20, 0xFA	; 250
    170c:	54 e4       	ldi	r21, 0x44	; 68
    170e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	8d 8b       	std	Y+21, r24	; 0x15
    1718:	9e 8b       	std	Y+22, r25	; 0x16
    171a:	af 8b       	std	Y+23, r26	; 0x17
    171c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1732:	88 23       	and	r24, r24
    1734:	2c f4       	brge	.+10     	; 0x1740 <LCD_VidSendCommend+0x84>
		__ticks = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
    173e:	3f c0       	rjmp	.+126    	; 0x17be <LCD_VidSendCommend+0x102>
	else if (__tmp > 65535)
    1740:	6d 89       	ldd	r22, Y+21	; 0x15
    1742:	7e 89       	ldd	r23, Y+22	; 0x16
    1744:	8f 89       	ldd	r24, Y+23	; 0x17
    1746:	98 8d       	ldd	r25, Y+24	; 0x18
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	4c f5       	brge	.+82     	; 0x17aa <LCD_VidSendCommend+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	69 8d       	ldd	r22, Y+25	; 0x19
    175a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9c 8b       	std	Y+20, r25	; 0x14
    177e:	8b 8b       	std	Y+19, r24	; 0x13
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <LCD_VidSendCommend+0xe4>
    1782:	88 ec       	ldi	r24, 0xC8	; 200
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9a 8b       	std	Y+18, r25	; 0x12
    1788:	89 8b       	std	Y+17, r24	; 0x11
    178a:	89 89       	ldd	r24, Y+17	; 0x11
    178c:	9a 89       	ldd	r25, Y+18	; 0x12
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_VidSendCommend+0xd2>
    1792:	9a 8b       	std	Y+18, r25	; 0x12
    1794:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1796:	8b 89       	ldd	r24, Y+19	; 0x13
    1798:	9c 89       	ldd	r25, Y+20	; 0x14
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	9c 8b       	std	Y+20, r25	; 0x14
    179e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	8b 89       	ldd	r24, Y+19	; 0x13
    17a2:	9c 89       	ldd	r25, Y+20	; 0x14
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	69 f7       	brne	.-38     	; 0x1782 <LCD_VidSendCommend+0xc6>
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <LCD_VidSendCommend+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	6d 89       	ldd	r22, Y+21	; 0x15
    17ac:	7e 89       	ldd	r23, Y+22	; 0x16
    17ae:	8f 89       	ldd	r24, Y+23	; 0x17
    17b0:	98 8d       	ldd	r25, Y+24	; 0x18
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9c 8b       	std	Y+20, r25	; 0x14
    17bc:	8b 8b       	std	Y+19, r24	; 0x13
    17be:	8b 89       	ldd	r24, Y+19	; 0x13
    17c0:	9c 89       	ldd	r25, Y+20	; 0x14
    17c2:	98 8b       	std	Y+16, r25	; 0x10
    17c4:	8f 87       	std	Y+15, r24	; 0x0f
    17c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c8:	98 89       	ldd	r25, Y+16	; 0x10
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_VidSendCommend+0x10e>
    17ce:	98 8b       	std	Y+16, r25	; 0x10
    17d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e0       	ldi	r26, 0x00	; 0
    17e2:	b0 e4       	ldi	r27, 0x40	; 64
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <LCD_VidSendCommend+0x172>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <LCD_VidSendCommend+0x1f0>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <LCD_VidSendCommend+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_VidSendCommend+0x1d2>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_VidSendCommend+0x1c0>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <LCD_VidSendCommend+0x1b4>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <LCD_VidSendCommend+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_VidSendCommend+0x1fc>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
	_delay_ms(2);

#endif
}
    18c0:	6d 96       	adiw	r28, 0x1d	; 29
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <LCD_VidInit>:



void LCD_VidInit (void) {
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	c4 56       	subi	r28, 0x64	; 100
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61

#ifdef EIGHT_BIT

/****to define CONTROL PORT as OUTPUT PINS******/
	DIO_VidSetPinDirection(CONTROL_PORT,RS,HIGH);
    18ec:	83 e0       	ldi	r24, 0x03	; 3
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,E,HIGH);
    18f6:	83 e0       	ldi	r24, 0x03	; 3
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
/****to define DATA PORT as OUTPUT PINS********/
	DIO_VidSetPortDirection(DATA_PORT,0xff);
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	6f ef       	ldi	r22, 0xFF	; 255
    1904:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_VidSetPortDirection>
    1908:	fe 01       	movw	r30, r28
    190a:	ef 59       	subi	r30, 0x9F	; 159
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a0 e2       	ldi	r26, 0x20	; 32
    1914:	b2 e4       	ldi	r27, 0x42	; 66
    1916:	80 83       	st	Z, r24
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	a2 83       	std	Z+2, r26	; 0x02
    191c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191e:	8e 01       	movw	r16, r28
    1920:	03 5a       	subi	r16, 0xA3	; 163
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	fe 01       	movw	r30, r28
    1926:	ef 59       	subi	r30, 0x9F	; 159
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a ef       	ldi	r20, 0xFA	; 250
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	f8 01       	movw	r30, r16
    1944:	80 83       	st	Z, r24
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	a2 83       	std	Z+2, r26	; 0x02
    194a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    194c:	fe 01       	movw	r30, r28
    194e:	e3 5a       	subi	r30, 0xA3	; 163
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	44 f4       	brge	.+16     	; 0x197a <LCD_VidInit+0xa8>
		__ticks = 1;
    196a:	fe 01       	movw	r30, r28
    196c:	e5 5a       	subi	r30, 0xA5	; 165
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	64 c0       	rjmp	.+200    	; 0x1a42 <LCD_VidInit+0x170>
	else if (__tmp > 65535)
    197a:	fe 01       	movw	r30, r28
    197c:	e3 5a       	subi	r30, 0xA3	; 163
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	0c f0       	brlt	.+2      	; 0x199a <LCD_VidInit+0xc8>
    1998:	43 c0       	rjmp	.+134    	; 0x1a20 <LCD_VidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	fe 01       	movw	r30, r28
    199c:	ef 59       	subi	r30, 0x9F	; 159
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8e 01       	movw	r16, r28
    19ba:	05 5a       	subi	r16, 0xA5	; 165
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	1f c0       	rjmp	.+62     	; 0x1a10 <LCD_VidInit+0x13e>
    19d2:	fe 01       	movw	r30, r28
    19d4:	e7 5a       	subi	r30, 0xA7	; 167
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	88 ec       	ldi	r24, 0xC8	; 200
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 5a       	subi	r30, 0xA7	; 167
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_VidInit+0x118>
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 5a       	subi	r30, 0xA7	; 167
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	de 01       	movw	r26, r28
    19fa:	a5 5a       	subi	r26, 0xA5	; 165
    19fc:	bf 4f       	sbci	r27, 0xFF	; 255
    19fe:	fe 01       	movw	r30, r28
    1a00:	e5 5a       	subi	r30, 0xA5	; 165
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	11 96       	adiw	r26, 0x01	; 1
    1a0c:	9c 93       	st	X, r25
    1a0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	fe 01       	movw	r30, r28
    1a12:	e5 5a       	subi	r30, 0xA5	; 165
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	d1 f6       	brne	.-76     	; 0x19d2 <LCD_VidInit+0x100>
    1a1e:	27 c0       	rjmp	.+78     	; 0x1a6e <LCD_VidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	8e 01       	movw	r16, r28
    1a22:	05 5a       	subi	r16, 0xA5	; 165
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	fe 01       	movw	r30, r28
    1a28:	e3 5a       	subi	r30, 0xA3	; 163
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
    1a42:	de 01       	movw	r26, r28
    1a44:	a9 5a       	subi	r26, 0xA9	; 169
    1a46:	bf 4f       	sbci	r27, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e5 5a       	subi	r30, 0xA5	; 165
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	8d 93       	st	X+, r24
    1a54:	9c 93       	st	X, r25
    1a56:	fe 01       	movw	r30, r28
    1a58:	e9 5a       	subi	r30, 0xA9	; 169
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_VidInit+0x18e>
    1a64:	fe 01       	movw	r30, r28
    1a66:	e9 5a       	subi	r30, 0xA9	; 169
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
/******to initialize LCD after power***********/
	_delay_ms(40);
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
    1a6e:	8c e3       	ldi	r24, 0x3C	; 60
    1a70:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
    1a74:	fe 01       	movw	r30, r28
    1a76:	ed 5a       	subi	r30, 0xAD	; 173
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e2       	ldi	r26, 0x20	; 32
    1a80:	b2 e4       	ldi	r27, 0x42	; 66
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a8a:	8e 01       	movw	r16, r28
    1a8c:	01 5b       	subi	r16, 0xB1	; 177
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a90:	fe 01       	movw	r30, r28
    1a92:	ed 5a       	subi	r30, 0xAD	; 173
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	2b ea       	ldi	r18, 0xAB	; 171
    1aa0:	3a ea       	ldi	r19, 0xAA	; 170
    1aa2:	4a e2       	ldi	r20, 0x2A	; 42
    1aa4:	50 e4       	ldi	r21, 0x40	; 64
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	f8 01       	movw	r30, r16
    1ab0:	80 83       	st	Z, r24
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	a2 83       	std	Z+2, r26	; 0x02
    1ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e1 5b       	subi	r30, 0xB1	; 177
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	34 f4       	brge	.+12     	; 0x1ae2 <LCD_VidInit+0x210>
		__ticks = 1;
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e2 5b       	subi	r30, 0xB2	; 178
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	80 83       	st	Z, r24
    1ae0:	e0 c0       	rjmp	.+448    	; 0x1ca2 <LCD_VidInit+0x3d0>
	else if (__tmp > 255)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e1 5b       	subi	r30, 0xB1	; 177
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	53 e4       	ldi	r21, 0x43	; 67
    1af8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	0c f0       	brlt	.+2      	; 0x1b02 <LCD_VidInit+0x230>
    1b00:	c0 c0       	rjmp	.+384    	; 0x1c82 <LCD_VidInit+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    1b02:	fe 01       	movw	r30, r28
    1b04:	ed 5a       	subi	r30, 0xAD	; 173
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	fe 01       	movw	r30, r28
    1b22:	e6 5b       	subi	r30, 0xB6	; 182
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 83       	st	Z, r24
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	a2 83       	std	Z+2, r26	; 0x02
    1b2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	8e 01       	movw	r16, r28
    1b30:	0a 5b       	subi	r16, 0xBA	; 186
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	fe 01       	movw	r30, r28
    1b36:	e6 5b       	subi	r30, 0xB6	; 182
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	54 e4       	ldi	r21, 0x44	; 68
    1b4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 83       	st	Z, r24
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	a2 83       	std	Z+2, r26	; 0x02
    1b5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ea 5b       	subi	r30, 0xBA	; 186
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	44 f4       	brge	.+16     	; 0x1b8a <LCD_VidInit+0x2b8>
		__ticks = 1;
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	ec 5b       	subi	r30, 0xBC	; 188
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
    1b88:	64 c0       	rjmp	.+200    	; 0x1c52 <LCD_VidInit+0x380>
	else if (__tmp > 65535)
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ea 5b       	subi	r30, 0xBA	; 186
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <LCD_VidInit+0x2d8>
    1ba8:	43 c0       	rjmp	.+134    	; 0x1c30 <LCD_VidInit+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	fe 01       	movw	r30, r28
    1bac:	e6 5b       	subi	r30, 0xB6	; 182
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e2       	ldi	r20, 0x20	; 32
    1bbe:	51 e4       	ldi	r21, 0x41	; 65
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8e 01       	movw	r16, r28
    1bca:	0c 5b       	subi	r16, 0xBC	; 188
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	f8 01       	movw	r30, r16
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
    1be0:	1f c0       	rjmp	.+62     	; 0x1c20 <LCD_VidInit+0x34e>
    1be2:	fe 01       	movw	r30, r28
    1be4:	ee 5b       	subi	r30, 0xBE	; 190
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	88 ec       	ldi	r24, 0xC8	; 200
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ee 5b       	subi	r30, 0xBE	; 190
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_VidInit+0x328>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ee 5b       	subi	r30, 0xBE	; 190
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	de 01       	movw	r26, r28
    1c0a:	ac 5b       	subi	r26, 0xBC	; 188
    1c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0e:	fe 01       	movw	r30, r28
    1c10:	ec 5b       	subi	r30, 0xBC	; 188
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	11 96       	adiw	r26, 0x01	; 1
    1c1c:	9c 93       	st	X, r25
    1c1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	fe 01       	movw	r30, r28
    1c22:	ec 5b       	subi	r30, 0xBC	; 188
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 81       	ld	r24, Z
    1c28:	91 81       	ldd	r25, Z+1	; 0x01
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	d1 f6       	brne	.-76     	; 0x1be2 <LCD_VidInit+0x310>
    1c2e:	42 c0       	rjmp	.+132    	; 0x1cb4 <LCD_VidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c30:	8e 01       	movw	r16, r28
    1c32:	0c 5b       	subi	r16, 0xBC	; 188
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	ea 5b       	subi	r30, 0xBA	; 186
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
    1c52:	de 01       	movw	r26, r28
    1c54:	a0 5c       	subi	r26, 0xC0	; 192
    1c56:	bf 4f       	sbci	r27, 0xFF	; 255
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ec 5b       	subi	r30, 0xBC	; 188
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	11 96       	adiw	r26, 0x01	; 1
    1c64:	9c 93       	st	X, r25
    1c66:	8e 93       	st	-X, r24
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e0 5c       	subi	r30, 0xC0	; 192
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_VidInit+0x3a0>
    1c76:	fe 01       	movw	r30, r28
    1c78:	e0 5c       	subi	r30, 0xC0	; 192
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	19 c0       	rjmp	.+50     	; 0x1cb4 <LCD_VidInit+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c82:	8e 01       	movw	r16, r28
    1c84:	02 5b       	subi	r16, 0xB2	; 178
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e1 5b       	subi	r30, 0xB1	; 177
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 83       	st	Z, r24
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e2 5b       	subi	r30, 0xB2	; 178
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cac:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cae:	8a 95       	dec	r24
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_VidInit+0x3dc>
    1cb2:	8f af       	std	Y+63, r24	; 0x3f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
    1cb4:	8c e0       	ldi	r24, 0x0C	; 12
    1cb6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e2       	ldi	r26, 0x20	; 32
    1cc0:	b2 e4       	ldi	r27, 0x42	; 66
    1cc2:	8b af       	std	Y+59, r24	; 0x3b
    1cc4:	9c af       	std	Y+60, r25	; 0x3c
    1cc6:	ad af       	std	Y+61, r26	; 0x3d
    1cc8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cca:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ccc:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cce:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd2:	2b ea       	ldi	r18, 0xAB	; 171
    1cd4:	3a ea       	ldi	r19, 0xAA	; 170
    1cd6:	4a e2       	ldi	r20, 0x2A	; 42
    1cd8:	50 e4       	ldi	r21, 0x40	; 64
    1cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8f ab       	std	Y+55, r24	; 0x37
    1ce4:	98 af       	std	Y+56, r25	; 0x38
    1ce6:	a9 af       	std	Y+57, r26	; 0x39
    1ce8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1cea:	6f a9       	ldd	r22, Y+55	; 0x37
    1cec:	78 ad       	ldd	r23, Y+56	; 0x38
    1cee:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	1c f4       	brge	.+6      	; 0x1d08 <LCD_VidInit+0x436>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	8e ab       	std	Y+54, r24	; 0x36
    1d06:	91 c0       	rjmp	.+290    	; 0x1e2a <LCD_VidInit+0x558>
	else if (__tmp > 255)
    1d08:	6f a9       	ldd	r22, Y+55	; 0x37
    1d0a:	78 ad       	ldd	r23, Y+56	; 0x38
    1d0c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	53 e4       	ldi	r21, 0x43	; 67
    1d18:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	0c f0       	brlt	.+2      	; 0x1d22 <LCD_VidInit+0x450>
    1d20:	7b c0       	rjmp	.+246    	; 0x1e18 <LCD_VidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1d22:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d24:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4a e7       	ldi	r20, 0x7A	; 122
    1d30:	54 e4       	ldi	r21, 0x44	; 68
    1d32:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8a ab       	std	Y+50, r24	; 0x32
    1d3c:	9b ab       	std	Y+51, r25	; 0x33
    1d3e:	ac ab       	std	Y+52, r26	; 0x34
    1d40:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	6a a9       	ldd	r22, Y+50	; 0x32
    1d44:	7b a9       	ldd	r23, Y+51	; 0x33
    1d46:	8c a9       	ldd	r24, Y+52	; 0x34
    1d48:	9d a9       	ldd	r25, Y+53	; 0x35
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a ef       	ldi	r20, 0xFA	; 250
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	8e a7       	std	Y+46, r24	; 0x2e
    1d5c:	9f a7       	std	Y+47, r25	; 0x2f
    1d5e:	a8 ab       	std	Y+48, r26	; 0x30
    1d60:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d62:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d64:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d66:	88 a9       	ldd	r24, Y+48	; 0x30
    1d68:	99 a9       	ldd	r25, Y+49	; 0x31
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d76:	88 23       	and	r24, r24
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <LCD_VidInit+0x4b2>
		__ticks = 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9d a7       	std	Y+45, r25	; 0x2d
    1d80:	8c a7       	std	Y+44, r24	; 0x2c
    1d82:	3f c0       	rjmp	.+126    	; 0x1e02 <LCD_VidInit+0x530>
	else if (__tmp > 65535)
    1d84:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d86:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d88:	88 a9       	ldd	r24, Y+48	; 0x30
    1d8a:	99 a9       	ldd	r25, Y+49	; 0x31
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	4c f5       	brge	.+82     	; 0x1dee <LCD_VidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9c:	6a a9       	ldd	r22, Y+50	; 0x32
    1d9e:	7b a9       	ldd	r23, Y+51	; 0x33
    1da0:	8c a9       	ldd	r24, Y+52	; 0x34
    1da2:	9d a9       	ldd	r25, Y+53	; 0x35
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9d a7       	std	Y+45, r25	; 0x2d
    1dc2:	8c a7       	std	Y+44, r24	; 0x2c
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <LCD_VidInit+0x512>
    1dc6:	88 ec       	ldi	r24, 0xC8	; 200
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9b a7       	std	Y+43, r25	; 0x2b
    1dcc:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dce:	8a a5       	ldd	r24, Y+42	; 0x2a
    1dd0:	9b a5       	ldd	r25, Y+43	; 0x2b
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_VidInit+0x500>
    1dd6:	9b a7       	std	Y+43, r25	; 0x2b
    1dd8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ddc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	9d a7       	std	Y+45, r25	; 0x2d
    1de2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1de6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	69 f7       	brne	.-38     	; 0x1dc6 <LCD_VidInit+0x4f4>
    1dec:	24 c0       	rjmp	.+72     	; 0x1e36 <LCD_VidInit+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dee:	6e a5       	ldd	r22, Y+46	; 0x2e
    1df0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1df2:	88 a9       	ldd	r24, Y+48	; 0x30
    1df4:	99 a9       	ldd	r25, Y+49	; 0x31
    1df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9d a7       	std	Y+45, r25	; 0x2d
    1e00:	8c a7       	std	Y+44, r24	; 0x2c
    1e02:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e04:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e06:	99 a7       	std	Y+41, r25	; 0x29
    1e08:	88 a7       	std	Y+40, r24	; 0x28
    1e0a:	88 a5       	ldd	r24, Y+40	; 0x28
    1e0c:	99 a5       	ldd	r25, Y+41	; 0x29
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_VidInit+0x53c>
    1e12:	99 a7       	std	Y+41, r25	; 0x29
    1e14:	88 a7       	std	Y+40, r24	; 0x28
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <LCD_VidInit+0x564>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e18:	6f a9       	ldd	r22, Y+55	; 0x37
    1e1a:	78 ad       	ldd	r23, Y+56	; 0x38
    1e1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8e ab       	std	Y+54, r24	; 0x36
    1e2a:	8e a9       	ldd	r24, Y+54	; 0x36
    1e2c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e2e:	8f a1       	ldd	r24, Y+39	; 0x27
    1e30:	8a 95       	dec	r24
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_VidInit+0x55e>
    1e34:	8f a3       	std	Y+39, r24	; 0x27
	// Delay for more than 39 us
	_delay_us(40);
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE);
    1e36:	86 e0       	ldi	r24, 0x06	; 6
    1e38:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e2       	ldi	r26, 0x20	; 32
    1e42:	b2 e4       	ldi	r27, 0x42	; 66
    1e44:	8b a3       	std	Y+35, r24	; 0x23
    1e46:	9c a3       	std	Y+36, r25	; 0x24
    1e48:	ad a3       	std	Y+37, r26	; 0x25
    1e4a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	2b ea       	ldi	r18, 0xAB	; 171
    1e56:	3a ea       	ldi	r19, 0xAA	; 170
    1e58:	4a e2       	ldi	r20, 0x2A	; 42
    1e5a:	50 e4       	ldi	r21, 0x40	; 64
    1e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8f 8f       	std	Y+31, r24	; 0x1f
    1e66:	98 a3       	std	Y+32, r25	; 0x20
    1e68:	a9 a3       	std	Y+33, r26	; 0x21
    1e6a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e6c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e6e:	78 a1       	ldd	r23, Y+32	; 0x20
    1e70:	89 a1       	ldd	r24, Y+33	; 0x21
    1e72:	9a a1       	ldd	r25, Y+34	; 0x22
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	1c f4       	brge	.+6      	; 0x1e8a <LCD_VidInit+0x5b8>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8e 8f       	std	Y+30, r24	; 0x1e
    1e88:	91 c0       	rjmp	.+290    	; 0x1fac <LCD_VidInit+0x6da>
	else if (__tmp > 255)
    1e8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e8c:	78 a1       	ldd	r23, Y+32	; 0x20
    1e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e90:	9a a1       	ldd	r25, Y+34	; 0x22
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	53 e4       	ldi	r21, 0x43	; 67
    1e9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <LCD_VidInit+0x5d2>
    1ea2:	7b c0       	rjmp	.+246    	; 0x1f9a <LCD_VidInit+0x6c8>
	{
		_delay_ms(__us / 1000.0);
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8a 8f       	std	Y+26, r24	; 0x1a
    1ebe:	9b 8f       	std	Y+27, r25	; 0x1b
    1ec0:	ac 8f       	std	Y+28, r26	; 0x1c
    1ec2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ec6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ec8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8e 8b       	std	Y+22, r24	; 0x16
    1ede:	9f 8b       	std	Y+23, r25	; 0x17
    1ee0:	a8 8f       	std	Y+24, r26	; 0x18
    1ee2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ee4:	6e 89       	ldd	r22, Y+22	; 0x16
    1ee6:	7f 89       	ldd	r23, Y+23	; 0x17
    1ee8:	88 8d       	ldd	r24, Y+24	; 0x18
    1eea:	99 8d       	ldd	r25, Y+25	; 0x19
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <LCD_VidInit+0x634>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9d 8b       	std	Y+21, r25	; 0x15
    1f02:	8c 8b       	std	Y+20, r24	; 0x14
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <LCD_VidInit+0x6b2>
	else if (__tmp > 65535)
    1f06:	6e 89       	ldd	r22, Y+22	; 0x16
    1f08:	7f 89       	ldd	r23, Y+23	; 0x17
    1f0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <LCD_VidInit+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f20:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f24:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9d 8b       	std	Y+21, r25	; 0x15
    1f44:	8c 8b       	std	Y+20, r24	; 0x14
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <LCD_VidInit+0x694>
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9b 8b       	std	Y+19, r25	; 0x13
    1f4e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f50:	8a 89       	ldd	r24, Y+18	; 0x12
    1f52:	9b 89       	ldd	r25, Y+19	; 0x13
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_VidInit+0x682>
    1f58:	9b 8b       	std	Y+19, r25	; 0x13
    1f5a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f5e:	9d 89       	ldd	r25, Y+21	; 0x15
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9d 8b       	std	Y+21, r25	; 0x15
    1f64:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8c 89       	ldd	r24, Y+20	; 0x14
    1f68:	9d 89       	ldd	r25, Y+21	; 0x15
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <LCD_VidInit+0x676>
    1f6e:	24 c0       	rjmp	.+72     	; 0x1fb8 <LCD_VidInit+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6e 89       	ldd	r22, Y+22	; 0x16
    1f72:	7f 89       	ldd	r23, Y+23	; 0x17
    1f74:	88 8d       	ldd	r24, Y+24	; 0x18
    1f76:	99 8d       	ldd	r25, Y+25	; 0x19
    1f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9d 8b       	std	Y+21, r25	; 0x15
    1f82:	8c 8b       	std	Y+20, r24	; 0x14
    1f84:	8c 89       	ldd	r24, Y+20	; 0x14
    1f86:	9d 89       	ldd	r25, Y+21	; 0x15
    1f88:	99 8b       	std	Y+17, r25	; 0x11
    1f8a:	88 8b       	std	Y+16, r24	; 0x10
    1f8c:	88 89       	ldd	r24, Y+16	; 0x10
    1f8e:	99 89       	ldd	r25, Y+17	; 0x11
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_VidInit+0x6be>
    1f94:	99 8b       	std	Y+17, r25	; 0x11
    1f96:	88 8b       	std	Y+16, r24	; 0x10
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <LCD_VidInit+0x6e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f9a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f9c:	78 a1       	ldd	r23, Y+32	; 0x20
    1f9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8e 8f       	std	Y+30, r24	; 0x1e
    1fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	8a 95       	dec	r24
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_VidInit+0x6e0>
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a0 e0       	ldi	r26, 0x00	; 0
    1fc4:	b0 e4       	ldi	r27, 0x40	; 64
    1fc6:	8b 87       	std	Y+11, r24	; 0x0b
    1fc8:	9c 87       	std	Y+12, r25	; 0x0c
    1fca:	ad 87       	std	Y+13, r26	; 0x0d
    1fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a ef       	ldi	r20, 0xFA	; 250
    1fdc:	54 e4       	ldi	r21, 0x44	; 68
    1fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8f 83       	std	Y+7, r24	; 0x07
    1fe8:	98 87       	std	Y+8, r25	; 0x08
    1fea:	a9 87       	std	Y+9, r26	; 0x09
    1fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <LCD_VidInit+0x73e>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	3f c0       	rjmp	.+126    	; 0x208e <LCD_VidInit+0x7bc>
	else if (__tmp > 65535)
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <LCD_VidInit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <LCD_VidInit+0x79e>
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9c 83       	std	Y+4, r25	; 0x04
    2058:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_VidInit+0x78c>
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	69 f7       	brne	.-38     	; 0x2052 <LCD_VidInit+0x780>
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <LCD_VidInit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_VidInit+0x7c8>
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
	// Delay for more than 1.53 ms
	_delay_ms(2);
#endif
}
    20a2:	cc 59       	subi	r28, 0x9C	; 156
    20a4:	df 4f       	sbci	r29, 0xFF	; 255
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_U8Char){
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	6d 97       	sbiw	r28, 0x1d	; 29
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT
	/******* to define RS / RW ***********/
	DIO_VidSetPinValue(CONTROL_PORT,RS,HIGH);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
	/*to define value of character on port*/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Char);
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20de:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VidSetPortValue>
	/*********to make enable pulse*********/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e8       	ldi	r26, 0x80	; 128
    20f2:	bf e3       	ldi	r27, 0x3F	; 63
    20f4:	89 8f       	std	Y+25, r24	; 0x19
    20f6:	9a 8f       	std	Y+26, r25	; 0x1a
    20f8:	ab 8f       	std	Y+27, r26	; 0x1b
    20fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	69 8d       	ldd	r22, Y+25	; 0x19
    20fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a ef       	ldi	r20, 0xFA	; 250
    210a:	54 e4       	ldi	r21, 0x44	; 68
    210c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8d 8b       	std	Y+21, r24	; 0x15
    2116:	9e 8b       	std	Y+22, r25	; 0x16
    2118:	af 8b       	std	Y+23, r26	; 0x17
    211a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211c:	6d 89       	ldd	r22, Y+21	; 0x15
    211e:	7e 89       	ldd	r23, Y+22	; 0x16
    2120:	8f 89       	ldd	r24, Y+23	; 0x17
    2122:	98 8d       	ldd	r25, Y+24	; 0x18
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <LCD_VidSendChar+0x84>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <LCD_VidSendChar+0x102>
	else if (__tmp > 65535)
    213e:	6d 89       	ldd	r22, Y+21	; 0x15
    2140:	7e 89       	ldd	r23, Y+22	; 0x16
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	98 8d       	ldd	r25, Y+24	; 0x18
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <LCD_VidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	69 8d       	ldd	r22, Y+25	; 0x19
    2158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	0f c0       	rjmp	.+30     	; 0x219e <LCD_VidSendChar+0xe4>
    2180:	88 ec       	ldi	r24, 0xC8	; 200
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9a 8b       	std	Y+18, r25	; 0x12
    2186:	89 8b       	std	Y+17, r24	; 0x11
    2188:	89 89       	ldd	r24, Y+17	; 0x11
    218a:	9a 89       	ldd	r25, Y+18	; 0x12
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_VidSendChar+0xd2>
    2190:	9a 8b       	std	Y+18, r25	; 0x12
    2192:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	8b 89       	ldd	r24, Y+19	; 0x13
    2196:	9c 89       	ldd	r25, Y+20	; 0x14
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9c 8b       	std	Y+20, r25	; 0x14
    219c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	8b 89       	ldd	r24, Y+19	; 0x13
    21a0:	9c 89       	ldd	r25, Y+20	; 0x14
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <LCD_VidSendChar+0xc6>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <LCD_VidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	6d 89       	ldd	r22, Y+21	; 0x15
    21aa:	7e 89       	ldd	r23, Y+22	; 0x16
    21ac:	8f 89       	ldd	r24, Y+23	; 0x17
    21ae:	98 8d       	ldd	r25, Y+24	; 0x18
    21b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	8b 8b       	std	Y+19, r24	; 0x13
    21bc:	8b 89       	ldd	r24, Y+19	; 0x13
    21be:	9c 89       	ldd	r25, Y+20	; 0x14
    21c0:	98 8b       	std	Y+16, r25	; 0x10
    21c2:	8f 87       	std	Y+15, r24	; 0x0f
    21c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c6:	98 89       	ldd	r25, Y+16	; 0x10
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_VidSendChar+0x10e>
    21cc:	98 8b       	std	Y+16, r25	; 0x10
    21ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e4       	ldi	r27, 0x40	; 64
    21e2:	8b 87       	std	Y+11, r24	; 0x0b
    21e4:	9c 87       	std	Y+12, r25	; 0x0c
    21e6:	ad 87       	std	Y+13, r26	; 0x0d
    21e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a ef       	ldi	r20, 0xFA	; 250
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8f 83       	std	Y+7, r24	; 0x07
    2204:	98 87       	std	Y+8, r25	; 0x08
    2206:	a9 87       	std	Y+9, r26	; 0x09
    2208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_VidSendChar+0x172>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_VidSendChar+0x1f0>
	else if (__tmp > 65535)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_VidSendChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_VidSendChar+0x1d2>
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_VidSendChar+0x1c0>
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_VidSendChar+0x1b4>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <LCD_VidSendChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_VidSendChar+0x1fc>
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
		_delay_ms(2);

#endif

}
    22be:	6d 96       	adiw	r28, 0x1d	; 29
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <LCD_VidSendString>:

void LCD_VidSendString(u8 Copy_U8String[] ){
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	6b 97       	sbiw	r28, 0x1b	; 27
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	9b 8f       	std	Y+27, r25	; 0x1b
    22e6:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 i=0;
    22e8:	19 8e       	std	Y+25, r1	; 0x19
    22ea:	d2 c0       	rjmp	.+420    	; 0x2490 <LCD_VidSendString+0x1c0>
	while( Copy_U8String[i] != '\0' ){
		if (15 == i){
    22ec:	89 8d       	ldd	r24, Y+25	; 0x19
    22ee:	8f 30       	cpi	r24, 0x0F	; 15
    22f0:	19 f4       	brne	.+6      	; 0x22f8 <LCD_VidSendString+0x28>
			LCD_VidSendCommend(LINE_2_START);
    22f2:	80 ec       	ldi	r24, 0xC0	; 192
    22f4:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
		}
		LCD_VidSendChar(Copy_U8String[i]);
    22f8:	89 8d       	ldd	r24, Y+25	; 0x19
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2300:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 81       	ld	r24, Z
    230a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <LCD_VidSendChar>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e8       	ldi	r26, 0x80	; 128
    2314:	bf e3       	ldi	r27, 0x3F	; 63
    2316:	8d 8b       	std	Y+21, r24	; 0x15
    2318:	9e 8b       	std	Y+22, r25	; 0x16
    231a:	af 8b       	std	Y+23, r26	; 0x17
    231c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    231e:	6d 89       	ldd	r22, Y+21	; 0x15
    2320:	7e 89       	ldd	r23, Y+22	; 0x16
    2322:	8f 89       	ldd	r24, Y+23	; 0x17
    2324:	98 8d       	ldd	r25, Y+24	; 0x18
    2326:	2b ea       	ldi	r18, 0xAB	; 171
    2328:	3a ea       	ldi	r19, 0xAA	; 170
    232a:	4a e2       	ldi	r20, 0x2A	; 42
    232c:	50 e4       	ldi	r21, 0x40	; 64
    232e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	89 8b       	std	Y+17, r24	; 0x11
    2338:	9a 8b       	std	Y+18, r25	; 0x12
    233a:	ab 8b       	std	Y+19, r26	; 0x13
    233c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    233e:	69 89       	ldd	r22, Y+17	; 0x11
    2340:	7a 89       	ldd	r23, Y+18	; 0x12
    2342:	8b 89       	ldd	r24, Y+19	; 0x13
    2344:	9c 89       	ldd	r25, Y+20	; 0x14
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	1c f4       	brge	.+6      	; 0x235c <LCD_VidSendString+0x8c>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	88 8b       	std	Y+16, r24	; 0x10
    235a:	91 c0       	rjmp	.+290    	; 0x247e <LCD_VidSendString+0x1ae>
	else if (__tmp > 255)
    235c:	69 89       	ldd	r22, Y+17	; 0x11
    235e:	7a 89       	ldd	r23, Y+18	; 0x12
    2360:	8b 89       	ldd	r24, Y+19	; 0x13
    2362:	9c 89       	ldd	r25, Y+20	; 0x14
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	53 e4       	ldi	r21, 0x43	; 67
    236c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	0c f0       	brlt	.+2      	; 0x2376 <LCD_VidSendString+0xa6>
    2374:	7b c0       	rjmp	.+246    	; 0x246c <LCD_VidSendString+0x19c>
	{
		_delay_ms(__us / 1000.0);
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a e7       	ldi	r20, 0x7A	; 122
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8c 87       	std	Y+12, r24	; 0x0c
    2390:	9d 87       	std	Y+13, r25	; 0x0d
    2392:	ae 87       	std	Y+14, r26	; 0x0e
    2394:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6c 85       	ldd	r22, Y+12	; 0x0c
    2398:	7d 85       	ldd	r23, Y+13	; 0x0d
    239a:	8e 85       	ldd	r24, Y+14	; 0x0e
    239c:	9f 85       	ldd	r25, Y+15	; 0x0f
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	88 87       	std	Y+8, r24	; 0x08
    23b0:	99 87       	std	Y+9, r25	; 0x09
    23b2:	aa 87       	std	Y+10, r26	; 0x0a
    23b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23b6:	68 85       	ldd	r22, Y+8	; 0x08
    23b8:	79 85       	ldd	r23, Y+9	; 0x09
    23ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    23bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <LCD_VidSendString+0x108>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9f 83       	std	Y+7, r25	; 0x07
    23d4:	8e 83       	std	Y+6, r24	; 0x06
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <LCD_VidSendString+0x186>
	else if (__tmp > 65535)
    23d8:	68 85       	ldd	r22, Y+8	; 0x08
    23da:	79 85       	ldd	r23, Y+9	; 0x09
    23dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23de:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <LCD_VidSendString+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9f 83       	std	Y+7, r25	; 0x07
    2416:	8e 83       	std	Y+6, r24	; 0x06
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <LCD_VidSendString+0x168>
    241a:	88 ec       	ldi	r24, 0xC8	; 200
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9d 83       	std	Y+5, r25	; 0x05
    2420:	8c 83       	std	Y+4, r24	; 0x04
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	9d 81       	ldd	r25, Y+5	; 0x05
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_VidSendString+0x156>
    242a:	9d 83       	std	Y+5, r25	; 0x05
    242c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8e 81       	ldd	r24, Y+6	; 0x06
    2430:	9f 81       	ldd	r25, Y+7	; 0x07
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9f 83       	std	Y+7, r25	; 0x07
    2436:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	9f 81       	ldd	r25, Y+7	; 0x07
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <LCD_VidSendString+0x14a>
    2440:	24 c0       	rjmp	.+72     	; 0x248a <LCD_VidSendString+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	68 85       	ldd	r22, Y+8	; 0x08
    2444:	79 85       	ldd	r23, Y+9	; 0x09
    2446:	8a 85       	ldd	r24, Y+10	; 0x0a
    2448:	9b 85       	ldd	r25, Y+11	; 0x0b
    244a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9f 83       	std	Y+7, r25	; 0x07
    2454:	8e 83       	std	Y+6, r24	; 0x06
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	9f 81       	ldd	r25, Y+7	; 0x07
    245a:	9b 83       	std	Y+3, r25	; 0x03
    245c:	8a 83       	std	Y+2, r24	; 0x02
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_VidSendString+0x192>
    2466:	9b 83       	std	Y+3, r25	; 0x03
    2468:	8a 83       	std	Y+2, r24	; 0x02
    246a:	0f c0       	rjmp	.+30     	; 0x248a <LCD_VidSendString+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246c:	69 89       	ldd	r22, Y+17	; 0x11
    246e:	7a 89       	ldd	r23, Y+18	; 0x12
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	9c 89       	ldd	r25, Y+20	; 0x14
    2474:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	88 8b       	std	Y+16, r24	; 0x10
    247e:	88 89       	ldd	r24, Y+16	; 0x10
    2480:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	8a 95       	dec	r24
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_VidSendString+0x1b4>
    2488:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		i++;
    248a:	89 8d       	ldd	r24, Y+25	; 0x19
    248c:	8f 5f       	subi	r24, 0xFF	; 255
    248e:	89 8f       	std	Y+25, r24	; 0x19

}

void LCD_VidSendString(u8 Copy_U8String[] ){
	u8 i=0;
	while( Copy_U8String[i] != '\0' ){
    2490:	89 8d       	ldd	r24, Y+25	; 0x19
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2498:	9b 8d       	ldd	r25, Y+27	; 0x1b
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	80 81       	ld	r24, Z
    24a2:	88 23       	and	r24, r24
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <LCD_VidSendString+0x1d8>
    24a6:	22 cf       	rjmp	.-444    	; 0x22ec <LCD_VidSendString+0x1c>
		}
		LCD_VidSendChar(Copy_U8String[i]);
		_delay_us(1);
		i++;
	}//end while
}//end FUNC LCD_VidSendString
    24a8:	6b 96       	adiw	r28, 0x1b	; 27
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <LCD_U32Pow>:

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <LCD_U32Pow+0x6>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <LCD_U32Pow+0x8>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	8b 83       	std	Y+3, r24	; 0x03
    24c8:	6c 83       	std	Y+4, r22	; 0x04
  u32 local_res = 1 ;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	12 c0       	rjmp	.+36     	; 0x24f8 <LCD_U32Pow+0x3e>
  while (Copy_U8Bow >0 ){
	  local_res *= Copy_U8Base ;
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	ac 01       	movw	r20, r24
    24e0:	42 9f       	mul	r20, r18
    24e2:	c0 01       	movw	r24, r0
    24e4:	43 9f       	mul	r20, r19
    24e6:	90 0d       	add	r25, r0
    24e8:	52 9f       	mul	r21, r18
    24ea:	90 0d       	add	r25, r0
    24ec:	11 24       	eor	r1, r1
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
	  Copy_U8Bow--;
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	81 50       	subi	r24, 0x01	; 1
    24f6:	8c 83       	std	Y+4, r24	; 0x04
	}//end while
}//end FUNC LCD_VidSendString

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
  u32 local_res = 1 ;
  while (Copy_U8Bow >0 ){
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	88 23       	and	r24, r24
    24fc:	59 f7       	brne	.-42     	; 0x24d4 <LCD_U32Pow+0x1a>
	  local_res *= Copy_U8Base ;
	  Copy_U8Bow--;
  }
  return  local_res ;
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <LCD_VidPrintVar>:

void LCD_VidPrintVar(u32 Copy_U8Var){
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <LCD_VidPrintVar+0xa>
    251a:	00 d0       	rcall	.+0      	; 0x251c <LCD_VidPrintVar+0xc>
    251c:	00 d0       	rcall	.+0      	; 0x251e <LCD_VidPrintVar+0xe>
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
	if (0 == Copy_U8Var){
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	21 f4       	brne	.+8      	; 0x2536 <LCD_VidPrintVar+0x26>
		LCD_VidSendChar('0');
    252e:	80 e3       	ldi	r24, 0x30	; 48
    2530:	0e 94 5d 10 	call	0x20ba	; 0x20ba <LCD_VidSendChar>
    2534:	5d c0       	rjmp	.+186    	; 0x25f0 <LCD_VidPrintVar+0xe0>
		return ;
	}
	u32 local_num = 0 ;
    2536:	1c 82       	std	Y+4, r1	; 0x04
    2538:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0 ;
    253a:	1a 82       	std	Y+2, r1	; 0x02
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <LCD_VidPrintVar+0x34>
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidSendChar('0');
		return ;
	}
	u32 local_num = 0 ;
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
    2544:	8a e0       	ldi	r24, 0x0A	; 10
    2546:	6a 81       	ldd	r22, Y+2	; 0x02
    2548:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LCD_U32Pow>
    254c:	9c 01       	movw	r18, r24
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	b9 01       	movw	r22, r18
    2554:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodhi4>
    2558:	cb 01       	movw	r24, r22
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	81 f7       	brne	.-32     	; 0x253e <LCD_VidPrintVar+0x2e>
		i++ ;
	}
	s8 copy_i = i-1 ;
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	81 50       	subi	r24, 0x01	; 1
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	27 c0       	rjmp	.+78     	; 0x25b4 <LCD_VidPrintVar+0xa4>
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	2a e0       	ldi	r18, 0x0A	; 10
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	b9 01       	movw	r22, r18
    2570:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodhi4>
    2574:	8c 01       	movw	r16, r24
    2576:	99 81       	ldd	r25, Y+1	; 0x01
    2578:	8a e0       	ldi	r24, 0x0A	; 10
    257a:	69 2f       	mov	r22, r25
    257c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LCD_U32Pow>
    2580:	08 9f       	mul	r16, r24
    2582:	90 01       	movw	r18, r0
    2584:	09 9f       	mul	r16, r25
    2586:	30 0d       	add	r19, r0
    2588:	18 9f       	mul	r17, r24
    258a:	30 0d       	add	r19, r0
    258c:	11 24       	eor	r1, r1
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	82 0f       	add	r24, r18
    2594:	93 1f       	adc	r25, r19
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
		Copy_U8Var/=10 ;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	2a e0       	ldi	r18, 0x0A	; 10
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	b9 01       	movw	r22, r18
    25a4:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodhi4>
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
		copy_i-- ;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	81 50       	subi	r24, 0x01	; 1
    25b2:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
	}
	s8 copy_i = i-1 ;
	while ( copy_i >= 0 ){
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	88 23       	and	r24, r24
    25b8:	b4 f6       	brge	.-84     	; 0x2566 <LCD_VidPrintVar+0x56>
    25ba:	17 c0       	rjmp	.+46     	; 0x25ea <LCD_VidPrintVar+0xda>
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	2a e0       	ldi	r18, 0x0A	; 10
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	b9 01       	movw	r22, r18
    25c6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodhi4>
    25ca:	80 5d       	subi	r24, 0xD0	; 208
    25cc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <LCD_VidSendChar>
		local_num /= 10 ;
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	2a e0       	ldi	r18, 0x0A	; 10
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	b9 01       	movw	r22, r18
    25da:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodhi4>
    25de:	cb 01       	movw	r24, r22
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	81 50       	subi	r24, 0x01	; 1
    25e8:	8a 83       	std	Y+2, r24	; 0x02
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	88 23       	and	r24, r24
    25ee:	31 f7       	brne	.-52     	; 0x25bc <LCD_VidPrintVar+0xac>
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
		local_num /= 10 ;
		i--;
	}
}
    25f0:	26 96       	adiw	r28, 0x06	; 6
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <LCD_VidPosCur>:
void LCD_VidPosCur(u8 Copy_U8Row , u8 Copy_U8Col ) {
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <LCD_VidPosCur+0x6>
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	8a 83       	std	Y+2, r24	; 0x02
    2614:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = 0 ;
    2616:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_U8Row == 0)
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	88 23       	and	r24, r24
    261c:	19 f4       	brne	.+6      	; 0x2624 <LCD_VidPosCur+0x1e>
		Local_Address =0x80 ;
    261e:	80 e8       	ldi	r24, 0x80	; 128
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	05 c0       	rjmp	.+10     	; 0x262e <LCD_VidPosCur+0x28>
	else if (Copy_U8Row == 1)
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	11 f4       	brne	.+4      	; 0x262e <LCD_VidPosCur+0x28>
		Local_Address =0xC0 ;
    262a:	80 ec       	ldi	r24, 0xC0	; 192
    262c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Col < 16 )
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	80 31       	cpi	r24, 0x10	; 16
    2632:	20 f4       	brcc	.+8      	; 0x263c <LCD_VidPosCur+0x36>
		Local_Address += Copy_U8Col ;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9b 81       	ldd	r25, Y+3	; 0x03
    2638:	89 0f       	add	r24, r25
    263a:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommend ( Local_Address );
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <LCD_VidClear>:
void LCD_VidClear (){
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommend(DISPLAY_CLEAR) ;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_VidSendCommend>
}
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <main>:
#include"LCD_Interface.h"
#include "KeyPad_Interface.h"

/*main*/

void main (void){
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
	s8 num ;
	LCD_VidInit();
    266c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidInit>
	KeyPad_VidInit();
    2670:	0e 94 c8 09 	call	0x1390	; 0x1390 <KeyPad_VidInit>
	 while (1)
	    {
		 num = KeyPad_U8GetNUM () ;
    2674:	0e 94 81 0a 	call	0x1502	; 0x1502 <KeyPad_U8GetNUM>
    2678:	89 83       	std	Y+1, r24	; 0x01
		 if ( !( num == 50 ||  num == '/' ||  num == '*' ||  num == '+' ||  num == '-' ||  num == '=')  )
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	82 33       	cpi	r24, 0x32	; 50
    267e:	b1 f0       	breq	.+44     	; 0x26ac <main+0x4a>
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	8f 32       	cpi	r24, 0x2F	; 47
    2684:	99 f0       	breq	.+38     	; 0x26ac <main+0x4a>
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	8a 32       	cpi	r24, 0x2A	; 42
    268a:	81 f0       	breq	.+32     	; 0x26ac <main+0x4a>
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	8b 32       	cpi	r24, 0x2B	; 43
    2690:	69 f0       	breq	.+26     	; 0x26ac <main+0x4a>
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	8d 32       	cpi	r24, 0x2D	; 45
    2696:	51 f0       	breq	.+20     	; 0x26ac <main+0x4a>
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	8d 33       	cpi	r24, 0x3D	; 61
    269c:	39 f0       	breq	.+14     	; 0x26ac <main+0x4a>
		 {
			 LCD_VidPrintVar(num ) ;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	99 27       	eor	r25, r25
    26a2:	87 fd       	sbrc	r24, 7
    26a4:	90 95       	com	r25
    26a6:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_VidPrintVar>
    26aa:	e4 cf       	rjmp	.-56     	; 0x2674 <main+0x12>
		 }//end if
		 else if (num != 50){
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	82 33       	cpi	r24, 0x32	; 50
    26b0:	09 f3       	breq	.-62     	; 0x2674 <main+0x12>
		     LCD_VidSendChar(num);
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <LCD_VidSendChar>
    26b8:	dd cf       	rjmp	.-70     	; 0x2674 <main+0x12>

000026ba <__udivmodhi4>:
    26ba:	aa 1b       	sub	r26, r26
    26bc:	bb 1b       	sub	r27, r27
    26be:	51 e1       	ldi	r21, 0x11	; 17
    26c0:	07 c0       	rjmp	.+14     	; 0x26d0 <__udivmodhi4_ep>

000026c2 <__udivmodhi4_loop>:
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	a6 17       	cp	r26, r22
    26c8:	b7 07       	cpc	r27, r23
    26ca:	10 f0       	brcs	.+4      	; 0x26d0 <__udivmodhi4_ep>
    26cc:	a6 1b       	sub	r26, r22
    26ce:	b7 0b       	sbc	r27, r23

000026d0 <__udivmodhi4_ep>:
    26d0:	88 1f       	adc	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	5a 95       	dec	r21
    26d6:	a9 f7       	brne	.-22     	; 0x26c2 <__udivmodhi4_loop>
    26d8:	80 95       	com	r24
    26da:	90 95       	com	r25
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	08 95       	ret

000026e2 <__prologue_saves__>:
    26e2:	2f 92       	push	r2
    26e4:	3f 92       	push	r3
    26e6:	4f 92       	push	r4
    26e8:	5f 92       	push	r5
    26ea:	6f 92       	push	r6
    26ec:	7f 92       	push	r7
    26ee:	8f 92       	push	r8
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	ca 1b       	sub	r28, r26
    270c:	db 0b       	sbc	r29, r27
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	09 94       	ijmp

0000271a <__epilogue_restores__>:
    271a:	2a 88       	ldd	r2, Y+18	; 0x12
    271c:	39 88       	ldd	r3, Y+17	; 0x11
    271e:	48 88       	ldd	r4, Y+16	; 0x10
    2720:	5f 84       	ldd	r5, Y+15	; 0x0f
    2722:	6e 84       	ldd	r6, Y+14	; 0x0e
    2724:	7d 84       	ldd	r7, Y+13	; 0x0d
    2726:	8c 84       	ldd	r8, Y+12	; 0x0c
    2728:	9b 84       	ldd	r9, Y+11	; 0x0b
    272a:	aa 84       	ldd	r10, Y+10	; 0x0a
    272c:	b9 84       	ldd	r11, Y+9	; 0x09
    272e:	c8 84       	ldd	r12, Y+8	; 0x08
    2730:	df 80       	ldd	r13, Y+7	; 0x07
    2732:	ee 80       	ldd	r14, Y+6	; 0x06
    2734:	fd 80       	ldd	r15, Y+5	; 0x05
    2736:	0c 81       	ldd	r16, Y+4	; 0x04
    2738:	1b 81       	ldd	r17, Y+3	; 0x03
    273a:	aa 81       	ldd	r26, Y+2	; 0x02
    273c:	b9 81       	ldd	r27, Y+1	; 0x01
    273e:	ce 0f       	add	r28, r30
    2740:	d1 1d       	adc	r29, r1
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	ed 01       	movw	r28, r26
    274e:	08 95       	ret

00002750 <_exit>:
    2750:	f8 94       	cli

00002752 <__stop_program>:
    2752:	ff cf       	rjmp	.-2      	; 0x2752 <__stop_program>
