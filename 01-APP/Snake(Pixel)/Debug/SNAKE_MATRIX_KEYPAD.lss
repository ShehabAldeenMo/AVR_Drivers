
SNAKE_MATRIX_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00003294  00003328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000d8  008000d8  000033a0  2**0
                  ALLOC
  3 .stab         0000279c  00000000  00000000  000033a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001084  00000000  00000000  00005b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000af78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3e       	cpi	r26, 0xE3	; 227
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 14 	call	0x289e	; 0x289e <main>
      8a:	0c 94 48 19 	jmp	0x3290	; 0x3290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_VidSetPinDirection>:
#include"../LIB/STD_TYPES.h"
#include"../LIB/BIT_MATH.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <DIO_VidSetPinDirection+0x22>
     cbe:	6f c0       	rjmp	.+222    	; 0xd9e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3f 83       	std	Y+7, r19	; 0x07
     cc8:	2e 83       	std	Y+6, r18	; 0x06
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	49 f1       	breq	.+82     	; 0xd26 <DIO_VidSetPinDirection+0x88>
     cd4:	2e 81       	ldd	r18, Y+6	; 0x06
     cd6:	3f 81       	ldd	r19, Y+7	; 0x07
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	2c f4       	brge	.+10     	; 0xce8 <DIO_VidSetPinDirection+0x4a>
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	9f 81       	ldd	r25, Y+7	; 0x07
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	61 f0       	breq	.+24     	; 0xcfe <DIO_VidSetPinDirection+0x60>
     ce6:	d2 c0       	rjmp	.+420    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
     ce8:	2e 81       	ldd	r18, Y+6	; 0x06
     cea:	3f 81       	ldd	r19, Y+7	; 0x07
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	71 f1       	breq	.+92     	; 0xd4e <DIO_VidSetPinDirection+0xb0>
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	91 05       	cpc	r25, r1
     cfa:	e9 f1       	breq	.+122    	; 0xd76 <DIO_VidSetPinDirection+0xd8>
     cfc:	c7 c0       	rjmp	.+398    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_VidSetPinDirection+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_VidSetPinDirection+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	b3 c0       	rjmp	.+358    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_VidSetPinDirection+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_VidSetPinDirection+0xa2>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	9f c0       	rjmp	.+318    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
     d4e:	a4 e3       	ldi	r26, 0x34	; 52
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e3       	ldi	r30, 0x34	; 52
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_VidSetPinDirection+0xce>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_VidSetPinDirection+0xca>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	8b c0       	rjmp	.+278    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
     d76:	a1 e3       	ldi	r26, 0x31	; 49
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e3       	ldi	r30, 0x31	; 49
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_VidSetPinDirection+0xf6>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_VidSetPinDirection+0xf2>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	77 c0       	rjmp	.+238    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	88 23       	and	r24, r24
     da2:	09 f0       	breq	.+2      	; 0xda6 <DIO_VidSetPinDirection+0x108>
     da4:	73 c0       	rjmp	.+230    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	59 f1       	breq	.+86     	; 0xe10 <DIO_VidSetPinDirection+0x172>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_VidSetPinDirection+0x130>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f0       	breq	.+26     	; 0xde6 <DIO_VidSetPinDirection+0x148>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <DIO_VidSetPinDirection+0x19c>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <DIO_VidSetPinDirection+0x146>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <DIO_VidSetPinDirection+0x1c6>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_VidSetPinDirection+0x166>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_VidSetPinDirection+0x162>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	3e c0       	rjmp	.+124    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_VidSetPinDirection+0x190>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_VidSetPinDirection+0x18c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_VidSetPinDirection+0x1ba>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_VidSetPinDirection+0x1b6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_VidSetPinDirection+0x1e4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_VidSetPinDirection+0x1e0>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
     e8c:	27 96       	adiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_VidSetPortDirection+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_VidSetPortDirection+0x8>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3c 83       	std	Y+4, r19	; 0x04
     eb6:	2b 83       	std	Y+3, r18	; 0x03
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	d1 f0       	breq	.+52     	; 0xef6 <DIO_VidSetPortDirection+0x58>
     ec2:	2b 81       	ldd	r18, Y+3	; 0x03
     ec4:	3c 81       	ldd	r19, Y+4	; 0x04
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_VidSetPortDirection+0x38>
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	61 f0       	breq	.+24     	; 0xeec <DIO_VidSetPortDirection+0x4e>
     ed4:	1e c0       	rjmp	.+60     	; 0xf12 <DIO_VidSetPortDirection+0x74>
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	3c 81       	ldd	r19, Y+4	; 0x04
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	81 f0       	breq	.+32     	; 0xf00 <DIO_VidSetPortDirection+0x62>
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	81 f0       	breq	.+32     	; 0xf0a <DIO_VidSetPortDirection+0x6c>
     eea:	13 c0       	rjmp	.+38     	; 0xf12 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
     eec:	ea e3       	ldi	r30, 0x3A	; 58
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	80 83       	st	Z, r24
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
     ef6:	e7 e3       	ldi	r30, 0x37	; 55
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	80 83       	st	Z, r24
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
     f00:	e4 e3       	ldi	r30, 0x34	; 52
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	80 83       	st	Z, r24
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	27 97       	sbiw	r28, 0x07	; 7
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	6a 83       	std	Y+2, r22	; 0x02
     f38:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <DIO_VidSetPinValue+0x22>
     f40:	6f c0       	rjmp	.+222    	; 0x1020 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	9f 81       	ldd	r25, Y+7	; 0x07
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 05       	cpc	r25, r1
     f54:	49 f1       	breq	.+82     	; 0xfa8 <DIO_VidSetPinValue+0x88>
     f56:	2e 81       	ldd	r18, Y+6	; 0x06
     f58:	3f 81       	ldd	r19, Y+7	; 0x07
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	2c f4       	brge	.+10     	; 0xf6a <DIO_VidSetPinValue+0x4a>
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	61 f0       	breq	.+24     	; 0xf80 <DIO_VidSetPinValue+0x60>
     f68:	d2 c0       	rjmp	.+420    	; 0x110e <DIO_VidSetPinValue+0x1ee>
     f6a:	2e 81       	ldd	r18, Y+6	; 0x06
     f6c:	3f 81       	ldd	r19, Y+7	; 0x07
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	71 f1       	breq	.+92     	; 0xfd0 <DIO_VidSetPinValue+0xb0>
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	91 05       	cpc	r25, r1
     f7c:	e9 f1       	breq	.+122    	; 0xff8 <DIO_VidSetPinValue+0xd8>
     f7e:	c7 c0       	rjmp	.+398    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
     f80:	ab e3       	ldi	r26, 0x3B	; 59
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	eb e3       	ldi	r30, 0x3B	; 59
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_VidSetPinValue+0x7e>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_VidSetPinValue+0x7a>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	b3 c0       	rjmp	.+358    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
     fa8:	a8 e3       	ldi	r26, 0x38	; 56
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VidSetPinValue+0xa6>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VidSetPinValue+0xa2>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	9f c0       	rjmp	.+318    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
     fd0:	a5 e3       	ldi	r26, 0x35	; 53
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_VidSetPinValue+0xce>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_VidSetPinValue+0xca>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	8b c0       	rjmp	.+278    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
     ff8:	a2 e3       	ldi	r26, 0x32	; 50
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e2 e3       	ldi	r30, 0x32	; 50
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_VidSetPinValue+0xf6>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_VidSetPinValue+0xf2>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	77 c0       	rjmp	.+238    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <DIO_VidSetPinValue+0x108>
    1026:	73 c0       	rjmp	.+230    	; 0x110e <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	59 f1       	breq	.+86     	; 0x1092 <DIO_VidSetPinValue+0x172>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <DIO_VidSetPinValue+0x130>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f0       	breq	.+26     	; 0x1068 <DIO_VidSetPinValue+0x148>
    104e:	5f c0       	rjmp	.+190    	; 0x110e <DIO_VidSetPinValue+0x1ee>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	89 f1       	breq	.+98     	; 0x10bc <DIO_VidSetPinValue+0x19c>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <DIO_VidSetPinValue+0x146>
    1064:	40 c0       	rjmp	.+128    	; 0x10e6 <DIO_VidSetPinValue+0x1c6>
    1066:	53 c0       	rjmp	.+166    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1068:	ab e3       	ldi	r26, 0x3B	; 59
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e3       	ldi	r30, 0x3B	; 59
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_VidSetPinValue+0x166>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_VidSetPinValue+0x162>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	3e c0       	rjmp	.+124    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1092:	a8 e3       	ldi	r26, 0x38	; 56
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 e3       	ldi	r30, 0x38	; 56
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_VidSetPinValue+0x190>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_VidSetPinValue+0x18c>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	29 c0       	rjmp	.+82     	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    10bc:	a5 e3       	ldi	r26, 0x35	; 53
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e3       	ldi	r30, 0x35	; 53
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_VidSetPinValue+0x1ba>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_VidSetPinValue+0x1b6>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    10e6:	a2 e3       	ldi	r26, 0x32	; 50
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e2 e3       	ldi	r30, 0x32	; 50
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_VidSetPinValue+0x1e4>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_VidSetPinValue+0x1e0>
    1108:	80 95       	com	r24
    110a:	84 23       	and	r24, r20
    110c:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    110e:	27 96       	adiw	r28, 0x07	; 7
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_VidSetPortValue+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_VidSetPortValue+0x8>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	d1 f0       	breq	.+52     	; 0x1178 <DIO_VidSetPortValue+0x58>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <DIO_VidSetPortValue+0x38>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <DIO_VidSetPortValue+0x4e>
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <DIO_VidSetPortValue+0x74>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <DIO_VidSetPortValue+0x62>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_VidSetPortValue+0x6c>
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1178:	e8 e3       	ldi	r30, 0x38	; 56
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1182:	e5 e3       	ldi	r30, 0x35	; 53
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <DIO_VidTogglePinValue+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_VidTogglePinValue+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3c 83       	std	Y+4, r19	; 0x04
    11ba:	2b 83       	std	Y+3, r18	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	49 f1       	breq	.+82     	; 0x1218 <DIO_VidTogglePinValue+0x76>
    11c6:	2b 81       	ldd	r18, Y+3	; 0x03
    11c8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	2c f4       	brge	.+10     	; 0x11da <DIO_VidTogglePinValue+0x38>
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <DIO_VidTogglePinValue+0x4e>
    11d8:	5a c0       	rjmp	.+180    	; 0x128e <DIO_VidTogglePinValue+0xec>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	71 f1       	breq	.+92     	; 0x1240 <DIO_VidTogglePinValue+0x9e>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	e9 f1       	breq	.+122    	; 0x1268 <DIO_VidTogglePinValue+0xc6>
    11ee:	4f c0       	rjmp	.+158    	; 0x128e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    11f0:	ab e3       	ldi	r26, 0x3B	; 59
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_VidTogglePinValue+0x6c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_VidTogglePinValue+0x68>
    1212:	84 27       	eor	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	3b c0       	rjmp	.+118    	; 0x128e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1218:	a8 e3       	ldi	r26, 0x38	; 56
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_VidTogglePinValue+0x94>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_VidTogglePinValue+0x90>
    123a:	84 27       	eor	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	27 c0       	rjmp	.+78     	; 0x128e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_VidTogglePinValue+0xbc>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_VidTogglePinValue+0xb8>
    1262:	84 27       	eor	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	13 c0       	rjmp	.+38     	; 0x128e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_VidTogglePinValue+0xe4>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_VidTogglePinValue+0xe0>
    128a:	84 27       	eor	r24, r20
    128c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_U8GetPinValue+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <DIO_U8GetPinValue+0x8>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_U8GetPinValue+0xa>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3d 83       	std	Y+5, r19	; 0x05
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ba:	5d 81       	ldd	r21, Y+5	; 0x05
    12bc:	41 30       	cpi	r20, 0x01	; 1
    12be:	51 05       	cpc	r21, r1
    12c0:	49 f1       	breq	.+82     	; 0x1314 <DIO_U8GetPinValue+0x78>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	91 05       	cpc	r25, r1
    12ca:	34 f4       	brge	.+12     	; 0x12d8 <DIO_U8GetPinValue+0x3c>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	61 f0       	breq	.+24     	; 0x12ee <DIO_U8GetPinValue+0x52>
    12d6:	57 c0       	rjmp	.+174    	; 0x1386 <DIO_U8GetPinValue+0xea>
    12d8:	4c 81       	ldd	r20, Y+4	; 0x04
    12da:	5d 81       	ldd	r21, Y+5	; 0x05
    12dc:	42 30       	cpi	r20, 0x02	; 2
    12de:	51 05       	cpc	r21, r1
    12e0:	61 f1       	breq	.+88     	; 0x133a <DIO_U8GetPinValue+0x9e>
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	91 05       	cpc	r25, r1
    12ea:	d1 f1       	breq	.+116    	; 0x1360 <DIO_U8GetPinValue+0xc4>
    12ec:	4c c0       	rjmp	.+152    	; 0x1386 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    12ee:	e9 e3       	ldi	r30, 0x39	; 57
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_U8GetPinValue+0x6a>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_U8GetPinValue+0x66>
    130a:	ca 01       	movw	r24, r20
    130c:	58 2f       	mov	r21, r24
    130e:	51 70       	andi	r21, 0x01	; 1
    1310:	5b 83       	std	Y+3, r21	; 0x03
    1312:	3a c0       	rjmp	.+116    	; 0x1388 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    1314:	e6 e3       	ldi	r30, 0x36	; 54
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_U8GetPinValue+0x90>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_U8GetPinValue+0x8c>
    1330:	ca 01       	movw	r24, r20
    1332:	58 2f       	mov	r21, r24
    1334:	51 70       	andi	r21, 0x01	; 1
    1336:	5b 83       	std	Y+3, r21	; 0x03
    1338:	27 c0       	rjmp	.+78     	; 0x1388 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    133a:	e3 e3       	ldi	r30, 0x33	; 51
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_U8GetPinValue+0xb6>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_U8GetPinValue+0xb2>
    1356:	ca 01       	movw	r24, r20
    1358:	58 2f       	mov	r21, r24
    135a:	51 70       	andi	r21, 0x01	; 1
    135c:	5b 83       	std	Y+3, r21	; 0x03
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    1360:	e0 e3       	ldi	r30, 0x30	; 48
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_U8GetPinValue+0xdc>
    1374:	55 95       	asr	r21
    1376:	47 95       	ror	r20
    1378:	8a 95       	dec	r24
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_U8GetPinValue+0xd8>
    137c:	ca 01       	movw	r24, r20
    137e:	58 2f       	mov	r21, r24
    1380:	51 70       	andi	r21, 0x01	; 1
    1382:	5b 83       	std	Y+3, r21	; 0x03
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <DIO_U8GetPinValue+0xec>
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	8e 83       	std	Y+6, r24	; 0x06
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	26 96       	adiw	r28, 0x06	; 6
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <KeyPad_VidInit>:

/*prg*/

#ifdef KEYPAD_4_4

void KeyPad_VidInit(void){
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62

	/*to define first 4 pins as inputs for rows
	and second 4 pins as output for columns*/
	DIO_VidSetPortDirection( KEYPAD_PORT , 0xf0 ) ;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	60 ef       	ldi	r22, 0xF0	; 240
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPortDirection>

	/*to active Pull_up_resistor for 4 pins input for rows
	and output high on columns*/
	DIO_VidSetPortValue( KEYPAD_PORT , 0xff );
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	6f ef       	ldi	r22, 0xFF	; 255
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_VidSetPortValue>
     }
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <KeyPad_U8Num>:
	DIO_VidSetPortValue( KEYPAD_PORT , 0x3f );
	}
#endif


u8 KeyPad_U8Num(u8 Copy_num){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <KeyPad_U8Num+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <KeyPad_U8Num+0x8>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_num){
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	2b 83       	std	Y+3, r18	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	87 30       	cpi	r24, 0x07	; 7
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <KeyPad_U8Num+0x24>
    13e8:	6f c0       	rjmp	.+222    	; 0x14c8 <KeyPad_U8Num+0x102>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	28 30       	cpi	r18, 0x08	; 8
    13f0:	31 05       	cpc	r19, r1
    13f2:	54 f5       	brge	.+84     	; 0x1448 <KeyPad_U8Num+0x82>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <KeyPad_U8Num+0x3a>
    13fe:	58 c0       	rjmp	.+176    	; 0x14b0 <KeyPad_U8Num+0xea>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	24 30       	cpi	r18, 0x04	; 4
    1406:	31 05       	cpc	r19, r1
    1408:	94 f4       	brge	.+36     	; 0x142e <KeyPad_U8Num+0x68>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <KeyPad_U8Num+0x50>
    1414:	47 c0       	rjmp	.+142    	; 0x14a4 <KeyPad_U8Num+0xde>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	0c f0       	brlt	.+2      	; 0x1422 <KeyPad_U8Num+0x5c>
    1420:	44 c0       	rjmp	.+136    	; 0x14aa <KeyPad_U8Num+0xe4>
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	09 f4       	brne	.+2      	; 0x142c <KeyPad_U8Num+0x66>
    142a:	39 c0       	rjmp	.+114    	; 0x149e <KeyPad_U8Num+0xd8>
    142c:	67 c0       	rjmp	.+206    	; 0x14fc <KeyPad_U8Num+0x136>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	25 30       	cpi	r18, 0x05	; 5
    1434:	31 05       	cpc	r19, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <KeyPad_U8Num+0x74>
    1438:	41 c0       	rjmp	.+130    	; 0x14bc <KeyPad_U8Num+0xf6>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	86 30       	cpi	r24, 0x06	; 6
    1440:	91 05       	cpc	r25, r1
    1442:	0c f0       	brlt	.+2      	; 0x1446 <KeyPad_U8Num+0x80>
    1444:	3e c0       	rjmp	.+124    	; 0x14c2 <KeyPad_U8Num+0xfc>
    1446:	37 c0       	rjmp	.+110    	; 0x14b6 <KeyPad_U8Num+0xf0>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	2b 30       	cpi	r18, 0x0B	; 11
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <KeyPad_U8Num+0x8e>
    1452:	46 c0       	rjmp	.+140    	; 0x14e0 <KeyPad_U8Num+0x11a>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	8c 30       	cpi	r24, 0x0C	; 12
    145a:	91 05       	cpc	r25, r1
    145c:	5c f4       	brge	.+22     	; 0x1474 <KeyPad_U8Num+0xae>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	29 30       	cpi	r18, 0x09	; 9
    1464:	31 05       	cpc	r19, r1
    1466:	b1 f1       	breq	.+108    	; 0x14d4 <KeyPad_U8Num+0x10e>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	8a 30       	cpi	r24, 0x0A	; 10
    146e:	91 05       	cpc	r25, r1
    1470:	a4 f5       	brge	.+104    	; 0x14da <KeyPad_U8Num+0x114>
    1472:	2d c0       	rjmp	.+90     	; 0x14ce <KeyPad_U8Num+0x108>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	2d 30       	cpi	r18, 0x0D	; 13
    147a:	31 05       	cpc	r19, r1
    147c:	b9 f1       	breq	.+110    	; 0x14ec <KeyPad_U8Num+0x126>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	8d 30       	cpi	r24, 0x0D	; 13
    1484:	91 05       	cpc	r25, r1
    1486:	7c f1       	brlt	.+94     	; 0x14e6 <KeyPad_U8Num+0x120>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	2e 30       	cpi	r18, 0x0E	; 14
    148e:	31 05       	cpc	r19, r1
    1490:	79 f1       	breq	.+94     	; 0x14f0 <KeyPad_U8Num+0x12a>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	8f 30       	cpi	r24, 0x0F	; 15
    1498:	91 05       	cpc	r25, r1
    149a:	69 f1       	breq	.+90     	; 0x14f6 <KeyPad_U8Num+0x130>
    149c:	2f c0       	rjmp	.+94     	; 0x14fc <KeyPad_U8Num+0x136>
	case 0 : return 1 ;
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	2e c0       	rjmp	.+92     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 1 : return 2 ;
    14a4:	22 e0       	ldi	r18, 0x02	; 2
    14a6:	2a 83       	std	Y+2, r18	; 0x02
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 2 : return 3 ;
    14aa:	33 e0       	ldi	r19, 0x03	; 3
    14ac:	3a 83       	std	Y+2, r19	; 0x02
    14ae:	28 c0       	rjmp	.+80     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 3 : return '/' ;
    14b0:	8f e2       	ldi	r24, 0x2F	; 47
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	25 c0       	rjmp	.+74     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 4 : return 4 ;
    14b6:	94 e0       	ldi	r25, 0x04	; 4
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	22 c0       	rjmp	.+68     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 5 : return 5 ;
    14bc:	25 e0       	ldi	r18, 0x05	; 5
    14be:	2a 83       	std	Y+2, r18	; 0x02
    14c0:	1f c0       	rjmp	.+62     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 6 : return 6 ;
    14c2:	36 e0       	ldi	r19, 0x06	; 6
    14c4:	3a 83       	std	Y+2, r19	; 0x02
    14c6:	1c c0       	rjmp	.+56     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 7 : return '*' ;
    14c8:	8a e2       	ldi	r24, 0x2A	; 42
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	19 c0       	rjmp	.+50     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 8 : return 7 ;
    14ce:	97 e0       	ldi	r25, 0x07	; 7
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 9 : return 8 ;
    14d4:	28 e0       	ldi	r18, 0x08	; 8
    14d6:	2a 83       	std	Y+2, r18	; 0x02
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 10 : return 9 ;
    14da:	39 e0       	ldi	r19, 0x09	; 9
    14dc:	3a 83       	std	Y+2, r19	; 0x02
    14de:	10 c0       	rjmp	.+32     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 11 : return '-' ;
    14e0:	8d e2       	ldi	r24, 0x2D	; 45
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 12 : return 50 ;
    14e6:	92 e3       	ldi	r25, 0x32	; 50
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 13 : return 0 ;
    14ec:	1a 82       	std	Y+2, r1	; 0x02
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 14 : return '=' ;
    14f0:	2d e3       	ldi	r18, 0x3D	; 61
    14f2:	2a 83       	std	Y+2, r18	; 0x02
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <KeyPad_U8Num+0x13a>
	case 15 : return '+' ;
    14f6:	3b e2       	ldi	r19, 0x2B	; 43
    14f8:	3a 83       	std	Y+2, r19	; 0x02
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <KeyPad_U8Num+0x13a>
	default : return Copy_num ;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <KeyPad_U8GetNUM>:


u8 KeyPad_U8GetNUM (void){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	62 97       	sbiw	r28, 0x12	; 18
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	u8 local_key = 50 ;
    1524:	82 e3       	ldi	r24, 0x32	; 50
    1526:	8a 8b       	std	Y+18, r24	; 0x12
	for (u8 C=0 ; C<KEYPAD_NUM_COL ; C++){
    1528:	19 8a       	std	Y+17, r1	; 0x11
    152a:	bd c0       	rjmp	.+378    	; 0x16a6 <KeyPad_U8GetNUM+0x196>
		DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , LOW ) ;
    152c:	89 89       	ldd	r24, Y+17	; 0x11
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9c 01       	movw	r18, r24
    1534:	2c 5f       	subi	r18, 0xFC	; 252
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
		for (u8 R=0 ; R<KEYPAD_NUM_ROW ; R++){
    1546:	18 8a       	std	Y+16, r1	; 0x10
    1548:	9a c0       	rjmp	.+308    	; 0x167e <KeyPad_U8GetNUM+0x16e>
			u8 pressed = DIO_U8GetPinValue(KEYPAD_PORT,R);
    154a:	88 89       	ldd	r24, Y+16	; 0x10
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b9 01       	movw	r22, r18
    1556:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_U8GetPinValue>
    155a:	8f 87       	std	Y+15, r24	; 0x0f
			if (LOW == pressed )
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	88 23       	and	r24, r24
    1560:	09 f0       	breq	.+2      	; 0x1564 <KeyPad_U8GetNUM+0x54>
    1562:	8a c0       	rjmp	.+276    	; 0x1678 <KeyPad_U8GetNUM+0x168>
			{
				local_key = (KEYPAD_NUM_ROW*R)+C ;
    1564:	88 89       	ldd	r24, Y+16	; 0x10
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	98 2f       	mov	r25, r24
    1574:	89 89       	ldd	r24, Y+17	; 0x11
    1576:	89 0f       	add	r24, r25
    1578:	8a 8b       	std	Y+18, r24	; 0x12
    157a:	09 c0       	rjmp	.+18     	; 0x158e <KeyPad_U8GetNUM+0x7e>
				while(LOW == pressed)
				{
				    pressed = DIO_U8GetPinValue(KEYPAD_PORT,R) ;
    157c:	88 89       	ldd	r24, Y+16	; 0x10
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	b9 01       	movw	r22, r18
    1588:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_U8GetPinValue>
    158c:	8f 87       	std	Y+15, r24	; 0x0f
		for (u8 R=0 ; R<KEYPAD_NUM_ROW ; R++){
			u8 pressed = DIO_U8GetPinValue(KEYPAD_PORT,R);
			if (LOW == pressed )
			{
				local_key = (KEYPAD_NUM_ROW*R)+C ;
				while(LOW == pressed)
    158e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1590:	88 23       	and	r24, r24
    1592:	a1 f3       	breq	.-24     	; 0x157c <KeyPad_U8GetNUM+0x6c>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 ea       	ldi	r26, 0xA0	; 160
    159a:	b0 e4       	ldi	r27, 0x40	; 64
    159c:	8b 87       	std	Y+11, r24	; 0x0b
    159e:	9c 87       	std	Y+12, r25	; 0x0c
    15a0:	ad 87       	std	Y+13, r26	; 0x0d
    15a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a ef       	ldi	r20, 0xFA	; 250
    15b2:	54 e4       	ldi	r21, 0x44	; 68
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8f 83       	std	Y+7, r24	; 0x07
    15be:	98 87       	std	Y+8, r25	; 0x08
    15c0:	a9 87       	std	Y+9, r26	; 0x09
    15c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <KeyPad_U8GetNUM+0xd6>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <KeyPad_U8GetNUM+0x154>
	else if (__tmp > 65535)
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <KeyPad_U8GetNUM+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e2       	ldi	r20, 0x20	; 32
    160c:	51 e4       	ldi	r21, 0x41	; 65
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <KeyPad_U8GetNUM+0x136>
    1628:	88 ec       	ldi	r24, 0xC8	; 200
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <KeyPad_U8GetNUM+0x124>
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f7       	brne	.-38     	; 0x1628 <KeyPad_U8GetNUM+0x118>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <KeyPad_U8GetNUM+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <KeyPad_U8GetNUM+0x160>
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01

u8 KeyPad_U8GetNUM (void){
	u8 local_key = 50 ;
	for (u8 C=0 ; C<KEYPAD_NUM_COL ; C++){
		DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , LOW ) ;
		for (u8 R=0 ; R<KEYPAD_NUM_ROW ; R++){
    1678:	88 89       	ldd	r24, Y+16	; 0x10
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	88 8b       	std	Y+16, r24	; 0x10
    167e:	88 89       	ldd	r24, Y+16	; 0x10
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	08 f4       	brcc	.+2      	; 0x1686 <KeyPad_U8GetNUM+0x176>
    1684:	62 cf       	rjmp	.-316    	; 0x154a <KeyPad_U8GetNUM+0x3a>
				    pressed = DIO_U8GetPinValue(KEYPAD_PORT,R) ;
				}//end while loop
				_delay_ms(5);
			}//end if loop
		}//end 1st for loop
	DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , HIGH );
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 01       	movw	r18, r24
    168e:	2c 5f       	subi	r18, 0xFC	; 252
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	b9 01       	movw	r22, r18
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
}


u8 KeyPad_U8GetNUM (void){
	u8 local_key = 50 ;
	for (u8 C=0 ; C<KEYPAD_NUM_COL ; C++){
    16a0:	89 89       	ldd	r24, Y+17	; 0x11
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	89 8b       	std	Y+17, r24	; 0x11
    16a6:	89 89       	ldd	r24, Y+17	; 0x11
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	08 f4       	brcc	.+2      	; 0x16ae <KeyPad_U8GetNUM+0x19e>
    16ac:	3f cf       	rjmp	.-386    	; 0x152c <KeyPad_U8GetNUM+0x1c>
				_delay_ms(5);
			}//end if loop
		}//end 1st for loop
	DIO_VidSetPinValue( KEYPAD_PORT , C+KEYPAD_NUM_COL , HIGH );
	}//end 2nd for loop
     local_key = KeyPad_U8Num( local_key ) ;
    16ae:	8a 89       	ldd	r24, Y+18	; 0x12
    16b0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <KeyPad_U8Num>
    16b4:	8a 8b       	std	Y+18, r24	; 0x12
	return local_key ;
    16b6:	8a 89       	ldd	r24, Y+18	; 0x12
}//end FUNC KeyPad_U8GetNUM
    16b8:	62 96       	adiw	r28, 0x12	; 18
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <LCD_VidSendCommend>:
#include"LCD_cfg.h"
#include"LCD_private.h" 
#include<avr/delay.h>


void LCD_VidSendCommend(u8 Copy_U8Commend){
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	6d 97       	sbiw	r28, 0x1d	; 29
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	DIO_VidSetPinValue(CONTROL_PORT,RS,LOW);
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
/******to out the value of commend on data port *****/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Commend);
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16ee:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_VidSetPortValue>
/*************to make pulse for enable **************/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	89 8f       	std	Y+25, r24	; 0x19
    1706:	9a 8f       	std	Y+26, r25	; 0x1a
    1708:	ab 8f       	std	Y+27, r26	; 0x1b
    170a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	69 8d       	ldd	r22, Y+25	; 0x19
    170e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a ef       	ldi	r20, 0xFA	; 250
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8d 8b       	std	Y+21, r24	; 0x15
    1726:	9e 8b       	std	Y+22, r25	; 0x16
    1728:	af 8b       	std	Y+23, r26	; 0x17
    172a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    172c:	6d 89       	ldd	r22, Y+21	; 0x15
    172e:	7e 89       	ldd	r23, Y+22	; 0x16
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	98 8d       	ldd	r25, Y+24	; 0x18
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <LCD_VidSendCommend+0x84>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <LCD_VidSendCommend+0x102>
	else if (__tmp > 65535)
    174e:	6d 89       	ldd	r22, Y+21	; 0x15
    1750:	7e 89       	ldd	r23, Y+22	; 0x16
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <LCD_VidSendCommend+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	69 8d       	ldd	r22, Y+25	; 0x19
    1768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    176c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9c 8b       	std	Y+20, r25	; 0x14
    178c:	8b 8b       	std	Y+19, r24	; 0x13
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_VidSendCommend+0xe4>
    1790:	88 ec       	ldi	r24, 0xC8	; 200
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	9a 89       	ldd	r25, Y+18	; 0x12
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_VidSendCommend+0xd2>
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <LCD_VidSendCommend+0xc6>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <LCD_VidSendCommend+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ba:	7e 89       	ldd	r23, Y+22	; 0x16
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9c 8b       	std	Y+20, r25	; 0x14
    17ca:	8b 8b       	std	Y+19, r24	; 0x13
    17cc:	8b 89       	ldd	r24, Y+19	; 0x13
    17ce:	9c 89       	ldd	r25, Y+20	; 0x14
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
    17d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d6:	98 89       	ldd	r25, Y+16	; 0x10
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_VidSendCommend+0x10e>
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e4       	ldi	r27, 0x40	; 64
    17f2:	8b 87       	std	Y+11, r24	; 0x0b
    17f4:	9c 87       	std	Y+12, r25	; 0x0c
    17f6:	ad 87       	std	Y+13, r26	; 0x0d
    17f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a ef       	ldi	r20, 0xFA	; 250
    1808:	54 e4       	ldi	r21, 0x44	; 68
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8f 83       	std	Y+7, r24	; 0x07
    1814:	98 87       	std	Y+8, r25	; 0x08
    1816:	a9 87       	std	Y+9, r26	; 0x09
    1818:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <LCD_VidSendCommend+0x172>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <LCD_VidSendCommend+0x1f0>
	else if (__tmp > 65535)
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <LCD_VidSendCommend+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6b 85       	ldd	r22, Y+11	; 0x0b
    1856:	7c 85       	ldd	r23, Y+12	; 0x0c
    1858:	8d 85       	ldd	r24, Y+13	; 0x0d
    185a:	9e 85       	ldd	r25, Y+14	; 0x0e
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	0f c0       	rjmp	.+30     	; 0x189c <LCD_VidSendCommend+0x1d2>
    187e:	88 ec       	ldi	r24, 0xC8	; 200
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_VidSendCommend+0x1c0>
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <LCD_VidSendCommend+0x1b4>
    18a4:	14 c0       	rjmp	.+40     	; 0x18ce <LCD_VidSendCommend+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6f 81       	ldd	r22, Y+7	; 0x07
    18a8:	78 85       	ldd	r23, Y+8	; 0x08
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_VidSendCommend+0x1fc>
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
	_delay_ms(2);

#endif
}
    18ce:	6d 96       	adiw	r28, 0x1d	; 29
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <LCD_VidInit>:



void LCD_VidInit (void) {
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	c4 56       	subi	r28, 0x64	; 100
    18ee:	d0 40       	sbci	r29, 0x00	; 0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61

#ifdef EIGHT_BIT

/****to define CONTROL PORT as OUTPUT PINS******/
	DIO_VidSetPinDirection(CONTROL_PORT,RS,HIGH);
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,E,HIGH);
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
/****to define DATA PORT as OUTPUT PINS********/
	DIO_VidSetPortDirection(DATA_PORT,0xff);
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	6f ef       	ldi	r22, 0xFF	; 255
    1912:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPortDirection>
    1916:	fe 01       	movw	r30, r28
    1918:	ef 59       	subi	r30, 0x9F	; 159
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e2       	ldi	r26, 0x20	; 32
    1922:	b2 e4       	ldi	r27, 0x42	; 66
    1924:	80 83       	st	Z, r24
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	a2 83       	std	Z+2, r26	; 0x02
    192a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192c:	8e 01       	movw	r16, r28
    192e:	03 5a       	subi	r16, 0xA3	; 163
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	ef 59       	subi	r30, 0x9F	; 159
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a ef       	ldi	r20, 0xFA	; 250
    1946:	54 e4       	ldi	r21, 0x44	; 68
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	80 83       	st	Z, r24
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	a2 83       	std	Z+2, r26	; 0x02
    1958:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    195a:	fe 01       	movw	r30, r28
    195c:	e3 5a       	subi	r30, 0xA3	; 163
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	44 f4       	brge	.+16     	; 0x1988 <LCD_VidInit+0xa8>
		__ticks = 1;
    1978:	fe 01       	movw	r30, r28
    197a:	e5 5a       	subi	r30, 0xA5	; 165
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
    1986:	64 c0       	rjmp	.+200    	; 0x1a50 <LCD_VidInit+0x170>
	else if (__tmp > 65535)
    1988:	fe 01       	movw	r30, r28
    198a:	e3 5a       	subi	r30, 0xA3	; 163
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <LCD_VidInit+0xc8>
    19a6:	43 c0       	rjmp	.+134    	; 0x1a2e <LCD_VidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	fe 01       	movw	r30, r28
    19aa:	ef 59       	subi	r30, 0x9F	; 159
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	51 e4       	ldi	r21, 0x41	; 65
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8e 01       	movw	r16, r28
    19c8:	05 5a       	subi	r16, 0xA5	; 165
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	f8 01       	movw	r30, r16
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	1f c0       	rjmp	.+62     	; 0x1a1e <LCD_VidInit+0x13e>
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 5a       	subi	r30, 0xA7	; 167
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	88 ec       	ldi	r24, 0xC8	; 200
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 5a       	subi	r30, 0xA7	; 167
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_VidInit+0x118>
    19fc:	fe 01       	movw	r30, r28
    19fe:	e7 5a       	subi	r30, 0xA7	; 167
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	de 01       	movw	r26, r28
    1a08:	a5 5a       	subi	r26, 0xA5	; 165
    1a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 5a       	subi	r30, 0xA5	; 165
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	11 96       	adiw	r26, 0x01	; 1
    1a1a:	9c 93       	st	X, r25
    1a1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e5 5a       	subi	r30, 0xA5	; 165
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	d1 f6       	brne	.-76     	; 0x19e0 <LCD_VidInit+0x100>
    1a2c:	27 c0       	rjmp	.+78     	; 0x1a7c <LCD_VidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	8e 01       	movw	r16, r28
    1a30:	05 5a       	subi	r16, 0xA5	; 165
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	e3 5a       	subi	r30, 0xA3	; 163
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
    1a50:	de 01       	movw	r26, r28
    1a52:	a9 5a       	subi	r26, 0xA9	; 169
    1a54:	bf 4f       	sbci	r27, 0xFF	; 255
    1a56:	fe 01       	movw	r30, r28
    1a58:	e5 5a       	subi	r30, 0xA5	; 165
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	8d 93       	st	X+, r24
    1a62:	9c 93       	st	X, r25
    1a64:	fe 01       	movw	r30, r28
    1a66:	e9 5a       	subi	r30, 0xA9	; 169
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_VidInit+0x18e>
    1a72:	fe 01       	movw	r30, r28
    1a74:	e9 5a       	subi	r30, 0xA9	; 169
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
/******to initialize LCD after power***********/
	_delay_ms(40);
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
    1a7c:	8c e3       	ldi	r24, 0x3C	; 60
    1a7e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 5a       	subi	r30, 0xAD	; 173
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e2       	ldi	r26, 0x20	; 32
    1a8e:	b2 e4       	ldi	r27, 0x42	; 66
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	01 5b       	subi	r16, 0xB1	; 177
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ed 5a       	subi	r30, 0xAD	; 173
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	2b ea       	ldi	r18, 0xAB	; 171
    1aae:	3a ea       	ldi	r19, 0xAA	; 170
    1ab0:	4a e2       	ldi	r20, 0x2A	; 42
    1ab2:	50 e4       	ldi	r21, 0x40	; 64
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	80 83       	st	Z, r24
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	a2 83       	std	Z+2, r26	; 0x02
    1ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e1 5b       	subi	r30, 0xB1	; 177
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	34 f4       	brge	.+12     	; 0x1af0 <LCD_VidInit+0x210>
		__ticks = 1;
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e2 5b       	subi	r30, 0xB2	; 178
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 83       	st	Z, r24
    1aee:	e0 c0       	rjmp	.+448    	; 0x1cb0 <LCD_VidInit+0x3d0>
	else if (__tmp > 255)
    1af0:	fe 01       	movw	r30, r28
    1af2:	e1 5b       	subi	r30, 0xB1	; 177
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	53 e4       	ldi	r21, 0x43	; 67
    1b06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <LCD_VidInit+0x230>
    1b0e:	c0 c0       	rjmp	.+384    	; 0x1c90 <LCD_VidInit+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    1b10:	fe 01       	movw	r30, r28
    1b12:	ed 5a       	subi	r30, 0xAD	; 173
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a e7       	ldi	r20, 0x7A	; 122
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e6 5b       	subi	r30, 0xB6	; 182
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 83       	st	Z, r24
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	a2 83       	std	Z+2, r26	; 0x02
    1b3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	8e 01       	movw	r16, r28
    1b3e:	0a 5b       	subi	r16, 0xBA	; 186
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	fe 01       	movw	r30, r28
    1b44:	e6 5b       	subi	r30, 0xB6	; 182
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a ef       	ldi	r20, 0xFA	; 250
    1b56:	54 e4       	ldi	r21, 0x44	; 68
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	f8 01       	movw	r30, r16
    1b62:	80 83       	st	Z, r24
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	a2 83       	std	Z+2, r26	; 0x02
    1b68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ea 5b       	subi	r30, 0xBA	; 186
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	44 f4       	brge	.+16     	; 0x1b98 <LCD_VidInit+0x2b8>
		__ticks = 1;
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ec 5b       	subi	r30, 0xBC	; 188
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
    1b96:	64 c0       	rjmp	.+200    	; 0x1c60 <LCD_VidInit+0x380>
	else if (__tmp > 65535)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ea 5b       	subi	r30, 0xBA	; 186
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	0c f0       	brlt	.+2      	; 0x1bb8 <LCD_VidInit+0x2d8>
    1bb6:	43 c0       	rjmp	.+134    	; 0x1c3e <LCD_VidInit+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e6 5b       	subi	r30, 0xB6	; 182
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	0c 5b       	subi	r16, 0xBC	; 188
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	1f c0       	rjmp	.+62     	; 0x1c2e <LCD_VidInit+0x34e>
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ee 5b       	subi	r30, 0xBE	; 190
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	88 ec       	ldi	r24, 0xC8	; 200
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ee 5b       	subi	r30, 0xBE	; 190
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_VidInit+0x328>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ee 5b       	subi	r30, 0xBE	; 190
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	de 01       	movw	r26, r28
    1c18:	ac 5b       	subi	r26, 0xBC	; 188
    1c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	ec 5b       	subi	r30, 0xBC	; 188
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	9c 93       	st	X, r25
    1c2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ec 5b       	subi	r30, 0xBC	; 188
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	d1 f6       	brne	.-76     	; 0x1bf0 <LCD_VidInit+0x310>
    1c3c:	42 c0       	rjmp	.+132    	; 0x1cc2 <LCD_VidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	8e 01       	movw	r16, r28
    1c40:	0c 5b       	subi	r16, 0xBC	; 188
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	ea 5b       	subi	r30, 0xBA	; 186
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	80 83       	st	Z, r24
    1c60:	de 01       	movw	r26, r28
    1c62:	a0 5c       	subi	r26, 0xC0	; 192
    1c64:	bf 4f       	sbci	r27, 0xFF	; 255
    1c66:	fe 01       	movw	r30, r28
    1c68:	ec 5b       	subi	r30, 0xBC	; 188
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	fe 01       	movw	r30, r28
    1c78:	e0 5c       	subi	r30, 0xC0	; 192
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_VidInit+0x3a0>
    1c84:	fe 01       	movw	r30, r28
    1c86:	e0 5c       	subi	r30, 0xC0	; 192
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	19 c0       	rjmp	.+50     	; 0x1cc2 <LCD_VidInit+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c90:	8e 01       	movw	r16, r28
    1c92:	02 5b       	subi	r16, 0xB2	; 178
    1c94:	1f 4f       	sbci	r17, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	e1 5b       	subi	r30, 0xB1	; 177
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 83       	st	Z, r24
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e2 5b       	subi	r30, 0xB2	; 178
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cba:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cbc:	8a 95       	dec	r24
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_VidInit+0x3dc>
    1cc0:	8f af       	std	Y+63, r24	; 0x3f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
    1cc2:	8c e0       	ldi	r24, 0x0C	; 12
    1cc4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a0 e2       	ldi	r26, 0x20	; 32
    1cce:	b2 e4       	ldi	r27, 0x42	; 66
    1cd0:	8b af       	std	Y+59, r24	; 0x3b
    1cd2:	9c af       	std	Y+60, r25	; 0x3c
    1cd4:	ad af       	std	Y+61, r26	; 0x3d
    1cd6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cda:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce0:	2b ea       	ldi	r18, 0xAB	; 171
    1ce2:	3a ea       	ldi	r19, 0xAA	; 170
    1ce4:	4a e2       	ldi	r20, 0x2A	; 42
    1ce6:	50 e4       	ldi	r21, 0x40	; 64
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8f ab       	std	Y+55, r24	; 0x37
    1cf2:	98 af       	std	Y+56, r25	; 0x38
    1cf4:	a9 af       	std	Y+57, r26	; 0x39
    1cf6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1cf8:	6f a9       	ldd	r22, Y+55	; 0x37
    1cfa:	78 ad       	ldd	r23, Y+56	; 0x38
    1cfc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	1c f4       	brge	.+6      	; 0x1d16 <LCD_VidInit+0x436>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	8e ab       	std	Y+54, r24	; 0x36
    1d14:	91 c0       	rjmp	.+290    	; 0x1e38 <LCD_VidInit+0x558>
	else if (__tmp > 255)
    1d16:	6f a9       	ldd	r22, Y+55	; 0x37
    1d18:	78 ad       	ldd	r23, Y+56	; 0x38
    1d1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	53 e4       	ldi	r21, 0x43	; 67
    1d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	0c f0       	brlt	.+2      	; 0x1d30 <LCD_VidInit+0x450>
    1d2e:	7b c0       	rjmp	.+246    	; 0x1e26 <LCD_VidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1d30:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d32:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8a ab       	std	Y+50, r24	; 0x32
    1d4a:	9b ab       	std	Y+51, r25	; 0x33
    1d4c:	ac ab       	std	Y+52, r26	; 0x34
    1d4e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	6a a9       	ldd	r22, Y+50	; 0x32
    1d52:	7b a9       	ldd	r23, Y+51	; 0x33
    1d54:	8c a9       	ldd	r24, Y+52	; 0x34
    1d56:	9d a9       	ldd	r25, Y+53	; 0x35
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8e a7       	std	Y+46, r24	; 0x2e
    1d6a:	9f a7       	std	Y+47, r25	; 0x2f
    1d6c:	a8 ab       	std	Y+48, r26	; 0x30
    1d6e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d70:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d72:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d74:	88 a9       	ldd	r24, Y+48	; 0x30
    1d76:	99 a9       	ldd	r25, Y+49	; 0x31
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <LCD_VidInit+0x4b2>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9d a7       	std	Y+45, r25	; 0x2d
    1d8e:	8c a7       	std	Y+44, r24	; 0x2c
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <LCD_VidInit+0x530>
	else if (__tmp > 65535)
    1d92:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d94:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d96:	88 a9       	ldd	r24, Y+48	; 0x30
    1d98:	99 a9       	ldd	r25, Y+49	; 0x31
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <LCD_VidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6a a9       	ldd	r22, Y+50	; 0x32
    1dac:	7b a9       	ldd	r23, Y+51	; 0x33
    1dae:	8c a9       	ldd	r24, Y+52	; 0x34
    1db0:	9d a9       	ldd	r25, Y+53	; 0x35
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9d a7       	std	Y+45, r25	; 0x2d
    1dd0:	8c a7       	std	Y+44, r24	; 0x2c
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <LCD_VidInit+0x512>
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9b a7       	std	Y+43, r25	; 0x2b
    1dda:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ddc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1dde:	9b a5       	ldd	r25, Y+43	; 0x2b
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_VidInit+0x500>
    1de4:	9b a7       	std	Y+43, r25	; 0x2b
    1de6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dea:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9d a7       	std	Y+45, r25	; 0x2d
    1df0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1df4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <LCD_VidInit+0x4f4>
    1dfa:	24 c0       	rjmp	.+72     	; 0x1e44 <LCD_VidInit+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dfe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e00:	88 a9       	ldd	r24, Y+48	; 0x30
    1e02:	99 a9       	ldd	r25, Y+49	; 0x31
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9d a7       	std	Y+45, r25	; 0x2d
    1e0e:	8c a7       	std	Y+44, r24	; 0x2c
    1e10:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e12:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e14:	99 a7       	std	Y+41, r25	; 0x29
    1e16:	88 a7       	std	Y+40, r24	; 0x28
    1e18:	88 a5       	ldd	r24, Y+40	; 0x28
    1e1a:	99 a5       	ldd	r25, Y+41	; 0x29
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_VidInit+0x53c>
    1e20:	99 a7       	std	Y+41, r25	; 0x29
    1e22:	88 a7       	std	Y+40, r24	; 0x28
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <LCD_VidInit+0x564>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e26:	6f a9       	ldd	r22, Y+55	; 0x37
    1e28:	78 ad       	ldd	r23, Y+56	; 0x38
    1e2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8e ab       	std	Y+54, r24	; 0x36
    1e38:	8e a9       	ldd	r24, Y+54	; 0x36
    1e3a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e3c:	8f a1       	ldd	r24, Y+39	; 0x27
    1e3e:	8a 95       	dec	r24
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_VidInit+0x55e>
    1e42:	8f a3       	std	Y+39, r24	; 0x27
	// Delay for more than 39 us
	_delay_us(40);
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE);
    1e44:	86 e0       	ldi	r24, 0x06	; 6
    1e46:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e2       	ldi	r26, 0x20	; 32
    1e50:	b2 e4       	ldi	r27, 0x42	; 66
    1e52:	8b a3       	std	Y+35, r24	; 0x23
    1e54:	9c a3       	std	Y+36, r25	; 0x24
    1e56:	ad a3       	std	Y+37, r26	; 0x25
    1e58:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e60:	9e a1       	ldd	r25, Y+38	; 0x26
    1e62:	2b ea       	ldi	r18, 0xAB	; 171
    1e64:	3a ea       	ldi	r19, 0xAA	; 170
    1e66:	4a e2       	ldi	r20, 0x2A	; 42
    1e68:	50 e4       	ldi	r21, 0x40	; 64
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8f 8f       	std	Y+31, r24	; 0x1f
    1e74:	98 a3       	std	Y+32, r25	; 0x20
    1e76:	a9 a3       	std	Y+33, r26	; 0x21
    1e78:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e7a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e7c:	78 a1       	ldd	r23, Y+32	; 0x20
    1e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e80:	9a a1       	ldd	r25, Y+34	; 0x22
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	1c f4       	brge	.+6      	; 0x1e98 <LCD_VidInit+0x5b8>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	8e 8f       	std	Y+30, r24	; 0x1e
    1e96:	91 c0       	rjmp	.+290    	; 0x1fba <LCD_VidInit+0x6da>
	else if (__tmp > 255)
    1e98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e9a:	78 a1       	ldd	r23, Y+32	; 0x20
    1e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	53 e4       	ldi	r21, 0x43	; 67
    1ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <LCD_VidInit+0x5d2>
    1eb0:	7b c0       	rjmp	.+246    	; 0x1fa8 <LCD_VidInit+0x6c8>
	{
		_delay_ms(__us / 1000.0);
    1eb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a e7       	ldi	r20, 0x7A	; 122
    1ec0:	54 e4       	ldi	r21, 0x44	; 68
    1ec2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8a 8f       	std	Y+26, r24	; 0x1a
    1ecc:	9b 8f       	std	Y+27, r25	; 0x1b
    1ece:	ac 8f       	std	Y+28, r26	; 0x1c
    1ed0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ed4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ed6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ed8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a ef       	ldi	r20, 0xFA	; 250
    1ee0:	54 e4       	ldi	r21, 0x44	; 68
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8e 8b       	std	Y+22, r24	; 0x16
    1eec:	9f 8b       	std	Y+23, r25	; 0x17
    1eee:	a8 8f       	std	Y+24, r26	; 0x18
    1ef0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ef2:	6e 89       	ldd	r22, Y+22	; 0x16
    1ef4:	7f 89       	ldd	r23, Y+23	; 0x17
    1ef6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ef8:	99 8d       	ldd	r25, Y+25	; 0x19
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <LCD_VidInit+0x634>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9d 8b       	std	Y+21, r25	; 0x15
    1f10:	8c 8b       	std	Y+20, r24	; 0x14
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <LCD_VidInit+0x6b2>
	else if (__tmp > 65535)
    1f14:	6e 89       	ldd	r22, Y+22	; 0x16
    1f16:	7f 89       	ldd	r23, Y+23	; 0x17
    1f18:	88 8d       	ldd	r24, Y+24	; 0x18
    1f1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <LCD_VidInit+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f2e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9d 8b       	std	Y+21, r25	; 0x15
    1f52:	8c 8b       	std	Y+20, r24	; 0x14
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <LCD_VidInit+0x694>
    1f56:	88 ec       	ldi	r24, 0xC8	; 200
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9b 8b       	std	Y+19, r25	; 0x13
    1f5c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f60:	9b 89       	ldd	r25, Y+19	; 0x13
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_VidInit+0x682>
    1f66:	9b 8b       	std	Y+19, r25	; 0x13
    1f68:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f6c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9d 8b       	std	Y+21, r25	; 0x15
    1f72:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8c 89       	ldd	r24, Y+20	; 0x14
    1f76:	9d 89       	ldd	r25, Y+21	; 0x15
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <LCD_VidInit+0x676>
    1f7c:	24 c0       	rjmp	.+72     	; 0x1fc6 <LCD_VidInit+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	6e 89       	ldd	r22, Y+22	; 0x16
    1f80:	7f 89       	ldd	r23, Y+23	; 0x17
    1f82:	88 8d       	ldd	r24, Y+24	; 0x18
    1f84:	99 8d       	ldd	r25, Y+25	; 0x19
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9d 8b       	std	Y+21, r25	; 0x15
    1f90:	8c 8b       	std	Y+20, r24	; 0x14
    1f92:	8c 89       	ldd	r24, Y+20	; 0x14
    1f94:	9d 89       	ldd	r25, Y+21	; 0x15
    1f96:	99 8b       	std	Y+17, r25	; 0x11
    1f98:	88 8b       	std	Y+16, r24	; 0x10
    1f9a:	88 89       	ldd	r24, Y+16	; 0x10
    1f9c:	99 89       	ldd	r25, Y+17	; 0x11
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_VidInit+0x6be>
    1fa2:	99 8b       	std	Y+17, r25	; 0x11
    1fa4:	88 8b       	std	Y+16, r24	; 0x10
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_VidInit+0x6e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fa8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1faa:	78 a1       	ldd	r23, Y+32	; 0x20
    1fac:	89 a1       	ldd	r24, Y+33	; 0x21
    1fae:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	8a 95       	dec	r24
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_VidInit+0x6e0>
    1fc4:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e4       	ldi	r27, 0x40	; 64
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_VidInit+0x73e>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_VidInit+0x7bc>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_VidInit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_VidInit+0x79e>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_VidInit+0x78c>
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_VidInit+0x780>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <LCD_VidInit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_VidInit+0x7c8>
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
	// Delay for more than 1.53 ms
	_delay_ms(2);
#endif
}
    20b0:	cc 59       	subi	r28, 0x9C	; 156
    20b2:	df 4f       	sbci	r29, 0xFF	; 255
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	08 95       	ret

000020c8 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_U8Char){
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	6d 97       	sbiw	r28, 0x1d	; 29
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT
	/******* to define RS / RW ***********/
	DIO_VidSetPinValue(CONTROL_PORT,RS,HIGH);
    20de:	83 e0       	ldi	r24, 0x03	; 3
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
	/*to define value of character on port*/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Char);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20ec:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_VidSetPortValue>
	/*********to make enable pulse*********/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a0 e8       	ldi	r26, 0x80	; 128
    2100:	bf e3       	ldi	r27, 0x3F	; 63
    2102:	89 8f       	std	Y+25, r24	; 0x19
    2104:	9a 8f       	std	Y+26, r25	; 0x1a
    2106:	ab 8f       	std	Y+27, r26	; 0x1b
    2108:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	69 8d       	ldd	r22, Y+25	; 0x19
    210c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a ef       	ldi	r20, 0xFA	; 250
    2118:	54 e4       	ldi	r21, 0x44	; 68
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	8d 8b       	std	Y+21, r24	; 0x15
    2124:	9e 8b       	std	Y+22, r25	; 0x16
    2126:	af 8b       	std	Y+23, r26	; 0x17
    2128:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    212a:	6d 89       	ldd	r22, Y+21	; 0x15
    212c:	7e 89       	ldd	r23, Y+22	; 0x16
    212e:	8f 89       	ldd	r24, Y+23	; 0x17
    2130:	98 8d       	ldd	r25, Y+24	; 0x18
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <LCD_VidSendChar+0x84>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	8b 8b       	std	Y+19, r24	; 0x13
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <LCD_VidSendChar+0x102>
	else if (__tmp > 65535)
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <LCD_VidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <LCD_VidSendChar+0xe4>
    218e:	88 ec       	ldi	r24, 0xC8	; 200
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9a 8b       	std	Y+18, r25	; 0x12
    2194:	89 8b       	std	Y+17, r24	; 0x11
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_VidSendChar+0xd2>
    219e:	9a 8b       	std	Y+18, r25	; 0x12
    21a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	8b 89       	ldd	r24, Y+19	; 0x13
    21a4:	9c 89       	ldd	r25, Y+20	; 0x14
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9c 8b       	std	Y+20, r25	; 0x14
    21aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	8b 89       	ldd	r24, Y+19	; 0x13
    21ae:	9c 89       	ldd	r25, Y+20	; 0x14
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <LCD_VidSendChar+0xc6>
    21b4:	14 c0       	rjmp	.+40     	; 0x21de <LCD_VidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	98 8b       	std	Y+16, r25	; 0x10
    21d0:	8f 87       	std	Y+15, r24	; 0x0f
    21d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d4:	98 89       	ldd	r25, Y+16	; 0x10
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_VidSendChar+0x10e>
    21da:	98 8b       	std	Y+16, r25	; 0x10
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e4       	ldi	r27, 0x40	; 64
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <LCD_VidSendChar+0x172>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <LCD_VidSendChar+0x1f0>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <LCD_VidSendChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <LCD_VidSendChar+0x1d2>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_VidSendChar+0x1c0>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <LCD_VidSendChar+0x1b4>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <LCD_VidSendChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_VidSendChar+0x1fc>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
		_delay_ms(2);

#endif

}
    22cc:	6d 96       	adiw	r28, 0x1d	; 29
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <LCD_VidSendString>:

void LCD_VidSendString(u8 Copy_U8String[] ){
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	61 97       	sbiw	r28, 0x11	; 17
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	99 8b       	std	Y+17, r25	; 0x11
    22f4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0;
    22f6:	1f 86       	std	Y+15, r1	; 0x0f
    22f8:	86 c0       	rjmp	.+268    	; 0x2406 <LCD_VidSendString+0x128>
	while( Copy_U8String[i] != '\0' ){
		if (15 == i){
    22fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fc:	8f 30       	cpi	r24, 0x0F	; 15
    22fe:	19 f4       	brne	.+6      	; 0x2306 <LCD_VidSendString+0x28>
			LCD_VidSendCommend(LINE_2_START);
    2300:	80 ec       	ldi	r24, 0xC0	; 192
    2302:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
		}
		LCD_VidSendChar(Copy_U8String[i]);
    2306:	8f 85       	ldd	r24, Y+15	; 0x0f
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	88 89       	ldd	r24, Y+16	; 0x10
    230e:	99 89       	ldd	r25, Y+17	; 0x11
    2310:	fc 01       	movw	r30, r24
    2312:	e2 0f       	add	r30, r18
    2314:	f3 1f       	adc	r31, r19
    2316:	80 81       	ld	r24, Z
    2318:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_VidSendChar>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a8 e4       	ldi	r26, 0x48	; 72
    2322:	b2 e4       	ldi	r27, 0x42	; 66
    2324:	8b 87       	std	Y+11, r24	; 0x0b
    2326:	9c 87       	std	Y+12, r25	; 0x0c
    2328:	ad 87       	std	Y+13, r26	; 0x0d
    232a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	6b 85       	ldd	r22, Y+11	; 0x0b
    232e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	4a ef       	ldi	r20, 0xFA	; 250
    233a:	54 e4       	ldi	r21, 0x44	; 68
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8f 83       	std	Y+7, r24	; 0x07
    2346:	98 87       	std	Y+8, r25	; 0x08
    2348:	a9 87       	std	Y+9, r26	; 0x09
    234a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <LCD_VidSendString+0x90>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <LCD_VidSendString+0x10e>
	else if (__tmp > 65535)
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	89 85       	ldd	r24, Y+9	; 0x09
    2374:	9a 85       	ldd	r25, Y+10	; 0x0a
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <LCD_VidSendString+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	6b 85       	ldd	r22, Y+11	; 0x0b
    2388:	7c 85       	ldd	r23, Y+12	; 0x0c
    238a:	8d 85       	ldd	r24, Y+13	; 0x0d
    238c:	9e 85       	ldd	r25, Y+14	; 0x0e
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <LCD_VidSendString+0xf0>
    23b0:	88 ec       	ldi	r24, 0xC8	; 200
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_VidSendString+0xde>
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	9e 81       	ldd	r25, Y+6	; 0x06
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <LCD_VidSendString+0xd2>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <LCD_VidSendString+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6f 81       	ldd	r22, Y+7	; 0x07
    23da:	78 85       	ldd	r23, Y+8	; 0x08
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_VidSendString+0x11a>
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		i++;
    2400:	8f 85       	ldd	r24, Y+15	; 0x0f
    2402:	8f 5f       	subi	r24, 0xFF	; 255
    2404:	8f 87       	std	Y+15, r24	; 0x0f

}

void LCD_VidSendString(u8 Copy_U8String[] ){
	u8 i=0;
	while( Copy_U8String[i] != '\0' ){
    2406:	8f 85       	ldd	r24, Y+15	; 0x0f
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	88 89       	ldd	r24, Y+16	; 0x10
    240e:	99 89       	ldd	r25, Y+17	; 0x11
    2410:	fc 01       	movw	r30, r24
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	80 81       	ld	r24, Z
    2418:	88 23       	and	r24, r24
    241a:	09 f0       	breq	.+2      	; 0x241e <LCD_VidSendString+0x140>
    241c:	6e cf       	rjmp	.-292    	; 0x22fa <LCD_VidSendString+0x1c>
		}
		LCD_VidSendChar(Copy_U8String[i]);
		_delay_ms(50);
		i++;
	}//end while
}//end FUNC LCD_VidSendString
    241e:	61 96       	adiw	r28, 0x11	; 17
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <LCD_U32Pow>:

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <LCD_U32Pow+0x6>
    2436:	00 d0       	rcall	.+0      	; 0x2438 <LCD_U32Pow+0x8>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	6c 83       	std	Y+4, r22	; 0x04
  u32 local_res = 1 ;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	12 c0       	rjmp	.+36     	; 0x246e <LCD_U32Pow+0x3e>
  while (Copy_U8Bow >0 ){
	  local_res *= Copy_U8Base ;
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	ac 01       	movw	r20, r24
    2456:	42 9f       	mul	r20, r18
    2458:	c0 01       	movw	r24, r0
    245a:	43 9f       	mul	r20, r19
    245c:	90 0d       	add	r25, r0
    245e:	52 9f       	mul	r21, r18
    2460:	90 0d       	add	r25, r0
    2462:	11 24       	eor	r1, r1
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
	  Copy_U8Bow--;
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	81 50       	subi	r24, 0x01	; 1
    246c:	8c 83       	std	Y+4, r24	; 0x04
	}//end while
}//end FUNC LCD_VidSendString

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
  u32 local_res = 1 ;
  while (Copy_U8Bow >0 ){
    246e:	8c 81       	ldd	r24, Y+4	; 0x04
    2470:	88 23       	and	r24, r24
    2472:	59 f7       	brne	.-42     	; 0x244a <LCD_U32Pow+0x1a>
	  local_res *= Copy_U8Base ;
	  Copy_U8Bow--;
  }
  return  local_res ;
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_VidPrintVar>:

void LCD_VidPrintVar(u32 Copy_U8Var){
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <LCD_VidPrintVar+0xa>
    2490:	00 d0       	rcall	.+0      	; 0x2492 <LCD_VidPrintVar+0xc>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <LCD_VidPrintVar+0xe>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
	if (0== Copy_U8Var ){
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	21 f4       	brne	.+8      	; 0x24ac <LCD_VidPrintVar+0x26>
		LCD_VidSendChar('0');
    24a4:	80 e3       	ldi	r24, 0x30	; 48
    24a6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_VidSendChar>
    24aa:	5d c0       	rjmp	.+186    	; 0x2566 <LCD_VidPrintVar+0xe0>
		return ;
	}
	u32 local_num = 0 ;
    24ac:	1c 82       	std	Y+4, r1	; 0x04
    24ae:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0 ;
    24b0:	1a 82       	std	Y+2, r1	; 0x02
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <LCD_VidPrintVar+0x34>
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidSendChar('0');
		return ;
	}
	u32 local_num = 0 ;
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
    24ba:	8a e0       	ldi	r24, 0x0A	; 10
    24bc:	6a 81       	ldd	r22, Y+2	; 0x02
    24be:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_U32Pow>
    24c2:	9c 01       	movw	r18, r24
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	b9 01       	movw	r22, r18
    24ca:	0e 94 2d 18 	call	0x305a	; 0x305a <__udivmodhi4>
    24ce:	cb 01       	movw	r24, r22
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	81 f7       	brne	.-32     	; 0x24b4 <LCD_VidPrintVar+0x2e>
		i++ ;
	}
	s8 copy_i = i-1 ;
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	81 50       	subi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	27 c0       	rjmp	.+78     	; 0x252a <LCD_VidPrintVar+0xa4>
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	2a e0       	ldi	r18, 0x0A	; 10
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	b9 01       	movw	r22, r18
    24e6:	0e 94 2d 18 	call	0x305a	; 0x305a <__udivmodhi4>
    24ea:	8c 01       	movw	r16, r24
    24ec:	99 81       	ldd	r25, Y+1	; 0x01
    24ee:	8a e0       	ldi	r24, 0x0A	; 10
    24f0:	69 2f       	mov	r22, r25
    24f2:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_U32Pow>
    24f6:	08 9f       	mul	r16, r24
    24f8:	90 01       	movw	r18, r0
    24fa:	09 9f       	mul	r16, r25
    24fc:	30 0d       	add	r19, r0
    24fe:	18 9f       	mul	r17, r24
    2500:	30 0d       	add	r19, r0
    2502:	11 24       	eor	r1, r1
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	82 0f       	add	r24, r18
    250a:	93 1f       	adc	r25, r19
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
		Copy_U8Var/=10 ;
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	2a e0       	ldi	r18, 0x0A	; 10
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	b9 01       	movw	r22, r18
    251a:	0e 94 2d 18 	call	0x305a	; 0x305a <__udivmodhi4>
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
		copy_i-- ;
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	81 50       	subi	r24, 0x01	; 1
    2528:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
	}
	s8 copy_i = i-1 ;
	while ( copy_i >= 0 ){
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	88 23       	and	r24, r24
    252e:	b4 f6       	brge	.-84     	; 0x24dc <LCD_VidPrintVar+0x56>
    2530:	17 c0       	rjmp	.+46     	; 0x2560 <LCD_VidPrintVar+0xda>
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	2a e0       	ldi	r18, 0x0A	; 10
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	b9 01       	movw	r22, r18
    253c:	0e 94 2d 18 	call	0x305a	; 0x305a <__udivmodhi4>
    2540:	80 5d       	subi	r24, 0xD0	; 208
    2542:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_VidSendChar>
		local_num /= 10 ;
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	2a e0       	ldi	r18, 0x0A	; 10
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	b9 01       	movw	r22, r18
    2550:	0e 94 2d 18 	call	0x305a	; 0x305a <__udivmodhi4>
    2554:	cb 01       	movw	r24, r22
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	81 50       	subi	r24, 0x01	; 1
    255e:	8a 83       	std	Y+2, r24	; 0x02
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	88 23       	and	r24, r24
    2564:	31 f7       	brne	.-52     	; 0x2532 <LCD_VidPrintVar+0xac>
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
		local_num /= 10 ;
		i--;
	}
}
    2566:	26 96       	adiw	r28, 0x06	; 6
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <LCD_VidPosCur>:
void LCD_VidPosCur(u8 Copy_U8Row , u8 Copy_U8Col ) {
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <LCD_VidPosCur+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	8a 83       	std	Y+2, r24	; 0x02
    258a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = 0 ;
    258c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_U8Row == 0)
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	88 23       	and	r24, r24
    2592:	19 f4       	brne	.+6      	; 0x259a <LCD_VidPosCur+0x1e>
		Local_Address =0x80 ;
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <LCD_VidPosCur+0x28>
	else if (Copy_U8Row == 1)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	11 f4       	brne	.+4      	; 0x25a4 <LCD_VidPosCur+0x28>
		Local_Address =0xC0 ;
    25a0:	80 ec       	ldi	r24, 0xC0	; 192
    25a2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Col < 16 )
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	80 31       	cpi	r24, 0x10	; 16
    25a8:	20 f4       	brcc	.+8      	; 0x25b2 <LCD_VidPosCur+0x36>
		Local_Address += Copy_U8Col ;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	89 0f       	add	r24, r25
    25b0:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommend ( Local_Address );
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <Lcd_vidDisplay_Custom_Character_Array>:

extern u8 Char[8];

void Lcd_vidDisplay_Custom_Character_Array(char Lcd[16][80])
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	2f 97       	sbiw	r28, 0x0f	; 15
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	9f 87       	std	Y+15, r25	; 0x0f
    25da:	8e 87       	std	Y+14, r24	; 0x0e
	u8 Flag_Char_Exist = 0;
    25dc:	1d 86       	std	Y+13, r1	; 0x0d
	u8 Row;
	u8 Reg=0;
    25de:	1b 86       	std	Y+11, r1	; 0x0b
	u8 Character_order = 0;
    25e0:	1a 86       	std	Y+10, r1	; 0x0a

	for(u8 i=0;i<80;i=i+5)
    25e2:	19 86       	std	Y+9, r1	; 0x09
    25e4:	12 c1       	rjmp	.+548    	; 0x280a <Lcd_vidDisplay_Custom_Character_Array+0x246>
	{
		for(u8 j=0;j<16;j++)
    25e6:	18 86       	std	Y+8, r1	; 0x08
    25e8:	38 c0       	rjmp	.+112    	; 0x265a <Lcd_vidDisplay_Custom_Character_Array+0x96>
		{
			for(u8 z=i;z<i+5;z++)
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	25 c0       	rjmp	.+74     	; 0x263a <Lcd_vidDisplay_Custom_Character_Array+0x76>
			{
				if(Lcd[j][z] == 1)
    25f0:	88 85       	ldd	r24, Y+8	; 0x08
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	80 e5       	ldi	r24, 0x50	; 80
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a9 01       	movw	r20, r18
    25fc:	48 9f       	mul	r20, r24
    25fe:	90 01       	movw	r18, r0
    2600:	49 9f       	mul	r20, r25
    2602:	30 0d       	add	r19, r0
    2604:	58 9f       	mul	r21, r24
    2606:	30 0d       	add	r19, r0
    2608:	11 24       	eor	r1, r1
    260a:	8e 85       	ldd	r24, Y+14	; 0x0e
    260c:	9f 85       	ldd	r25, Y+15	; 0x0f
    260e:	28 0f       	add	r18, r24
    2610:	39 1f       	adc	r19, r25
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	f9 01       	movw	r30, r18
    261a:	e8 0f       	add	r30, r24
    261c:	f9 1f       	adc	r31, r25
    261e:	80 81       	ld	r24, Z
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	41 f4       	brne	.+16     	; 0x2634 <Lcd_vidDisplay_Custom_Character_Array+0x70>
				{
					Flag_Char_Exist = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	8d 87       	std	Y+13, r24	; 0x0d
					if(j>=8)
    2628:	88 85       	ldd	r24, Y+8	; 0x08
    262a:	88 30       	cpi	r24, 0x08	; 8
    262c:	80 f0       	brcs	.+32     	; 0x264e <Lcd_vidDisplay_Custom_Character_Array+0x8a>
					{
						Row = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	8c 87       	std	Y+12, r24	; 0x0c
    2632:	0d c0       	rjmp	.+26     	; 0x264e <Lcd_vidDisplay_Custom_Character_Array+0x8a>

	for(u8 i=0;i<80;i=i+5)
	{
		for(u8 j=0;j<16;j++)
		{
			for(u8 z=i;z<i+5;z++)
    2634:	8f 81       	ldd	r24, Y+7	; 0x07
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	8f 83       	std	Y+7, r24	; 0x07
    263a:	8f 81       	ldd	r24, Y+7	; 0x07
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	05 96       	adiw	r24, 0x05	; 5
    2648:	28 17       	cp	r18, r24
    264a:	39 07       	cpc	r19, r25
    264c:	8c f2       	brlt	.-94     	; 0x25f0 <Lcd_vidDisplay_Custom_Character_Array+0x2c>
						Row = 1;
					}
					break;
				}
			}
			if(Flag_Char_Exist == 1)
    264e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	31 f0       	breq	.+12     	; 0x2660 <Lcd_vidDisplay_Custom_Character_Array+0x9c>
	u8 Reg=0;
	u8 Character_order = 0;

	for(u8 i=0;i<80;i=i+5)
	{
		for(u8 j=0;j<16;j++)
    2654:	88 85       	ldd	r24, Y+8	; 0x08
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	88 87       	std	Y+8, r24	; 0x08
    265a:	88 85       	ldd	r24, Y+8	; 0x08
    265c:	80 31       	cpi	r24, 0x10	; 16
    265e:	28 f2       	brcs	.-118    	; 0x25ea <Lcd_vidDisplay_Custom_Character_Array+0x26>
			{
				break;
			}
		}

		if(Flag_Char_Exist == 1)
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	09 f0       	breq	.+2      	; 0x2668 <Lcd_vidDisplay_Custom_Character_Array+0xa4>
    2666:	ce c0       	rjmp	.+412    	; 0x2804 <Lcd_vidDisplay_Custom_Character_Array+0x240>
		{
			for(u8 j=0;j<9;j++)
    2668:	1e 82       	std	Y+6, r1	; 0x06
    266a:	49 c0       	rjmp	.+146    	; 0x26fe <Lcd_vidDisplay_Custom_Character_Array+0x13a>
			{
				u8 Col = 4;
    266c:	84 e0       	ldi	r24, 0x04	; 4
    266e:	8d 83       	std	Y+5, r24	; 0x05
				for(u8 z=i;z<i+5;z++)
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	8c 83       	std	Y+4, r24	; 0x04
    2674:	2e c0       	rjmp	.+92     	; 0x26d2 <Lcd_vidDisplay_Custom_Character_Array+0x10e>
				{
					if(Lcd[j][z] == 1)
    2676:	8e 81       	ldd	r24, Y+6	; 0x06
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	80 e5       	ldi	r24, 0x50	; 80
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a9 01       	movw	r20, r18
    2682:	48 9f       	mul	r20, r24
    2684:	90 01       	movw	r18, r0
    2686:	49 9f       	mul	r20, r25
    2688:	30 0d       	add	r19, r0
    268a:	58 9f       	mul	r21, r24
    268c:	30 0d       	add	r19, r0
    268e:	11 24       	eor	r1, r1
    2690:	8e 85       	ldd	r24, Y+14	; 0x0e
    2692:	9f 85       	ldd	r25, Y+15	; 0x0f
    2694:	28 0f       	add	r18, r24
    2696:	39 1f       	adc	r19, r25
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	f9 01       	movw	r30, r18
    26a0:	e8 0f       	add	r30, r24
    26a2:	f9 1f       	adc	r31, r25
    26a4:	80 81       	ld	r24, Z
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	71 f4       	brne	.+28     	; 0x26c6 <Lcd_vidDisplay_Custom_Character_Array+0x102>
					{
						SET_BIT(Reg,Col);
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <Lcd_vidDisplay_Custom_Character_Array+0xf6>
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	2a 95       	dec	r18
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <Lcd_vidDisplay_Custom_Character_Array+0xf2>
    26be:	98 2f       	mov	r25, r24
    26c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26c2:	89 2b       	or	r24, r25
    26c4:	8b 87       	std	Y+11, r24	; 0x0b
					}
					Col--;
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	81 50       	subi	r24, 0x01	; 1
    26ca:	8d 83       	std	Y+5, r24	; 0x05
		if(Flag_Char_Exist == 1)
		{
			for(u8 j=0;j<9;j++)
			{
				u8 Col = 4;
				for(u8 z=i;z<i+5;z++)
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	8c 83       	std	Y+4, r24	; 0x04
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	89 85       	ldd	r24, Y+9	; 0x09
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	05 96       	adiw	r24, 0x05	; 5
    26e0:	28 17       	cp	r18, r24
    26e2:	39 07       	cpc	r19, r25
    26e4:	44 f2       	brlt	.-112    	; 0x2676 <Lcd_vidDisplay_Custom_Character_Array+0xb2>
					{
						SET_BIT(Reg,Col);
					}
					Col--;
				}
				Char[j] = Reg;
    26e6:	8e 81       	ldd	r24, Y+6	; 0x06
    26e8:	88 2f       	mov	r24, r24
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	fc 01       	movw	r30, r24
    26ee:	e5 52       	subi	r30, 0x25	; 37
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    26f4:	80 83       	st	Z, r24
				Reg = 0;
    26f6:	1b 86       	std	Y+11, r1	; 0x0b
			}
		}

		if(Flag_Char_Exist == 1)
		{
			for(u8 j=0;j<9;j++)
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	8f 5f       	subi	r24, 0xFF	; 255
    26fc:	8e 83       	std	Y+6, r24	; 0x06
    26fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2700:	89 30       	cpi	r24, 0x09	; 9
    2702:	08 f4       	brcc	.+2      	; 0x2706 <Lcd_vidDisplay_Custom_Character_Array+0x142>
    2704:	b3 cf       	rjmp	.-154    	; 0x266c <Lcd_vidDisplay_Custom_Character_Array+0xa8>
					Col--;
				}
				Char[j] = Reg;
				Reg = 0;
			}
			Lcd_vidSaveCustomChar(Character_order , Char);
    2706:	2b ed       	ldi	r18, 0xDB	; 219
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	8a 85       	ldd	r24, Y+10	; 0x0a
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 13 14 	call	0x2826	; 0x2826 <Lcd_vidSaveCustomChar>
			LCD_VidPosCur(0 , i/5);
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	95 e0       	ldi	r25, 0x05	; 5
    2716:	69 2f       	mov	r22, r25
    2718:	0e 94 21 18 	call	0x3042	; 0x3042 <__udivmodqi4>
    271c:	98 2f       	mov	r25, r24
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	69 2f       	mov	r22, r25
    2722:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_VidPosCur>
			LCD_VidSendChar(Character_order);
    2726:	8a 85       	ldd	r24, Y+10	; 0x0a
    2728:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_VidSendChar>
			Character_order++;
    272c:	8a 85       	ldd	r24, Y+10	; 0x0a
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	8a 87       	std	Y+10, r24	; 0x0a
			for(u8 j=0;j<9;j++)
    2732:	1b 82       	std	Y+3, r1	; 0x03
    2734:	4c c0       	rjmp	.+152    	; 0x27ce <Lcd_vidDisplay_Custom_Character_Array+0x20a>
			{
				u8 Col = 4;
    2736:	84 e0       	ldi	r24, 0x04	; 4
    2738:	8a 83       	std	Y+2, r24	; 0x02
				for(u8 z=i;z<i+5;z++)
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	31 c0       	rjmp	.+98     	; 0x27a2 <Lcd_vidDisplay_Custom_Character_Array+0x1de>
				{
					if(Lcd[j+8][z] == 1)
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	80 e5       	ldi	r24, 0x50	; 80
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	ac 01       	movw	r20, r24
    274c:	24 9f       	mul	r18, r20
    274e:	c0 01       	movw	r24, r0
    2750:	25 9f       	mul	r18, r21
    2752:	90 0d       	add	r25, r0
    2754:	34 9f       	mul	r19, r20
    2756:	90 0d       	add	r25, r0
    2758:	11 24       	eor	r1, r1
    275a:	9c 01       	movw	r18, r24
    275c:	20 58       	subi	r18, 0x80	; 128
    275e:	3d 4f       	sbci	r19, 0xFD	; 253
    2760:	8e 85       	ldd	r24, Y+14	; 0x0e
    2762:	9f 85       	ldd	r25, Y+15	; 0x0f
    2764:	28 0f       	add	r18, r24
    2766:	39 1f       	adc	r19, r25
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	f9 01       	movw	r30, r18
    2770:	e8 0f       	add	r30, r24
    2772:	f9 1f       	adc	r31, r25
    2774:	80 81       	ld	r24, Z
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	71 f4       	brne	.+28     	; 0x2796 <Lcd_vidDisplay_Custom_Character_Array+0x1d2>
					{
						SET_BIT(Reg,Col);
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	02 c0       	rjmp	.+4      	; 0x278a <Lcd_vidDisplay_Custom_Character_Array+0x1c6>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	2a 95       	dec	r18
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <Lcd_vidDisplay_Custom_Character_Array+0x1c2>
    278e:	98 2f       	mov	r25, r24
    2790:	8b 85       	ldd	r24, Y+11	; 0x0b
    2792:	89 2b       	or	r24, r25
    2794:	8b 87       	std	Y+11, r24	; 0x0b
					}
					Col--;
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	81 50       	subi	r24, 0x01	; 1
    279a:	8a 83       	std	Y+2, r24	; 0x02
			LCD_VidSendChar(Character_order);
			Character_order++;
			for(u8 j=0;j<9;j++)
			{
				u8 Col = 4;
				for(u8 z=i;z<i+5;z++)
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	8f 5f       	subi	r24, 0xFF	; 255
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	05 96       	adiw	r24, 0x05	; 5
    27b0:	28 17       	cp	r18, r24
    27b2:	39 07       	cpc	r19, r25
    27b4:	2c f2       	brlt	.-118    	; 0x2740 <Lcd_vidDisplay_Custom_Character_Array+0x17c>
					{
						SET_BIT(Reg,Col);
					}
					Col--;
				}
				Char[j] = Reg;
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	fc 01       	movw	r30, r24
    27be:	e5 52       	subi	r30, 0x25	; 37
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c4:	80 83       	st	Z, r24
				Reg = 0;
    27c6:	1b 86       	std	Y+11, r1	; 0x0b
			}
			Lcd_vidSaveCustomChar(Character_order , Char);
			LCD_VidPosCur(0 , i/5);
			LCD_VidSendChar(Character_order);
			Character_order++;
			for(u8 j=0;j<9;j++)
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	89 30       	cpi	r24, 0x09	; 9
    27d2:	08 f4       	brcc	.+2      	; 0x27d6 <Lcd_vidDisplay_Custom_Character_Array+0x212>
    27d4:	b0 cf       	rjmp	.-160    	; 0x2736 <Lcd_vidDisplay_Custom_Character_Array+0x172>
					Col--;
				}
				Char[j] = Reg;
				Reg = 0;
			}
			Lcd_vidSaveCustomChar(Character_order , Char);
    27d6:	2b ed       	ldi	r18, 0xDB	; 219
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	8a 85       	ldd	r24, Y+10	; 0x0a
    27dc:	b9 01       	movw	r22, r18
    27de:	0e 94 13 14 	call	0x2826	; 0x2826 <Lcd_vidSaveCustomChar>
			LCD_VidPosCur(1 , i/5);
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	95 e0       	ldi	r25, 0x05	; 5
    27e6:	69 2f       	mov	r22, r25
    27e8:	0e 94 21 18 	call	0x3042	; 0x3042 <__udivmodqi4>
    27ec:	98 2f       	mov	r25, r24
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	69 2f       	mov	r22, r25
    27f2:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_VidPosCur>
			LCD_VidSendChar(Character_order);
    27f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_VidSendChar>
			Character_order++;
    27fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27fe:	8f 5f       	subi	r24, 0xFF	; 255
    2800:	8a 87       	std	Y+10, r24	; 0x0a
			Flag_Char_Exist = 0;
    2802:	1d 86       	std	Y+13, r1	; 0x0d
	u8 Flag_Char_Exist = 0;
	u8 Row;
	u8 Reg=0;
	u8 Character_order = 0;

	for(u8 i=0;i<80;i=i+5)
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	8b 5f       	subi	r24, 0xFB	; 251
    2808:	89 87       	std	Y+9, r24	; 0x09
    280a:	89 85       	ldd	r24, Y+9	; 0x09
    280c:	80 35       	cpi	r24, 0x50	; 80
    280e:	08 f4       	brcc	.+2      	; 0x2812 <Lcd_vidDisplay_Custom_Character_Array+0x24e>
    2810:	ea ce       	rjmp	.-556    	; 0x25e6 <Lcd_vidDisplay_Custom_Character_Array+0x22>
			LCD_VidSendChar(Character_order);
			Character_order++;
			Flag_Char_Exist = 0;
		}
	}
	Character_order = 0;
    2812:	1a 86       	std	Y+10, r1	; 0x0a
}
    2814:	2f 96       	adiw	r28, 0x0f	; 15
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <Lcd_vidSaveCustomChar>:
void Lcd_vidSaveCustomChar(u8 Location , u8 *Char)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	00 d0       	rcall	.+0      	; 0x282c <Lcd_vidSaveCustomChar+0x6>
    282c:	00 d0       	rcall	.+0      	; 0x282e <Lcd_vidSaveCustomChar+0x8>
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	8a 83       	std	Y+2, r24	; 0x02
    2834:	7c 83       	std	Y+4, r23	; 0x04
    2836:	6b 83       	std	Y+3, r22	; 0x03
	if(Location < 8)
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	88 30       	cpi	r24, 0x08	; 8
    283c:	f8 f4       	brcc	.+62     	; 0x287c <Lcd_vidSaveCustomChar+0x56>
	{
		LCD_VidSendCommend(0x40 + (Location * 8));
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	08 96       	adiw	r24, 0x08	; 8
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
		for(u8 i=0;i<8;i++)
    2856:	19 82       	std	Y+1, r1	; 0x01
    2858:	0e c0       	rjmp	.+28     	; 0x2876 <Lcd_vidSaveCustomChar+0x50>
		{
			LCD_VidSendChar(Char[i]);
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	fc 01       	movw	r30, r24
    2866:	e2 0f       	add	r30, r18
    2868:	f3 1f       	adc	r31, r19
    286a:	80 81       	ld	r24, Z
    286c:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_VidSendChar>
void Lcd_vidSaveCustomChar(u8 Location , u8 *Char)
{
	if(Location < 8)
	{
		LCD_VidSendCommend(0x40 + (Location * 8));
		for(u8 i=0;i<8;i++)
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	8f 5f       	subi	r24, 0xFF	; 255
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	88 30       	cpi	r24, 0x08	; 8
    287a:	78 f3       	brcs	.-34     	; 0x285a <Lcd_vidSaveCustomChar+0x34>
		{
			LCD_VidSendChar(Char[i]);
		}
	}
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LCD_VidClear>:

void LCD_VidClear (){
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommend(DISPLAY_CLEAR) ;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_VidSendCommend>
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <main>:

u8 Char[8];                                            //to define the ones on one digit
s8 Snake_Row[MAX_BYTES-1] = {7,7,7} ;                  //to store the values of moving snake in rows
s8 Snake_Column[MAX_COL-1] = {0,1,2};                  //to store the values of moving snake in columns

void main (void){
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	c8 52       	subi	r28, 0x28	; 40
    28a8:	d5 40       	sbci	r29, 0x05	; 5
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();                                //to initialize LCD in beginning
    28b4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_VidInit>
	KeyPad_VidInit();                             //to initialize KEYPAD in beginning
    28b8:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <KeyPad_VidInit>
	u8 Lcd[MAX_BYTES][MAX_COL] =  {0} ;           //to write on LCD
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	95 e0       	ldi	r25, 0x05	; 5
    28c0:	fe 01       	movw	r30, r28
    28c2:	b9 96       	adiw	r30, 0x29	; 41
    28c4:	df 01       	movw	r26, r30
    28c6:	9c 01       	movw	r18, r24
    28c8:	1d 92       	st	X+, r1
    28ca:	21 50       	subi	r18, 0x01	; 1
    28cc:	30 40       	sbci	r19, 0x00	; 0
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <main+0x2a>

	u8 apple = 0 ;                                //food correspending to snake
    28d0:	18 a6       	std	Y+40, r1	; 0x28
	u8 Status = 0 ;                               //to express about status of food on LCD
    28d2:	1f a2       	std	Y+39, r1	; 0x27
	u8 button = 0 ;                               //to store num that Get from KEYPAD
    28d4:	1e a2       	std	Y+38, r1	; 0x26
	s8 last_index = 2 ;                           //last index in array
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	8d a3       	std	Y+37, r24	; 0x25
	s8 first_index = 0 ;                          //first index in array
    28da:	1c a2       	std	Y+36, r1	; 0x24
    u8 flag_intersection = 0 ;                    //to check if it intersect it's self or not
    28dc:	1b a2       	std	Y+35, r1	; 0x23

	/* to get random position of apple on LCD*/
	srand(apple);
    28de:	88 a5       	ldd	r24, Y+40	; 0x28
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <srand>
	apple++;
    28e8:	88 a5       	ldd	r24, Y+40	; 0x28
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	88 a7       	std	Y+40, r24	; 0x28
	u8 Dot_Row = rand() % 16;
    28ee:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <rand>
    28f2:	20 e1       	ldi	r18, 0x10	; 16
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	b9 01       	movw	r22, r18
    28f8:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodhi4>
    28fc:	8a a3       	std	Y+34, r24	; 0x22
	u8 Dot_Column = rand() % 75;
    28fe:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <rand>
    2902:	2b e4       	ldi	r18, 0x4B	; 75
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	b9 01       	movw	r22, r18
    2908:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodhi4>
    290c:	89 a3       	std	Y+33, r24	; 0x21
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a8 ec       	ldi	r26, 0xC8	; 200
    2914:	b2 e4       	ldi	r27, 0x42	; 66
    2916:	89 8f       	std	Y+25, r24	; 0x19
    2918:	9a 8f       	std	Y+26, r25	; 0x1a
    291a:	ab 8f       	std	Y+27, r26	; 0x1b
    291c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291e:	69 8d       	ldd	r22, Y+25	; 0x19
    2920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a ef       	ldi	r20, 0xFA	; 250
    292c:	54 e4       	ldi	r21, 0x44	; 68
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8d 8b       	std	Y+21, r24	; 0x15
    2938:	9e 8b       	std	Y+22, r25	; 0x16
    293a:	af 8b       	std	Y+23, r26	; 0x17
    293c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    293e:	6d 89       	ldd	r22, Y+21	; 0x15
    2940:	7e 89       	ldd	r23, Y+22	; 0x16
    2942:	8f 89       	ldd	r24, Y+23	; 0x17
    2944:	98 8d       	ldd	r25, Y+24	; 0x18
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <main+0xc2>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9c 8b       	std	Y+20, r25	; 0x14
    295c:	8b 8b       	std	Y+19, r24	; 0x13
    295e:	3f c0       	rjmp	.+126    	; 0x29de <main+0x140>
	else if (__tmp > 65535)
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	4c f5       	brge	.+82     	; 0x29ca <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	69 8d       	ldd	r22, Y+25	; 0x19
    297a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <main+0x122>
    29a2:	88 ec       	ldi	r24, 0xC8	; 200
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9a 8b       	std	Y+18, r25	; 0x12
    29a8:	89 8b       	std	Y+17, r24	; 0x11
    29aa:	89 89       	ldd	r24, Y+17	; 0x11
    29ac:	9a 89       	ldd	r25, Y+18	; 0x12
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <main+0x110>
    29b2:	9a 8b       	std	Y+18, r25	; 0x12
    29b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8b 89       	ldd	r24, Y+19	; 0x13
    29b8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9c 8b       	std	Y+20, r25	; 0x14
    29be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8b 89       	ldd	r24, Y+19	; 0x13
    29c2:	9c 89       	ldd	r25, Y+20	; 0x14
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <main+0x104>
    29c8:	14 c0       	rjmp	.+40     	; 0x29f2 <main+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	6d 89       	ldd	r22, Y+21	; 0x15
    29cc:	7e 89       	ldd	r23, Y+22	; 0x16
    29ce:	8f 89       	ldd	r24, Y+23	; 0x17
    29d0:	98 8d       	ldd	r25, Y+24	; 0x18
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9c 8b       	std	Y+20, r25	; 0x14
    29dc:	8b 8b       	std	Y+19, r24	; 0x13
    29de:	8b 89       	ldd	r24, Y+19	; 0x13
    29e0:	9c 89       	ldd	r25, Y+20	; 0x14
    29e2:	98 8b       	std	Y+16, r25	; 0x10
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	98 89       	ldd	r25, Y+16	; 0x10
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <main+0x14c>
    29ee:	98 8b       	std	Y+16, r25	; 0x10
    29f0:	8f 87       	std	Y+15, r24	; 0x0f

	while(1)
	{
		//to clear the following snake on LCD after moving
		_delay_ms(100);
		LCD_VidClear();
    29f2:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_VidClear>

		/*to continue moving in LCD even if reach to the borders*/
		if(Snake_Row[last_index] > 15 ) {
    29f6:	8d a1       	ldd	r24, Y+37	; 0x25
    29f8:	99 27       	eor	r25, r25
    29fa:	87 fd       	sbrc	r24, 7
    29fc:	90 95       	com	r25
    29fe:	fc 01       	movw	r30, r24
    2a00:	e7 58       	subi	r30, 0x87	; 135
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	80 81       	ld	r24, Z
    2a06:	80 31       	cpi	r24, 0x10	; 16
    2a08:	4c f0       	brlt	.+18     	; 0x2a1c <main+0x17e>
			Snake_Row[last_index] = 0 ;
    2a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0c:	99 27       	eor	r25, r25
    2a0e:	87 fd       	sbrc	r24, 7
    2a10:	90 95       	com	r25
    2a12:	fc 01       	movw	r30, r24
    2a14:	e7 58       	subi	r30, 0x87	; 135
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	10 82       	st	Z, r1
    2a1a:	3a c0       	rjmp	.+116    	; 0x2a90 <main+0x1f2>
		}
		else if(Snake_Row[last_index] < 0 ){
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	99 27       	eor	r25, r25
    2a20:	87 fd       	sbrc	r24, 7
    2a22:	90 95       	com	r25
    2a24:	fc 01       	movw	r30, r24
    2a26:	e7 58       	subi	r30, 0x87	; 135
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 23       	and	r24, r24
    2a2e:	54 f4       	brge	.+20     	; 0x2a44 <main+0x1a6>
			Snake_Row[last_index] = 15 ;
    2a30:	8d a1       	ldd	r24, Y+37	; 0x25
    2a32:	99 27       	eor	r25, r25
    2a34:	87 fd       	sbrc	r24, 7
    2a36:	90 95       	com	r25
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e7 58       	subi	r30, 0x87	; 135
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	8f e0       	ldi	r24, 0x0F	; 15
    2a40:	80 83       	st	Z, r24
    2a42:	26 c0       	rjmp	.+76     	; 0x2a90 <main+0x1f2>
		}
		else if(Snake_Column[last_index] > 79 ){
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	99 27       	eor	r25, r25
    2a48:	87 fd       	sbrc	r24, 7
    2a4a:	90 95       	com	r25
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e8 57       	subi	r30, 0x78	; 120
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	80 35       	cpi	r24, 0x50	; 80
    2a56:	4c f0       	brlt	.+18     	; 0x2a6a <main+0x1cc>
			Snake_Column[last_index] = 0 ;
    2a58:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5a:	99 27       	eor	r25, r25
    2a5c:	87 fd       	sbrc	r24, 7
    2a5e:	90 95       	com	r25
    2a60:	fc 01       	movw	r30, r24
    2a62:	e8 57       	subi	r30, 0x78	; 120
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	10 82       	st	Z, r1
    2a68:	13 c0       	rjmp	.+38     	; 0x2a90 <main+0x1f2>
		}
		else if(Snake_Column[last_index] < 0){
    2a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6c:	99 27       	eor	r25, r25
    2a6e:	87 fd       	sbrc	r24, 7
    2a70:	90 95       	com	r25
    2a72:	fc 01       	movw	r30, r24
    2a74:	e8 57       	subi	r30, 0x78	; 120
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	88 23       	and	r24, r24
    2a7c:	4c f4       	brge	.+18     	; 0x2a90 <main+0x1f2>
			Snake_Column[last_index] = 79 ;
    2a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a80:	99 27       	eor	r25, r25
    2a82:	87 fd       	sbrc	r24, 7
    2a84:	90 95       	com	r25
    2a86:	fc 01       	movw	r30, r24
    2a88:	e8 57       	subi	r30, 0x78	; 120
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	8f e4       	ldi	r24, 0x4F	; 79
    2a8e:	80 83       	st	Z, r24
		}
        /**********************************************************/

		//to store snake in matrix
		for (u8 i=first_index ; i<=last_index ; i++){
    2a90:	8c a1       	ldd	r24, Y+36	; 0x24
    2a92:	88 a3       	std	Y+32, r24	; 0x20
    2a94:	2d c0       	rjmp	.+90     	; 0x2af0 <main+0x252>
		    Lcd[ Snake_Row[i] ][ Snake_Column[i] ] = 1 ;
    2a96:	88 a1       	ldd	r24, Y+32	; 0x20
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e7 58       	subi	r30, 0x87	; 135
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	33 27       	eor	r19, r19
    2aa8:	27 fd       	sbrc	r18, 7
    2aaa:	30 95       	com	r19
    2aac:	88 a1       	ldd	r24, Y+32	; 0x20
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e8 57       	subi	r30, 0x78	; 120
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	48 2f       	mov	r20, r24
    2abc:	55 27       	eor	r21, r21
    2abe:	47 fd       	sbrc	r20, 7
    2ac0:	50 95       	com	r21
    2ac2:	80 e5       	ldi	r24, 0x50	; 80
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	b9 01       	movw	r22, r18
    2ac8:	68 9f       	mul	r22, r24
    2aca:	90 01       	movw	r18, r0
    2acc:	69 9f       	mul	r22, r25
    2ace:	30 0d       	add	r19, r0
    2ad0:	78 9f       	mul	r23, r24
    2ad2:	30 0d       	add	r19, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	82 0f       	add	r24, r18
    2adc:	93 1f       	adc	r25, r19
    2ade:	84 0f       	add	r24, r20
    2ae0:	95 1f       	adc	r25, r21
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	b8 96       	adiw	r30, 0x28	; 40
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 83       	st	Z, r24
			Snake_Column[last_index] = 79 ;
		}
        /**********************************************************/

		//to store snake in matrix
		for (u8 i=first_index ; i<=last_index ; i++){
    2aea:	88 a1       	ldd	r24, Y+32	; 0x20
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	88 a3       	std	Y+32, r24	; 0x20
    2af0:	88 a1       	ldd	r24, Y+32	; 0x20
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	8d a1       	ldd	r24, Y+37	; 0x25
    2af8:	99 27       	eor	r25, r25
    2afa:	87 fd       	sbrc	r24, 7
    2afc:	90 95       	com	r25
    2afe:	82 17       	cp	r24, r18
    2b00:	93 07       	cpc	r25, r19
    2b02:	4c f6       	brge	.-110    	; 0x2a96 <main+0x1f8>
    2b04:	4e c0       	rjmp	.+156    	; 0x2ba2 <main+0x304>
		}

		/*to display next apple in other position in LCD if the apple on any parts of snake*/
		while(Status == 0)
		{
			u8 FlagNotOnSnake = 0 ;
    2b06:	1f 8e       	std	Y+31, r1	; 0x1f
			srand(apple);
    2b08:	88 a5       	ldd	r24, Y+40	; 0x28
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <srand>
			apple++;
    2b12:	88 a5       	ldd	r24, Y+40	; 0x28
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	88 a7       	std	Y+40, r24	; 0x28
			Dot_Row = rand() % 16;
    2b18:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <rand>
    2b1c:	20 e1       	ldi	r18, 0x10	; 16
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	b9 01       	movw	r22, r18
    2b22:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodhi4>
    2b26:	8a a3       	std	Y+34, r24	; 0x22
			Dot_Column = rand() % 75;
    2b28:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <rand>
    2b2c:	2b e4       	ldi	r18, 0x4B	; 75
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	b9 01       	movw	r22, r18
    2b32:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodhi4>
    2b36:	89 a3       	std	Y+33, r24	; 0x21

			for (u8 i = 0 ; i<= last_index ; i++){
    2b38:	1e 8e       	std	Y+30, r1	; 0x1e
    2b3a:	26 c0       	rjmp	.+76     	; 0x2b88 <main+0x2ea>
				if ( Snake_Column[Dot_Row] != Snake_Column[i] && Snake_Row[Dot_Row] != Snake_Row[i] ){
    2b3c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b3e:	88 2f       	mov	r24, r24
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	fc 01       	movw	r30, r24
    2b44:	e8 57       	subi	r30, 0x78	; 120
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	20 81       	ld	r18, Z
    2b4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b4c:	88 2f       	mov	r24, r24
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	fc 01       	movw	r30, r24
    2b52:	e8 57       	subi	r30, 0x78	; 120
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	28 17       	cp	r18, r24
    2b5a:	99 f0       	breq	.+38     	; 0x2b82 <main+0x2e4>
    2b5c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	fc 01       	movw	r30, r24
    2b64:	e7 58       	subi	r30, 0x87	; 135
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	20 81       	ld	r18, Z
    2b6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	fc 01       	movw	r30, r24
    2b72:	e7 58       	subi	r30, 0x87	; 135
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	28 17       	cp	r18, r24
    2b7a:	19 f0       	breq	.+6      	; 0x2b82 <main+0x2e4>
					FlagNotOnSnake = 1 ;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b80:	0d c0       	rjmp	.+26     	; 0x2b9c <main+0x2fe>
			srand(apple);
			apple++;
			Dot_Row = rand() % 16;
			Dot_Column = rand() % 75;

			for (u8 i = 0 ; i<= last_index ; i++){
    2b82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	8e 8f       	std	Y+30, r24	; 0x1e
    2b88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b90:	99 27       	eor	r25, r25
    2b92:	87 fd       	sbrc	r24, 7
    2b94:	90 95       	com	r25
    2b96:	82 17       	cp	r24, r18
    2b98:	93 07       	cpc	r25, r19
    2b9a:	84 f6       	brge	.-96     	; 0x2b3c <main+0x29e>
					FlagNotOnSnake = 1 ;
					break ;
				}//end if
			}//end for

			if (FlagNotOnSnake == 1 ){
    2b9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <main+0x30c>
		for (u8 i=first_index ; i<=last_index ; i++){
		    Lcd[ Snake_Row[i] ][ Snake_Column[i] ] = 1 ;
		}

		/*to display next apple in other position in LCD if the apple on any parts of snake*/
		while(Status == 0)
    2ba2:	8f a1       	ldd	r24, Y+39	; 0x27
    2ba4:	88 23       	and	r24, r24
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <main+0x30c>
    2ba8:	ae cf       	rjmp	.-164    	; 0x2b06 <main+0x268>

		}//end while
		/**************************************************************************************/

		//to store the apple in matrix
		Status = 1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	8f a3       	std	Y+39, r24	; 0x27
		Lcd[Dot_Row][Dot_Column] = 1;
    2bae:	8a a1       	ldd	r24, Y+34	; 0x22
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb6:	48 2f       	mov	r20, r24
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	80 e5       	ldi	r24, 0x50	; 80
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	d9 01       	movw	r26, r18
    2bc0:	a8 9f       	mul	r26, r24
    2bc2:	90 01       	movw	r18, r0
    2bc4:	a9 9f       	mul	r26, r25
    2bc6:	30 0d       	add	r19, r0
    2bc8:	b8 9f       	mul	r27, r24
    2bca:	30 0d       	add	r19, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	ce 01       	movw	r24, r28
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	82 0f       	add	r24, r18
    2bd4:	93 1f       	adc	r25, r19
    2bd6:	84 0f       	add	r24, r20
    2bd8:	95 1f       	adc	r25, r21
    2bda:	fc 01       	movw	r30, r24
    2bdc:	b8 96       	adiw	r30, 0x28	; 40
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	80 83       	st	Z, r24

		//Display motion
		Lcd_vidDisplay_Custom_Character_Array(Lcd);
    2be2:	ce 01       	movw	r24, r28
    2be4:	89 96       	adiw	r24, 0x29	; 41
    2be6:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_vidDisplay_Custom_Character_Array>

		//to check if Snake eats apple
		if(((Dot_Row == Snake_Row[last_index] && Dot_Column == Snake_Column[last_index])) && Status == 1)
    2bea:	8a a1       	ldd	r24, Y+34	; 0x22
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf2:	99 27       	eor	r25, r25
    2bf4:	87 fd       	sbrc	r24, 7
    2bf6:	90 95       	com	r25
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e7 58       	subi	r30, 0x87	; 135
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	99 27       	eor	r25, r25
    2c02:	87 fd       	sbrc	r24, 7
    2c04:	90 95       	com	r25
    2c06:	28 17       	cp	r18, r24
    2c08:	39 07       	cpc	r19, r25
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <main+0x370>
    2c0c:	56 c0       	rjmp	.+172    	; 0x2cba <main+0x41c>
    2c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	8d a1       	ldd	r24, Y+37	; 0x25
    2c16:	99 27       	eor	r25, r25
    2c18:	87 fd       	sbrc	r24, 7
    2c1a:	90 95       	com	r25
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e8 57       	subi	r30, 0x78	; 120
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	99 27       	eor	r25, r25
    2c26:	87 fd       	sbrc	r24, 7
    2c28:	90 95       	com	r25
    2c2a:	28 17       	cp	r18, r24
    2c2c:	39 07       	cpc	r19, r25
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <main+0x394>
    2c30:	44 c0       	rjmp	.+136    	; 0x2cba <main+0x41c>
    2c32:	8f a1       	ldd	r24, Y+39	; 0x27
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <main+0x39c>
    2c38:	40 c0       	rjmp	.+128    	; 0x2cba <main+0x41c>
		{
			srand(apple);
    2c3a:	88 a5       	ldd	r24, Y+40	; 0x28
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <srand>
			apple++;
    2c44:	88 a5       	ldd	r24, Y+40	; 0x28
    2c46:	8f 5f       	subi	r24, 0xFF	; 255
    2c48:	88 a7       	std	Y+40, r24	; 0x28
			Dot_Row = rand() % 16;
    2c4a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <rand>
    2c4e:	20 e1       	ldi	r18, 0x10	; 16
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	b9 01       	movw	r22, r18
    2c54:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodhi4>
    2c58:	8a a3       	std	Y+34, r24	; 0x22
			Dot_Column = rand() % 75;
    2c5a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <rand>
    2c5e:	2b e4       	ldi	r18, 0x4B	; 75
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	b9 01       	movw	r22, r18
    2c64:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodhi4>
    2c68:	89 a3       	std	Y+33, r24	; 0x21

			last_index++ ;
    2c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	8d a3       	std	Y+37, r24	; 0x25
			Snake_Row[last_index]=Snake_Row[last_index-1] ;
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	28 2f       	mov	r18, r24
    2c74:	33 27       	eor	r19, r19
    2c76:	27 fd       	sbrc	r18, 7
    2c78:	30 95       	com	r19
    2c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7c:	99 27       	eor	r25, r25
    2c7e:	87 fd       	sbrc	r24, 7
    2c80:	90 95       	com	r25
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	fc 01       	movw	r30, r24
    2c86:	e7 58       	subi	r30, 0x87	; 135
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	f9 01       	movw	r30, r18
    2c8e:	e7 58       	subi	r30, 0x87	; 135
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 83       	st	Z, r24
			Snake_Column[last_index]=Snake_Column[last_index-1] ;
    2c94:	8d a1       	ldd	r24, Y+37	; 0x25
    2c96:	28 2f       	mov	r18, r24
    2c98:	33 27       	eor	r19, r19
    2c9a:	27 fd       	sbrc	r18, 7
    2c9c:	30 95       	com	r19
    2c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ca0:	99 27       	eor	r25, r25
    2ca2:	87 fd       	sbrc	r24, 7
    2ca4:	90 95       	com	r25
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	fc 01       	movw	r30, r24
    2caa:	e8 57       	subi	r30, 0x78	; 120
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	f9 01       	movw	r30, r18
    2cb2:	e8 57       	subi	r30, 0x78	; 120
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 83       	st	Z, r24

			Status = 0;
    2cb8:	1f a2       	std	Y+39, r1	; 0x27
		}//end if

		//to shift snake
		Lcd[Snake_Row[first_index] ][Snake_Column[first_index] ] = 0 ;
    2cba:	8c a1       	ldd	r24, Y+36	; 0x24
    2cbc:	99 27       	eor	r25, r25
    2cbe:	87 fd       	sbrc	r24, 7
    2cc0:	90 95       	com	r25
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e7 58       	subi	r30, 0x87	; 135
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	28 2f       	mov	r18, r24
    2ccc:	33 27       	eor	r19, r19
    2cce:	27 fd       	sbrc	r18, 7
    2cd0:	30 95       	com	r19
    2cd2:	8c a1       	ldd	r24, Y+36	; 0x24
    2cd4:	99 27       	eor	r25, r25
    2cd6:	87 fd       	sbrc	r24, 7
    2cd8:	90 95       	com	r25
    2cda:	fc 01       	movw	r30, r24
    2cdc:	e8 57       	subi	r30, 0x78	; 120
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	48 2f       	mov	r20, r24
    2ce4:	55 27       	eor	r21, r21
    2ce6:	47 fd       	sbrc	r20, 7
    2ce8:	50 95       	com	r21
    2cea:	80 e5       	ldi	r24, 0x50	; 80
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	b9 01       	movw	r22, r18
    2cf0:	68 9f       	mul	r22, r24
    2cf2:	90 01       	movw	r18, r0
    2cf4:	69 9f       	mul	r22, r25
    2cf6:	30 0d       	add	r19, r0
    2cf8:	78 9f       	mul	r23, r24
    2cfa:	30 0d       	add	r19, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	ce 01       	movw	r24, r28
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	82 0f       	add	r24, r18
    2d04:	93 1f       	adc	r25, r19
    2d06:	84 0f       	add	r24, r20
    2d08:	95 1f       	adc	r25, r21
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	b8 96       	adiw	r30, 0x28	; 40
    2d0e:	10 82       	st	Z, r1
		for (u8 i = first_index ; i < last_index ; i++){
    2d10:	8c a1       	ldd	r24, Y+36	; 0x24
    2d12:	8d 8f       	std	Y+29, r24	; 0x1d
    2d14:	21 c0       	rjmp	.+66     	; 0x2d58 <main+0x4ba>
			Snake_Column[i] = Snake_Column[i+1] ;
    2d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	fc 01       	movw	r30, r24
    2d26:	e8 57       	subi	r30, 0x78	; 120
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	f9 01       	movw	r30, r18
    2d2e:	e8 57       	subi	r30, 0x78	; 120
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 83       	st	Z, r24
			Snake_Row[i] = Snake_Row[i+1] ;
    2d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	fc 01       	movw	r30, r24
    2d44:	e7 58       	subi	r30, 0x87	; 135
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	f9 01       	movw	r30, r18
    2d4c:	e7 58       	subi	r30, 0x87	; 135
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 83       	st	Z, r24
			Status = 0;
		}//end if

		//to shift snake
		Lcd[Snake_Row[first_index] ][Snake_Column[first_index] ] = 0 ;
		for (u8 i = first_index ; i < last_index ; i++){
    2d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d54:	8f 5f       	subi	r24, 0xFF	; 255
    2d56:	8d 8f       	std	Y+29, r24	; 0x1d
    2d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d60:	99 27       	eor	r25, r25
    2d62:	87 fd       	sbrc	r24, 7
    2d64:	90 95       	com	r25
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	ac f2       	brlt	.-86     	; 0x2d16 <main+0x478>
			Snake_Column[i] = Snake_Column[i+1] ;
			Snake_Row[i] = Snake_Row[i+1] ;
		}//end for loop

		/*to check the input number*/
		button = KeyPad_U8GetNUM() ;
    2d6c:	0e 94 88 0a 	call	0x1510	; 0x1510 <KeyPad_U8GetNUM>
    2d70:	8e a3       	std	Y+38, r24	; 0x26
		if (button == 4){
    2d72:	8e a1       	ldd	r24, Y+38	; 0x26
    2d74:	84 30       	cpi	r24, 0x04	; 4
    2d76:	19 f4       	brne	.+6      	; 0x2d7e <main+0x4e0>
			direction_left();
    2d78:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <direction_left>
    2d7c:	11 c0       	rjmp	.+34     	; 0x2da0 <main+0x502>
		}
		else if ( button == 2 ){
    2d7e:	8e a1       	ldd	r24, Y+38	; 0x26
    2d80:	82 30       	cpi	r24, 0x02	; 2
    2d82:	19 f4       	brne	.+6      	; 0x2d8a <main+0x4ec>
			direction_up();
    2d84:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <direction_up>
    2d88:	0b c0       	rjmp	.+22     	; 0x2da0 <main+0x502>
		}
		else if (button == 6){
    2d8a:	8e a1       	ldd	r24, Y+38	; 0x26
    2d8c:	86 30       	cpi	r24, 0x06	; 6
    2d8e:	19 f4       	brne	.+6      	; 0x2d96 <main+0x4f8>
			direction_Right();
    2d90:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <direction_Right>
    2d94:	05 c0       	rjmp	.+10     	; 0x2da0 <main+0x502>
		}
		else if (button== 8){
    2d96:	8e a1       	ldd	r24, Y+38	; 0x26
    2d98:	88 30       	cpi	r24, 0x08	; 8
    2d9a:	11 f4       	brne	.+4      	; 0x2da0 <main+0x502>
			direction_down();
    2d9c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <direction_down>
		}
		/**************************/

		/*to continue moving in specific direction*/
		if (right) {
    2da0:	80 91 78 00 	lds	r24, 0x0078
    2da4:	88 23       	and	r24, r24
    2da6:	79 f0       	breq	.+30     	; 0x2dc6 <main+0x528>
			Snake_Column[last_index]++;
    2da8:	8d a1       	ldd	r24, Y+37	; 0x25
    2daa:	28 2f       	mov	r18, r24
    2dac:	33 27       	eor	r19, r19
    2dae:	27 fd       	sbrc	r18, 7
    2db0:	30 95       	com	r19
    2db2:	f9 01       	movw	r30, r18
    2db4:	e8 57       	subi	r30, 0x78	; 120
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	8f 5f       	subi	r24, 0xFF	; 255
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	e8 57       	subi	r30, 0x78	; 120
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 83       	st	Z, r24
    2dc4:	38 c0       	rjmp	.+112    	; 0x2e36 <main+0x598>
		}
		else if (left){
    2dc6:	80 91 d8 00 	lds	r24, 0x00D8
    2dca:	88 23       	and	r24, r24
    2dcc:	79 f0       	breq	.+30     	; 0x2dec <main+0x54e>
			Snake_Column[last_index]--;
    2dce:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	33 27       	eor	r19, r19
    2dd4:	27 fd       	sbrc	r18, 7
    2dd6:	30 95       	com	r19
    2dd8:	f9 01       	movw	r30, r18
    2dda:	e8 57       	subi	r30, 0x78	; 120
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	81 50       	subi	r24, 0x01	; 1
    2de2:	f9 01       	movw	r30, r18
    2de4:	e8 57       	subi	r30, 0x78	; 120
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 83       	st	Z, r24
    2dea:	25 c0       	rjmp	.+74     	; 0x2e36 <main+0x598>
		}
		else if (up){
    2dec:	80 91 d9 00 	lds	r24, 0x00D9
    2df0:	88 23       	and	r24, r24
    2df2:	79 f0       	breq	.+30     	; 0x2e12 <main+0x574>
			Snake_Row[last_index]--;
    2df4:	8d a1       	ldd	r24, Y+37	; 0x25
    2df6:	28 2f       	mov	r18, r24
    2df8:	33 27       	eor	r19, r19
    2dfa:	27 fd       	sbrc	r18, 7
    2dfc:	30 95       	com	r19
    2dfe:	f9 01       	movw	r30, r18
    2e00:	e7 58       	subi	r30, 0x87	; 135
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	81 50       	subi	r24, 0x01	; 1
    2e08:	f9 01       	movw	r30, r18
    2e0a:	e7 58       	subi	r30, 0x87	; 135
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 83       	st	Z, r24
    2e10:	12 c0       	rjmp	.+36     	; 0x2e36 <main+0x598>
		}
		else if (down){
    2e12:	80 91 da 00 	lds	r24, 0x00DA
    2e16:	88 23       	and	r24, r24
    2e18:	71 f0       	breq	.+28     	; 0x2e36 <main+0x598>
			Snake_Row[last_index]++;
    2e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	33 27       	eor	r19, r19
    2e20:	27 fd       	sbrc	r18, 7
    2e22:	30 95       	com	r19
    2e24:	f9 01       	movw	r30, r18
    2e26:	e7 58       	subi	r30, 0x87	; 135
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	8f 5f       	subi	r24, 0xFF	; 255
    2e2e:	f9 01       	movw	r30, r18
    2e30:	e7 58       	subi	r30, 0x87	; 135
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 83       	st	Z, r24
		}
		/*******************************************/

		/***** to display GAME OVER with intersected snake **********/
	    flag_intersection = check_on_moving(last_index) ;
    2e36:	8d a1       	ldd	r24, Y+37	; 0x25
    2e38:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <check_on_moving>
    2e3c:	8b a3       	std	Y+35, r24	; 0x23
	    if (flag_intersection){
    2e3e:	8b a1       	ldd	r24, Y+35	; 0x23
    2e40:	88 23       	and	r24, r24
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <main+0x5a8>
    2e44:	64 cd       	rjmp	.-1336   	; 0x290e <main+0x70>
	    	LCD_VidPosCur(0,0);
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_VidPosCur>
	    	LCD_VidSendString(" GAME OVER ") ;
    2e4e:	80 e6       	ldi	r24, 0x60	; 96
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_VidSendString>
	    	LCD_VidPosCur(1,0);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_VidPosCur>
	    	LCD_VidSendString(" GAME OVER ") ;
    2e5e:	80 e6       	ldi	r24, 0x60	; 96
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	0e 94 6f 11 	call	0x22de	; 0x22de <LCD_VidSendString>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	aa ef       	ldi	r26, 0xFA	; 250
    2e6c:	b4 e4       	ldi	r27, 0x44	; 68
    2e6e:	8b 87       	std	Y+11, r24	; 0x0b
    2e70:	9c 87       	std	Y+12, r25	; 0x0c
    2e72:	ad 87       	std	Y+13, r26	; 0x0d
    2e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a ef       	ldi	r20, 0xFA	; 250
    2e84:	54 e4       	ldi	r21, 0x44	; 68
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	8f 83       	std	Y+7, r24	; 0x07
    2e90:	98 87       	std	Y+8, r25	; 0x08
    2e92:	a9 87       	std	Y+9, r26	; 0x09
    2e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <main+0x61a>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <main+0x698>
	else if (__tmp > 65535)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <main+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <main+0x67a>
    2efa:	88 ec       	ldi	r24, 0xC8	; 200
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9c 83       	std	Y+4, r25	; 0x04
    2f00:	8b 83       	std	Y+3, r24	; 0x03
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	9c 81       	ldd	r25, Y+4	; 0x04
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <main+0x668>
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f10:	9e 81       	ldd	r25, Y+6	; 0x06
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <main+0x65c>
    2f20:	f6 cc       	rjmp	.-1556   	; 0x290e <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	78 85       	ldd	r23, Y+8	; 0x08
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	8d 83       	std	Y+5, r24	; 0x05
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	9a 83       	std	Y+2, r25	; 0x02
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <main+0x6a4>
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	e1 cc       	rjmp	.-1598   	; 0x290e <main+0x70>

00002f4c <direction_left>:

	}//end while (1)
}//end main


void direction_left (void){
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
     right = 0 ;                       //to edit direction to move left
    2f54:	10 92 78 00 	sts	0x0078, r1
     left = 1 ;                        //to edit direction to move left
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	80 93 d8 00 	sts	0x00D8, r24
     up = 0 ;                          //to edit direction to move left
    2f5e:	10 92 d9 00 	sts	0x00D9, r1
     down = 0 ;                        //to edit direction to move left
    2f62:	10 92 da 00 	sts	0x00DA, r1
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <direction_Right>:

void direction_Right (void){
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    right = 1 ;                       //to edit direction to move right
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 78 00 	sts	0x0078, r24
    left = 0 ;                        //to edit direction to move right
    2f7a:	10 92 d8 00 	sts	0x00D8, r1
    up = 0 ;                          //to edit direction to move right
    2f7e:	10 92 d9 00 	sts	0x00D9, r1
    down = 0 ;                        //to edit direction to move right
    2f82:	10 92 da 00 	sts	0x00DA, r1
}
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <direction_up>:

void direction_up (void){
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
     right = 0 ;                       //to edit direction to move up
    2f94:	10 92 78 00 	sts	0x0078, r1
     left = 0 ;                        //to edit direction to move up
    2f98:	10 92 d8 00 	sts	0x00D8, r1
     up = 1 ;                          //to edit direction to move up
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	80 93 d9 00 	sts	0x00D9, r24
     down = 0 ;                        //to edit direction to move up
    2fa2:	10 92 da 00 	sts	0x00DA, r1
}
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <direction_down>:


void direction_down (void){
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    right = 0 ;                       //to edit direction to move down
    2fb4:	10 92 78 00 	sts	0x0078, r1
    left = 0 ;                        //to edit direction to move down
    2fb8:	10 92 d8 00 	sts	0x00D8, r1
    up = 0 ;                          //to edit direction to move down
    2fbc:	10 92 d9 00 	sts	0x00D9, r1
    down = 1 ;                        //to edit direction to move down
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	80 93 da 00 	sts	0x00DA, r24
}
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	08 95       	ret

00002fcc <check_on_moving>:

u8 check_on_moving (u8 Copy_U8col ){
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <check_on_moving+0x6>
    2fd2:	0f 92       	push	r0
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
	/*sequential search to check if the snake intersected it's self or not*/
	for (u8 i = 0 ; i< Copy_U8col ; i++){
    2fda:	19 82       	std	Y+1, r1	; 0x01
    2fdc:	26 c0       	rjmp	.+76     	; 0x302a <check_on_moving+0x5e>
		if ( Snake_Column[Copy_U8col] == Snake_Column[i] && Snake_Row[Copy_U8col] == Snake_Row[i] ){
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	88 2f       	mov	r24, r24
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e8 57       	subi	r30, 0x78	; 120
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	20 81       	ld	r18, Z
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e8 57       	subi	r30, 0x78	; 120
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	28 17       	cp	r18, r24
    2ffc:	99 f4       	brne	.+38     	; 0x3024 <check_on_moving+0x58>
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	fc 01       	movw	r30, r24
    3006:	e7 58       	subi	r30, 0x87	; 135
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	20 81       	ld	r18, Z
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	88 2f       	mov	r24, r24
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	fc 01       	movw	r30, r24
    3014:	e7 58       	subi	r30, 0x87	; 135
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 81       	ld	r24, Z
    301a:	28 17       	cp	r18, r24
    301c:	19 f4       	brne	.+6      	; 0x3024 <check_on_moving+0x58>
			return 1 ;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	8b 83       	std	Y+3, r24	; 0x03
    3022:	08 c0       	rjmp	.+16     	; 0x3034 <check_on_moving+0x68>
    down = 1 ;                        //to edit direction to move down
}

u8 check_on_moving (u8 Copy_U8col ){
	/*sequential search to check if the snake intersected it's self or not*/
	for (u8 i = 0 ; i< Copy_U8col ; i++){
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	8f 5f       	subi	r24, 0xFF	; 255
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	99 81       	ldd	r25, Y+1	; 0x01
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	98 17       	cp	r25, r24
    3030:	b0 f2       	brcs	.-84     	; 0x2fde <check_on_moving+0x12>
		}//end if
	}//end for loop
	/*********************************************************************/

	//if no iontersection
	return 0 ;
    3032:	1b 82       	std	Y+3, r1	; 0x03
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
}//end FUNC
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <__udivmodqi4>:
    3042:	99 1b       	sub	r25, r25
    3044:	79 e0       	ldi	r23, 0x09	; 9
    3046:	04 c0       	rjmp	.+8      	; 0x3050 <__udivmodqi4_ep>

00003048 <__udivmodqi4_loop>:
    3048:	99 1f       	adc	r25, r25
    304a:	96 17       	cp	r25, r22
    304c:	08 f0       	brcs	.+2      	; 0x3050 <__udivmodqi4_ep>
    304e:	96 1b       	sub	r25, r22

00003050 <__udivmodqi4_ep>:
    3050:	88 1f       	adc	r24, r24
    3052:	7a 95       	dec	r23
    3054:	c9 f7       	brne	.-14     	; 0x3048 <__udivmodqi4_loop>
    3056:	80 95       	com	r24
    3058:	08 95       	ret

0000305a <__udivmodhi4>:
    305a:	aa 1b       	sub	r26, r26
    305c:	bb 1b       	sub	r27, r27
    305e:	51 e1       	ldi	r21, 0x11	; 17
    3060:	07 c0       	rjmp	.+14     	; 0x3070 <__udivmodhi4_ep>

00003062 <__udivmodhi4_loop>:
    3062:	aa 1f       	adc	r26, r26
    3064:	bb 1f       	adc	r27, r27
    3066:	a6 17       	cp	r26, r22
    3068:	b7 07       	cpc	r27, r23
    306a:	10 f0       	brcs	.+4      	; 0x3070 <__udivmodhi4_ep>
    306c:	a6 1b       	sub	r26, r22
    306e:	b7 0b       	sbc	r27, r23

00003070 <__udivmodhi4_ep>:
    3070:	88 1f       	adc	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	5a 95       	dec	r21
    3076:	a9 f7       	brne	.-22     	; 0x3062 <__udivmodhi4_loop>
    3078:	80 95       	com	r24
    307a:	90 95       	com	r25
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	08 95       	ret

00003082 <__divmodhi4>:
    3082:	97 fb       	bst	r25, 7
    3084:	09 2e       	mov	r0, r25
    3086:	07 26       	eor	r0, r23
    3088:	0a d0       	rcall	.+20     	; 0x309e <__divmodhi4_neg1>
    308a:	77 fd       	sbrc	r23, 7
    308c:	04 d0       	rcall	.+8      	; 0x3096 <__divmodhi4_neg2>
    308e:	e5 df       	rcall	.-54     	; 0x305a <__udivmodhi4>
    3090:	06 d0       	rcall	.+12     	; 0x309e <__divmodhi4_neg1>
    3092:	00 20       	and	r0, r0
    3094:	1a f4       	brpl	.+6      	; 0x309c <__divmodhi4_exit>

00003096 <__divmodhi4_neg2>:
    3096:	70 95       	com	r23
    3098:	61 95       	neg	r22
    309a:	7f 4f       	sbci	r23, 0xFF	; 255

0000309c <__divmodhi4_exit>:
    309c:	08 95       	ret

0000309e <__divmodhi4_neg1>:
    309e:	f6 f7       	brtc	.-4      	; 0x309c <__divmodhi4_exit>
    30a0:	90 95       	com	r25
    30a2:	81 95       	neg	r24
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	08 95       	ret

000030a8 <__prologue_saves__>:
    30a8:	2f 92       	push	r2
    30aa:	3f 92       	push	r3
    30ac:	4f 92       	push	r4
    30ae:	5f 92       	push	r5
    30b0:	6f 92       	push	r6
    30b2:	7f 92       	push	r7
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	ca 1b       	sub	r28, r26
    30d2:	db 0b       	sbc	r29, r27
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	09 94       	ijmp

000030e0 <__epilogue_restores__>:
    30e0:	2a 88       	ldd	r2, Y+18	; 0x12
    30e2:	39 88       	ldd	r3, Y+17	; 0x11
    30e4:	48 88       	ldd	r4, Y+16	; 0x10
    30e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    30e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30f2:	b9 84       	ldd	r11, Y+9	; 0x09
    30f4:	c8 84       	ldd	r12, Y+8	; 0x08
    30f6:	df 80       	ldd	r13, Y+7	; 0x07
    30f8:	ee 80       	ldd	r14, Y+6	; 0x06
    30fa:	fd 80       	ldd	r15, Y+5	; 0x05
    30fc:	0c 81       	ldd	r16, Y+4	; 0x04
    30fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3100:	aa 81       	ldd	r26, Y+2	; 0x02
    3102:	b9 81       	ldd	r27, Y+1	; 0x01
    3104:	ce 0f       	add	r28, r30
    3106:	d1 1d       	adc	r29, r1
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	ed 01       	movw	r28, r26
    3114:	08 95       	ret

00003116 <do_rand>:
    3116:	a0 e0       	ldi	r26, 0x00	; 0
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e1 e9       	ldi	r30, 0x91	; 145
    311c:	f8 e1       	ldi	r31, 0x18	; 24
    311e:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x10>
    3122:	ec 01       	movw	r28, r24
    3124:	a8 80       	ld	r10, Y
    3126:	b9 80       	ldd	r11, Y+1	; 0x01
    3128:	ca 80       	ldd	r12, Y+2	; 0x02
    312a:	db 80       	ldd	r13, Y+3	; 0x03
    312c:	a1 14       	cp	r10, r1
    312e:	b1 04       	cpc	r11, r1
    3130:	c1 04       	cpc	r12, r1
    3132:	d1 04       	cpc	r13, r1
    3134:	41 f4       	brne	.+16     	; 0x3146 <do_rand+0x30>
    3136:	84 e2       	ldi	r24, 0x24	; 36
    3138:	a8 2e       	mov	r10, r24
    313a:	89 ed       	ldi	r24, 0xD9	; 217
    313c:	b8 2e       	mov	r11, r24
    313e:	8b e5       	ldi	r24, 0x5B	; 91
    3140:	c8 2e       	mov	r12, r24
    3142:	87 e0       	ldi	r24, 0x07	; 7
    3144:	d8 2e       	mov	r13, r24
    3146:	c6 01       	movw	r24, r12
    3148:	b5 01       	movw	r22, r10
    314a:	2d e1       	ldi	r18, 0x1D	; 29
    314c:	33 ef       	ldi	r19, 0xF3	; 243
    314e:	41 e0       	ldi	r20, 0x01	; 1
    3150:	50 e0       	ldi	r21, 0x00	; 0
    3152:	0e 94 0b 19 	call	0x3216	; 0x3216 <__divmodsi4>
    3156:	27 ea       	ldi	r18, 0xA7	; 167
    3158:	31 e4       	ldi	r19, 0x41	; 65
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsi3>
    3162:	7b 01       	movw	r14, r22
    3164:	8c 01       	movw	r16, r24
    3166:	c6 01       	movw	r24, r12
    3168:	b5 01       	movw	r22, r10
    316a:	2d e1       	ldi	r18, 0x1D	; 29
    316c:	33 ef       	ldi	r19, 0xF3	; 243
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	0e 94 0b 19 	call	0x3216	; 0x3216 <__divmodsi4>
    3176:	ca 01       	movw	r24, r20
    3178:	b9 01       	movw	r22, r18
    317a:	2c ee       	ldi	r18, 0xEC	; 236
    317c:	34 ef       	ldi	r19, 0xF4	; 244
    317e:	4f ef       	ldi	r20, 0xFF	; 255
    3180:	5f ef       	ldi	r21, 0xFF	; 255
    3182:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__mulsi3>
    3186:	6e 0d       	add	r22, r14
    3188:	7f 1d       	adc	r23, r15
    318a:	80 1f       	adc	r24, r16
    318c:	91 1f       	adc	r25, r17
    318e:	97 ff       	sbrs	r25, 7
    3190:	04 c0       	rjmp	.+8      	; 0x319a <do_rand+0x84>
    3192:	61 50       	subi	r22, 0x01	; 1
    3194:	70 40       	sbci	r23, 0x00	; 0
    3196:	80 40       	sbci	r24, 0x00	; 0
    3198:	90 48       	sbci	r25, 0x80	; 128
    319a:	68 83       	st	Y, r22
    319c:	79 83       	std	Y+1, r23	; 0x01
    319e:	8a 83       	std	Y+2, r24	; 0x02
    31a0:	9b 83       	std	Y+3, r25	; 0x03
    31a2:	9b 01       	movw	r18, r22
    31a4:	3f 77       	andi	r19, 0x7F	; 127
    31a6:	c9 01       	movw	r24, r18
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	ea e0       	ldi	r30, 0x0A	; 10
    31ae:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x10>

000031b2 <rand_r>:
    31b2:	0e 94 8b 18 	call	0x3116	; 0x3116 <do_rand>
    31b6:	08 95       	ret

000031b8 <rand>:
    31b8:	84 e7       	ldi	r24, 0x74	; 116
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 8b 18 	call	0x3116	; 0x3116 <do_rand>
    31c0:	08 95       	ret

000031c2 <srand>:
    31c2:	a0 e0       	ldi	r26, 0x00	; 0
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	80 93 74 00 	sts	0x0074, r24
    31ca:	90 93 75 00 	sts	0x0075, r25
    31ce:	a0 93 76 00 	sts	0x0076, r26
    31d2:	b0 93 77 00 	sts	0x0077, r27
    31d6:	08 95       	ret

000031d8 <__mulsi3>:
    31d8:	62 9f       	mul	r22, r18
    31da:	d0 01       	movw	r26, r0
    31dc:	73 9f       	mul	r23, r19
    31de:	f0 01       	movw	r30, r0
    31e0:	82 9f       	mul	r24, r18
    31e2:	e0 0d       	add	r30, r0
    31e4:	f1 1d       	adc	r31, r1
    31e6:	64 9f       	mul	r22, r20
    31e8:	e0 0d       	add	r30, r0
    31ea:	f1 1d       	adc	r31, r1
    31ec:	92 9f       	mul	r25, r18
    31ee:	f0 0d       	add	r31, r0
    31f0:	83 9f       	mul	r24, r19
    31f2:	f0 0d       	add	r31, r0
    31f4:	74 9f       	mul	r23, r20
    31f6:	f0 0d       	add	r31, r0
    31f8:	65 9f       	mul	r22, r21
    31fa:	f0 0d       	add	r31, r0
    31fc:	99 27       	eor	r25, r25
    31fe:	72 9f       	mul	r23, r18
    3200:	b0 0d       	add	r27, r0
    3202:	e1 1d       	adc	r30, r1
    3204:	f9 1f       	adc	r31, r25
    3206:	63 9f       	mul	r22, r19
    3208:	b0 0d       	add	r27, r0
    320a:	e1 1d       	adc	r30, r1
    320c:	f9 1f       	adc	r31, r25
    320e:	bd 01       	movw	r22, r26
    3210:	cf 01       	movw	r24, r30
    3212:	11 24       	eor	r1, r1
    3214:	08 95       	ret

00003216 <__divmodsi4>:
    3216:	97 fb       	bst	r25, 7
    3218:	09 2e       	mov	r0, r25
    321a:	05 26       	eor	r0, r21
    321c:	0e d0       	rcall	.+28     	; 0x323a <__divmodsi4_neg1>
    321e:	57 fd       	sbrc	r21, 7
    3220:	04 d0       	rcall	.+8      	; 0x322a <__divmodsi4_neg2>
    3222:	14 d0       	rcall	.+40     	; 0x324c <__udivmodsi4>
    3224:	0a d0       	rcall	.+20     	; 0x323a <__divmodsi4_neg1>
    3226:	00 1c       	adc	r0, r0
    3228:	38 f4       	brcc	.+14     	; 0x3238 <__divmodsi4_exit>

0000322a <__divmodsi4_neg2>:
    322a:	50 95       	com	r21
    322c:	40 95       	com	r20
    322e:	30 95       	com	r19
    3230:	21 95       	neg	r18
    3232:	3f 4f       	sbci	r19, 0xFF	; 255
    3234:	4f 4f       	sbci	r20, 0xFF	; 255
    3236:	5f 4f       	sbci	r21, 0xFF	; 255

00003238 <__divmodsi4_exit>:
    3238:	08 95       	ret

0000323a <__divmodsi4_neg1>:
    323a:	f6 f7       	brtc	.-4      	; 0x3238 <__divmodsi4_exit>
    323c:	90 95       	com	r25
    323e:	80 95       	com	r24
    3240:	70 95       	com	r23
    3242:	61 95       	neg	r22
    3244:	7f 4f       	sbci	r23, 0xFF	; 255
    3246:	8f 4f       	sbci	r24, 0xFF	; 255
    3248:	9f 4f       	sbci	r25, 0xFF	; 255
    324a:	08 95       	ret

0000324c <__udivmodsi4>:
    324c:	a1 e2       	ldi	r26, 0x21	; 33
    324e:	1a 2e       	mov	r1, r26
    3250:	aa 1b       	sub	r26, r26
    3252:	bb 1b       	sub	r27, r27
    3254:	fd 01       	movw	r30, r26
    3256:	0d c0       	rjmp	.+26     	; 0x3272 <__udivmodsi4_ep>

00003258 <__udivmodsi4_loop>:
    3258:	aa 1f       	adc	r26, r26
    325a:	bb 1f       	adc	r27, r27
    325c:	ee 1f       	adc	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	a2 17       	cp	r26, r18
    3262:	b3 07       	cpc	r27, r19
    3264:	e4 07       	cpc	r30, r20
    3266:	f5 07       	cpc	r31, r21
    3268:	20 f0       	brcs	.+8      	; 0x3272 <__udivmodsi4_ep>
    326a:	a2 1b       	sub	r26, r18
    326c:	b3 0b       	sbc	r27, r19
    326e:	e4 0b       	sbc	r30, r20
    3270:	f5 0b       	sbc	r31, r21

00003272 <__udivmodsi4_ep>:
    3272:	66 1f       	adc	r22, r22
    3274:	77 1f       	adc	r23, r23
    3276:	88 1f       	adc	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	1a 94       	dec	r1
    327c:	69 f7       	brne	.-38     	; 0x3258 <__udivmodsi4_loop>
    327e:	60 95       	com	r22
    3280:	70 95       	com	r23
    3282:	80 95       	com	r24
    3284:	90 95       	com	r25
    3286:	9b 01       	movw	r18, r22
    3288:	ac 01       	movw	r20, r24
    328a:	bd 01       	movw	r22, r26
    328c:	cf 01       	movw	r24, r30
    328e:	08 95       	ret

00003290 <_exit>:
    3290:	f8 94       	cli

00003292 <__stop_program>:
    3292:	ff cf       	rjmp	.-2      	; 0x3292 <__stop_program>
