
PING_PONG_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00003e76  00003eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002b2c  00000000  00000000  00003ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b37  00000000  00000000  00006a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00007557  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000076b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00007846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000988b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a98c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ba90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000bd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_1>
       8:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_2>
       c:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_3>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cc 12 	call	0x2598	; 0x2598 <main>
      7a:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 2e 1f 	jmp	0x3e5c	; 0x3e5c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_VidSetPinDirection>:
#include"../LIB/STD_TYPES.h"
#include"../LIB/BIT_MATH.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	27 97       	sbiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <DIO_VidSetPinDirection+0x22>
     cae:	6f c0       	rjmp	.+222    	; 0xd8e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3f 83       	std	Y+7, r19	; 0x07
     cb8:	2e 83       	std	Y+6, r18	; 0x06
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	49 f1       	breq	.+82     	; 0xd16 <DIO_VidSetPinDirection+0x88>
     cc4:	2e 81       	ldd	r18, Y+6	; 0x06
     cc6:	3f 81       	ldd	r19, Y+7	; 0x07
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <DIO_VidSetPinDirection+0x4a>
     cce:	8e 81       	ldd	r24, Y+6	; 0x06
     cd0:	9f 81       	ldd	r25, Y+7	; 0x07
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <DIO_VidSetPinDirection+0x60>
     cd6:	d2 c0       	rjmp	.+420    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
     cd8:	2e 81       	ldd	r18, Y+6	; 0x06
     cda:	3f 81       	ldd	r19, Y+7	; 0x07
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	71 f1       	breq	.+92     	; 0xd3e <DIO_VidSetPinDirection+0xb0>
     ce2:	8e 81       	ldd	r24, Y+6	; 0x06
     ce4:	9f 81       	ldd	r25, Y+7	; 0x07
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	e9 f1       	breq	.+122    	; 0xd66 <DIO_VidSetPinDirection+0xd8>
     cec:	c7 c0       	rjmp	.+398    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_VidSetPinDirection+0x7e>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_VidSetPinDirection+0x7a>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	b3 c0       	rjmp	.+358    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_VidSetPinDirection+0xa6>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_VidSetPinDirection+0xa2>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	9f c0       	rjmp	.+318    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_VidSetPinDirection+0xce>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_VidSetPinDirection+0xca>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	8b c0       	rjmp	.+278    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_VidSetPinDirection+0xf6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_VidSetPinDirection+0xf2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	77 c0       	rjmp	.+238    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_VidSetPinDirection+0x108>
     d94:	73 c0       	rjmp	.+230    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <DIO_VidSetPinDirection+0x172>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_VidSetPinDirection+0x130>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <DIO_VidSetPinDirection+0x148>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <DIO_VidSetPinDirection+0x19c>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_VidSetPinDirection+0x146>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <DIO_VidSetPinDirection+0x1c6>
     dd4:	53 c0       	rjmp	.+166    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_VidSetPinDirection+0x166>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_VidSetPinDirection+0x162>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	3e c0       	rjmp	.+124    	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
     e00:	a7 e3       	ldi	r26, 0x37	; 55
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e7 e3       	ldi	r30, 0x37	; 55
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_VidSetPinDirection+0x190>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_VidSetPinDirection+0x18c>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	29 c0       	rjmp	.+82     	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_VidSetPinDirection+0x1ba>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_VidSetPinDirection+0x1b6>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_VidSetPinDirection+0x1e4>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_VidSetPinDirection+0x1e0>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
     e7c:	27 96       	adiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_VidSetPortDirection+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_VidSetPortDirection+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3c 83       	std	Y+4, r19	; 0x04
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	d1 f0       	breq	.+52     	; 0xee6 <DIO_VidSetPortDirection+0x58>
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	2c f4       	brge	.+10     	; 0xec6 <DIO_VidSetPortDirection+0x38>
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	61 f0       	breq	.+24     	; 0xedc <DIO_VidSetPortDirection+0x4e>
     ec4:	1e c0       	rjmp	.+60     	; 0xf02 <DIO_VidSetPortDirection+0x74>
     ec6:	2b 81       	ldd	r18, Y+3	; 0x03
     ec8:	3c 81       	ldd	r19, Y+4	; 0x04
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	81 f0       	breq	.+32     	; 0xef0 <DIO_VidSetPortDirection+0x62>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	81 f0       	breq	.+32     	; 0xefa <DIO_VidSetPortDirection+0x6c>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	80 83       	st	Z, r24
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
     ee6:	e7 e3       	ldi	r30, 0x37	; 55
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 83       	st	Z, r24
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	27 97       	sbiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
     f28:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <DIO_VidSetPinValue+0x22>
     f30:	6f c0       	rjmp	.+222    	; 0x1010 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3f 83       	std	Y+7, r19	; 0x07
     f3a:	2e 83       	std	Y+6, r18	; 0x06
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	49 f1       	breq	.+82     	; 0xf98 <DIO_VidSetPinValue+0x88>
     f46:	2e 81       	ldd	r18, Y+6	; 0x06
     f48:	3f 81       	ldd	r19, Y+7	; 0x07
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	2c f4       	brge	.+10     	; 0xf5a <DIO_VidSetPinValue+0x4a>
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	9f 81       	ldd	r25, Y+7	; 0x07
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	61 f0       	breq	.+24     	; 0xf70 <DIO_VidSetPinValue+0x60>
     f58:	d2 c0       	rjmp	.+420    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
     f5a:	2e 81       	ldd	r18, Y+6	; 0x06
     f5c:	3f 81       	ldd	r19, Y+7	; 0x07
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	71 f1       	breq	.+92     	; 0xfc0 <DIO_VidSetPinValue+0xb0>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	e9 f1       	breq	.+122    	; 0xfe8 <DIO_VidSetPinValue+0xd8>
     f6e:	c7 c0       	rjmp	.+398    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VidSetPinValue+0x7e>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VidSetPinValue+0x7a>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	b3 c0       	rjmp	.+358    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_VidSetPinValue+0xa6>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_VidSetPinValue+0xa2>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	9f c0       	rjmp	.+318    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
     fc0:	a5 e3       	ldi	r26, 0x35	; 53
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_VidSetPinValue+0xce>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_VidSetPinValue+0xca>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	8b c0       	rjmp	.+278    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
     fe8:	a2 e3       	ldi	r26, 0x32	; 50
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_VidSetPinValue+0xf6>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_VidSetPinValue+0xf2>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	77 c0       	rjmp	.+238    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 23       	and	r24, r24
    1014:	09 f0       	breq	.+2      	; 0x1018 <DIO_VidSetPinValue+0x108>
    1016:	73 c0       	rjmp	.+230    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	59 f1       	breq	.+86     	; 0x1082 <DIO_VidSetPinValue+0x172>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	2c f4       	brge	.+10     	; 0x1040 <DIO_VidSetPinValue+0x130>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	69 f0       	breq	.+26     	; 0x1058 <DIO_VidSetPinValue+0x148>
    103e:	5f c0       	rjmp	.+190    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
    1040:	2c 81       	ldd	r18, Y+4	; 0x04
    1042:	3d 81       	ldd	r19, Y+5	; 0x05
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	31 05       	cpc	r19, r1
    1048:	89 f1       	breq	.+98     	; 0x10ac <DIO_VidSetPinValue+0x19c>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_VidSetPinValue+0x146>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <DIO_VidSetPinValue+0x1c6>
    1056:	53 c0       	rjmp	.+166    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_VidSetPinValue+0x166>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_VidSetPinValue+0x162>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	3e c0       	rjmp	.+124    	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1082:	a8 e3       	ldi	r26, 0x38	; 56
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e3       	ldi	r30, 0x38	; 56
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_VidSetPinValue+0x190>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_VidSetPinValue+0x18c>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_VidSetPinValue+0x1ba>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_VidSetPinValue+0x1b6>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_VidSetPinValue+0x1e4>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_VidSetPinValue+0x1e0>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    10fe:	27 96       	adiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_VidSetPortValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_VidSetPortValue+0x8>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <DIO_VidSetPortValue+0x58>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <DIO_VidSetPortValue+0x38>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <DIO_VidSetPortValue+0x4e>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <DIO_VidSetPortValue+0x74>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <DIO_VidSetPortValue+0x62>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <DIO_VidSetPortValue+0x6c>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1172:	e5 e3       	ldi	r30, 0x35	; 53
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_VidTogglePinValue+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <DIO_VidTogglePinValue+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3c 83       	std	Y+4, r19	; 0x04
    11aa:	2b 83       	std	Y+3, r18	; 0x03
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	49 f1       	breq	.+82     	; 0x1208 <DIO_VidTogglePinValue+0x76>
    11b6:	2b 81       	ldd	r18, Y+3	; 0x03
    11b8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <DIO_VidTogglePinValue+0x38>
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <DIO_VidTogglePinValue+0x4e>
    11c8:	5a c0       	rjmp	.+180    	; 0x127e <DIO_VidTogglePinValue+0xec>
    11ca:	2b 81       	ldd	r18, Y+3	; 0x03
    11cc:	3c 81       	ldd	r19, Y+4	; 0x04
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	71 f1       	breq	.+92     	; 0x1230 <DIO_VidTogglePinValue+0x9e>
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	e9 f1       	breq	.+122    	; 0x1258 <DIO_VidTogglePinValue+0xc6>
    11de:	4f c0       	rjmp	.+158    	; 0x127e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_VidTogglePinValue+0x6c>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_VidTogglePinValue+0x68>
    1202:	84 27       	eor	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	3b c0       	rjmp	.+118    	; 0x127e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_VidTogglePinValue+0x94>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_VidTogglePinValue+0x90>
    122a:	84 27       	eor	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	27 c0       	rjmp	.+78     	; 0x127e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_VidTogglePinValue+0xbc>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_VidTogglePinValue+0xb8>
    1252:	84 27       	eor	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	13 c0       	rjmp	.+38     	; 0x127e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_VidTogglePinValue+0xe4>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_VidTogglePinValue+0xe0>
    127a:	84 27       	eor	r24, r20
    127c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_U8GetPinValue+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_U8GetPinValue+0x8>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_U8GetPinValue+0xa>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	4c 81       	ldd	r20, Y+4	; 0x04
    12aa:	5d 81       	ldd	r21, Y+5	; 0x05
    12ac:	41 30       	cpi	r20, 0x01	; 1
    12ae:	51 05       	cpc	r21, r1
    12b0:	49 f1       	breq	.+82     	; 0x1304 <DIO_U8GetPinValue+0x78>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	91 05       	cpc	r25, r1
    12ba:	34 f4       	brge	.+12     	; 0x12c8 <DIO_U8GetPinValue+0x3c>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	21 15       	cp	r18, r1
    12c2:	31 05       	cpc	r19, r1
    12c4:	61 f0       	breq	.+24     	; 0x12de <DIO_U8GetPinValue+0x52>
    12c6:	57 c0       	rjmp	.+174    	; 0x1376 <DIO_U8GetPinValue+0xea>
    12c8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ca:	5d 81       	ldd	r21, Y+5	; 0x05
    12cc:	42 30       	cpi	r20, 0x02	; 2
    12ce:	51 05       	cpc	r21, r1
    12d0:	61 f1       	breq	.+88     	; 0x132a <DIO_U8GetPinValue+0x9e>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	d1 f1       	breq	.+116    	; 0x1350 <DIO_U8GetPinValue+0xc4>
    12dc:	4c c0       	rjmp	.+152    	; 0x1376 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    12de:	e9 e3       	ldi	r30, 0x39	; 57
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_U8GetPinValue+0x6a>
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_U8GetPinValue+0x66>
    12fa:	ca 01       	movw	r24, r20
    12fc:	58 2f       	mov	r21, r24
    12fe:	51 70       	andi	r21, 0x01	; 1
    1300:	5b 83       	std	Y+3, r21	; 0x03
    1302:	3a c0       	rjmp	.+116    	; 0x1378 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    1304:	e6 e3       	ldi	r30, 0x36	; 54
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_U8GetPinValue+0x90>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_U8GetPinValue+0x8c>
    1320:	ca 01       	movw	r24, r20
    1322:	58 2f       	mov	r21, r24
    1324:	51 70       	andi	r21, 0x01	; 1
    1326:	5b 83       	std	Y+3, r21	; 0x03
    1328:	27 c0       	rjmp	.+78     	; 0x1378 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    132a:	e3 e3       	ldi	r30, 0x33	; 51
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_U8GetPinValue+0xb6>
    133e:	55 95       	asr	r21
    1340:	47 95       	ror	r20
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_U8GetPinValue+0xb2>
    1346:	ca 01       	movw	r24, r20
    1348:	58 2f       	mov	r21, r24
    134a:	51 70       	andi	r21, 0x01	; 1
    134c:	5b 83       	std	Y+3, r21	; 0x03
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    1350:	e0 e3       	ldi	r30, 0x30	; 48
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_U8GetPinValue+0xdc>
    1364:	55 95       	asr	r21
    1366:	47 95       	ror	r20
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_U8GetPinValue+0xd8>
    136c:	ca 01       	movw	r24, r20
    136e:	58 2f       	mov	r21, r24
    1370:	51 70       	andi	r21, 0x01	; 1
    1372:	5b 83       	std	Y+3, r21	; 0x03
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <DIO_U8GetPinValue+0xec>
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	8e 83       	std	Y+6, r24	; 0x06
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	26 96       	adiw	r28, 0x06	; 6
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <INT_VidINIT>:
#define ping_paddle_right 1

u8 Global_row = 1 ;

/**********************************************************/
void INT_VidINIT(void){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    	SET_BIT(MCUCR,ISC00);
    	CLR_BIT(MCUCR,ISC01);
    }
    else if (INT0_FALLING){
		//INT0 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	62 e0       	ldi	r22, 0x02	; 2
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC00);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8e 7f       	andi	r24, 0xFE	; 254
    13b8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	8c 93       	st	X, r24
    	SET_BIT(MCUCR,ISC10);
    	CLR_BIT(MCUCR,ISC11);
    }
    else if (INT1_FALLING){
		//INT1 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	63 e0       	ldi	r22, 0x03	; 3
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC10);
    13dc:	a5 e5       	ldi	r26, 0x55	; 85
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e5       	ldi	r30, 0x55	; 85
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8b 7f       	andi	r24, 0xFB	; 251
    13e8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    13ea:	a5 e5       	ldi	r26, 0x55	; 85
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e5       	ldi	r30, 0x55	; 85
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	8c 93       	st	X, r24
    }
#endif

#ifdef INT2      //to define edge of interrupt 2
    if (INT2_FALLING){
        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
		CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    140c:	a4 e5       	ldi	r26, 0x54	; 84
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e4 e5       	ldi	r30, 0x54	; 84
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	8c 93       	st	X, r24
    else if (INT2_RASING) {
    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    }
#endif

}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <GIE_VidEnable>:

/**********************************************************/
void GIE_VidEnable (void){
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    1428:	af e5       	ldi	r26, 0x5F	; 95
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ef e5       	ldi	r30, 0x5F	; 95
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 68       	ori	r24, 0x80	; 128
    1434:	8c 93       	st	X, r24
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <GIE_VidDisable>:

void GIE_VidDisable (void){
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    1444:	af e5       	ldi	r26, 0x5F	; 95
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ef e5       	ldi	r30, 0x5F	; 95
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 77       	andi	r24, 0x7F	; 127
    1450:	8c 93       	st	X, r24
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <PIE_VidEnable>:

/**********************************************************/
void PIE_VidEnable(u8 COPY_U8INT_NUM){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	00 d0       	rcall	.+0      	; 0x145e <PIE_VidEnable+0x6>
    145e:	0f 92       	push	r0
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3b 83       	std	Y+3, r19	; 0x03
    146e:	2a 83       	std	Y+2, r18	; 0x02
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	89 f0       	breq	.+34     	; 0x149c <PIE_VidEnable+0x44>
    147a:	2a 81       	ldd	r18, Y+2	; 0x02
    147c:	3b 81       	ldd	r19, Y+3	; 0x03
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	a1 f0       	breq	.+40     	; 0x14ac <PIE_VidEnable+0x54>
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	b9 f4       	brne	.+46     	; 0x14ba <PIE_VidEnable+0x62>
	case 0 : SET_BIT(GICR,INT0);  break ;   //INT0 Enable
    148c:	ab e5       	ldi	r26, 0x5B	; 91
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	eb e5       	ldi	r30, 0x5B	; 91
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 64       	ori	r24, 0x40	; 64
    1498:	8c 93       	st	X, r24
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <PIE_VidEnable+0x62>
	case 1 : SET_BIT(GICR,INT1);  break ;   //INT1 Enable
    149c:	ab e5       	ldi	r26, 0x5B	; 91
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	eb e5       	ldi	r30, 0x5B	; 91
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	80 68       	ori	r24, 0x80	; 128
    14a8:	8c 93       	st	X, r24
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <PIE_VidEnable+0x62>
	case 2 : SET_BIT(GICR,INT2);  break ;   //INT2 Enable
    14ac:	ab e5       	ldi	r26, 0x5B	; 91
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	eb e5       	ldi	r30, 0x5B	; 91
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 62       	ori	r24, 0x20	; 32
    14b8:	8c 93       	st	X, r24
	}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <PIE_VidDisable>:

void PIE_VidDisable(u8 COPY_U8INT_NUM){
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <PIE_VidDisable+0x6>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3b 83       	std	Y+3, r19	; 0x03
    14dc:	2a 83       	std	Y+2, r18	; 0x02
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	89 f0       	breq	.+34     	; 0x150a <PIE_VidDisable+0x44>
    14e8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ea:	3b 81       	ldd	r19, Y+3	; 0x03
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	a1 f0       	breq	.+40     	; 0x151a <PIE_VidDisable+0x54>
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	b9 f4       	brne	.+46     	; 0x1528 <PIE_VidDisable+0x62>
	case 0 : CLR_BIT(GICR,INT0);  break ;   //INT0 Enable
    14fa:	ab e5       	ldi	r26, 0x5B	; 91
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e5       	ldi	r30, 0x5B	; 91
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8f 7b       	andi	r24, 0xBF	; 191
    1506:	8c 93       	st	X, r24
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <PIE_VidDisable+0x62>
	case 1 : CLR_BIT(GICR,INT1);  break ;   //INT1 Enable
    150a:	ab e5       	ldi	r26, 0x5B	; 91
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e5       	ldi	r30, 0x5B	; 91
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 77       	andi	r24, 0x7F	; 127
    1516:	8c 93       	st	X, r24
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <PIE_VidDisable+0x62>
	case 2 : CLR_BIT(GICR,INT2);  break ;   //INT2 Enable
    151a:	ab e5       	ldi	r26, 0x5B	; 91
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	eb e5       	ldi	r30, 0x5B	; 91
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 7d       	andi	r24, 0xDF	; 223
    1526:	8c 93       	st	X, r24
	}
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <__vector_1>:

/**********************************************************/
void __vector_1(void){
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	//to show right ping paddle in beginning
	LCD_VidPosCur(Global_row%2,last_col);
    155e:	80 91 68 00 	lds	r24, 0x0068
    1562:	81 70       	andi	r24, 0x01	; 1
    1564:	6f e0       	ldi	r22, 0x0F	; 15
    1566:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
	LCD_VidSendChar(ping_paddle_right);
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

	Global_row++;
    1570:	80 91 68 00 	lds	r24, 0x0068
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	80 93 68 00 	sts	0x0068, r24

	//to clear cell
	LCD_VidPosCur(Global_row%2 ,last_col);
    157a:	80 91 68 00 	lds	r24, 0x0068
    157e:	81 70       	andi	r24, 0x01	; 1
    1580:	6f e0       	ldi	r22, 0x0F	; 15
    1582:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
	LCD_VidSendChar(' ');
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_2>:

void __vector_2(void){
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62

}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <__vector_3>:

void __vector_3(void){
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62

}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <LCD_VidSendCommend>:
#include"LCD_cfg.h"
#include"LCD_private.h" 
#include<avr/delay.h>


void LCD_VidSendCommend(u8 Copy_U8Commend){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	6d 97       	sbiw	r28, 0x1d	; 29
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	DIO_VidSetPinValue(CONTROL_PORT,RS,LOW);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
/******to out the value of commend on data port *****/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Commend);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1616:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VidSetPortValue>
/*************to make pulse for enable **************/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e8       	ldi	r26, 0x80	; 128
    162a:	bf e3       	ldi	r27, 0x3F	; 63
    162c:	89 8f       	std	Y+25, r24	; 0x19
    162e:	9a 8f       	std	Y+26, r25	; 0x1a
    1630:	ab 8f       	std	Y+27, r26	; 0x1b
    1632:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	69 8d       	ldd	r22, Y+25	; 0x19
    1636:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1638:	8b 8d       	ldd	r24, Y+27	; 0x1b
    163a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a ef       	ldi	r20, 0xFA	; 250
    1642:	54 e4       	ldi	r21, 0x44	; 68
    1644:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	8d 8b       	std	Y+21, r24	; 0x15
    164e:	9e 8b       	std	Y+22, r25	; 0x16
    1650:	af 8b       	std	Y+23, r26	; 0x17
    1652:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1654:	6d 89       	ldd	r22, Y+21	; 0x15
    1656:	7e 89       	ldd	r23, Y+22	; 0x16
    1658:	8f 89       	ldd	r24, Y+23	; 0x17
    165a:	98 8d       	ldd	r25, Y+24	; 0x18
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <LCD_VidSendCommend+0x84>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 8b       	std	Y+20, r25	; 0x14
    1672:	8b 8b       	std	Y+19, r24	; 0x13
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <LCD_VidSendCommend+0x102>
	else if (__tmp > 65535)
    1676:	6d 89       	ldd	r22, Y+21	; 0x15
    1678:	7e 89       	ldd	r23, Y+22	; 0x16
    167a:	8f 89       	ldd	r24, Y+23	; 0x17
    167c:	98 8d       	ldd	r25, Y+24	; 0x18
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <LCD_VidSendCommend+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	69 8d       	ldd	r22, Y+25	; 0x19
    1690:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1692:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1694:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <LCD_VidSendCommend+0xe4>
    16b8:	88 ec       	ldi	r24, 0xC8	; 200
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9a 8b       	std	Y+18, r25	; 0x12
    16be:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c0:	89 89       	ldd	r24, Y+17	; 0x11
    16c2:	9a 89       	ldd	r25, Y+18	; 0x12
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_VidSendCommend+0xd2>
    16c8:	9a 8b       	std	Y+18, r25	; 0x12
    16ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8b 89       	ldd	r24, Y+19	; 0x13
    16ce:	9c 89       	ldd	r25, Y+20	; 0x14
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	9c 8b       	std	Y+20, r25	; 0x14
    16d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8b 89       	ldd	r24, Y+19	; 0x13
    16d8:	9c 89       	ldd	r25, Y+20	; 0x14
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <LCD_VidSendCommend+0xc6>
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <LCD_VidSendCommend+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	6d 89       	ldd	r22, Y+21	; 0x15
    16e2:	7e 89       	ldd	r23, Y+22	; 0x16
    16e4:	8f 89       	ldd	r24, Y+23	; 0x17
    16e6:	98 8d       	ldd	r25, Y+24	; 0x18
    16e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9c 8b       	std	Y+20, r25	; 0x14
    16f2:	8b 8b       	std	Y+19, r24	; 0x13
    16f4:	8b 89       	ldd	r24, Y+19	; 0x13
    16f6:	9c 89       	ldd	r25, Y+20	; 0x14
    16f8:	98 8b       	std	Y+16, r25	; 0x10
    16fa:	8f 87       	std	Y+15, r24	; 0x0f
    16fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fe:	98 89       	ldd	r25, Y+16	; 0x10
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_VidSendCommend+0x10e>
    1704:	98 8b       	std	Y+16, r25	; 0x10
    1706:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e4       	ldi	r27, 0x40	; 64
    171a:	8b 87       	std	Y+11, r24	; 0x0b
    171c:	9c 87       	std	Y+12, r25	; 0x0c
    171e:	ad 87       	std	Y+13, r26	; 0x0d
    1720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6b 85       	ldd	r22, Y+11	; 0x0b
    1724:	7c 85       	ldd	r23, Y+12	; 0x0c
    1726:	8d 85       	ldd	r24, Y+13	; 0x0d
    1728:	9e 85       	ldd	r25, Y+14	; 0x0e
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8f 83       	std	Y+7, r24	; 0x07
    173c:	98 87       	std	Y+8, r25	; 0x08
    173e:	a9 87       	std	Y+9, r26	; 0x09
    1740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <LCD_VidSendCommend+0x172>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <LCD_VidSendCommend+0x1f0>
	else if (__tmp > 65535)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <LCD_VidSendCommend+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <LCD_VidSendCommend+0x1d2>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_VidSendCommend+0x1c0>
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <LCD_VidSendCommend+0x1b4>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <LCD_VidSendCommend+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e 83       	std	Y+6, r25	; 0x06
    17e0:	8d 83       	std	Y+5, r24	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_VidSendCommend+0x1fc>
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
	_delay_ms(2);

#endif
}
    17f6:	6d 96       	adiw	r28, 0x1d	; 29
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <LCD_VidInit>:



void LCD_VidInit (void) {
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	c4 56       	subi	r28, 0x64	; 100
    1816:	d0 40       	sbci	r29, 0x00	; 0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61

#ifdef EIGHT_BIT

/****to define CONTROL PORT as OUTPUT PINS******/
	DIO_VidSetPinDirection(CONTROL_PORT,RS,HIGH);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,E,HIGH);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
/****to define DATA PORT as OUTPUT PINS********/
	DIO_VidSetPortDirection(DATA_PORT,0xff);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	6f ef       	ldi	r22, 0xFF	; 255
    183a:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_VidSetPortDirection>
    183e:	fe 01       	movw	r30, r28
    1840:	ef 59       	subi	r30, 0x9F	; 159
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e2       	ldi	r26, 0x20	; 32
    184a:	b2 e4       	ldi	r27, 0x42	; 66
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	8e 01       	movw	r16, r28
    1856:	03 5a       	subi	r16, 0xA3	; 163
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	fe 01       	movw	r30, r28
    185c:	ef 59       	subi	r30, 0x9F	; 159
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	f8 01       	movw	r30, r16
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1882:	fe 01       	movw	r30, r28
    1884:	e3 5a       	subi	r30, 0xA3	; 163
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	44 f4       	brge	.+16     	; 0x18b0 <LCD_VidInit+0xa8>
		__ticks = 1;
    18a0:	fe 01       	movw	r30, r28
    18a2:	e5 5a       	subi	r30, 0xA5	; 165
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	64 c0       	rjmp	.+200    	; 0x1978 <LCD_VidInit+0x170>
	else if (__tmp > 65535)
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 5a       	subi	r30, 0xA3	; 163
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <LCD_VidInit+0xc8>
    18ce:	43 c0       	rjmp	.+134    	; 0x1956 <LCD_VidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	fe 01       	movw	r30, r28
    18d2:	ef 59       	subi	r30, 0x9F	; 159
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8e 01       	movw	r16, r28
    18f0:	05 5a       	subi	r16, 0xA5	; 165
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	f8 01       	movw	r30, r16
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	1f c0       	rjmp	.+62     	; 0x1946 <LCD_VidInit+0x13e>
    1908:	fe 01       	movw	r30, r28
    190a:	e7 5a       	subi	r30, 0xA7	; 167
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
    1916:	fe 01       	movw	r30, r28
    1918:	e7 5a       	subi	r30, 0xA7	; 167
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_VidInit+0x118>
    1924:	fe 01       	movw	r30, r28
    1926:	e7 5a       	subi	r30, 0xA7	; 167
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	de 01       	movw	r26, r28
    1930:	a5 5a       	subi	r26, 0xA5	; 165
    1932:	bf 4f       	sbci	r27, 0xFF	; 255
    1934:	fe 01       	movw	r30, r28
    1936:	e5 5a       	subi	r30, 0xA5	; 165
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	11 96       	adiw	r26, 0x01	; 1
    1942:	9c 93       	st	X, r25
    1944:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	fe 01       	movw	r30, r28
    1948:	e5 5a       	subi	r30, 0xA5	; 165
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	d1 f6       	brne	.-76     	; 0x1908 <LCD_VidInit+0x100>
    1954:	27 c0       	rjmp	.+78     	; 0x19a4 <LCD_VidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	8e 01       	movw	r16, r28
    1958:	05 5a       	subi	r16, 0xA5	; 165
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	e3 5a       	subi	r30, 0xA3	; 163
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	f8 01       	movw	r30, r16
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	de 01       	movw	r26, r28
    197a:	a9 5a       	subi	r26, 0xA9	; 169
    197c:	bf 4f       	sbci	r27, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e5 5a       	subi	r30, 0xA5	; 165
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	8d 93       	st	X+, r24
    198a:	9c 93       	st	X, r25
    198c:	fe 01       	movw	r30, r28
    198e:	e9 5a       	subi	r30, 0xA9	; 169
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_VidInit+0x18e>
    199a:	fe 01       	movw	r30, r28
    199c:	e9 5a       	subi	r30, 0xA9	; 169
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
/******to initialize LCD after power***********/
	_delay_ms(40);
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
    19a4:	8c e3       	ldi	r24, 0x3C	; 60
    19a6:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
    19aa:	fe 01       	movw	r30, r28
    19ac:	ed 5a       	subi	r30, 0xAD	; 173
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e2       	ldi	r26, 0x20	; 32
    19b6:	b2 e4       	ldi	r27, 0x42	; 66
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19c0:	8e 01       	movw	r16, r28
    19c2:	01 5b       	subi	r16, 0xB1	; 177
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	ed 5a       	subi	r30, 0xAD	; 173
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	2b ea       	ldi	r18, 0xAB	; 171
    19d6:	3a ea       	ldi	r19, 0xAA	; 170
    19d8:	4a e2       	ldi	r20, 0x2A	; 42
    19da:	50 e4       	ldi	r21, 0x40	; 64
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ee:	fe 01       	movw	r30, r28
    19f0:	e1 5b       	subi	r30, 0xB1	; 177
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	34 f4       	brge	.+12     	; 0x1a18 <LCD_VidInit+0x210>
		__ticks = 1;
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e2 5b       	subi	r30, 0xB2	; 178
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 83       	st	Z, r24
    1a16:	e0 c0       	rjmp	.+448    	; 0x1bd8 <LCD_VidInit+0x3d0>
	else if (__tmp > 255)
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e1 5b       	subi	r30, 0xB1	; 177
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4f e7       	ldi	r20, 0x7F	; 127
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a32:	18 16       	cp	r1, r24
    1a34:	0c f0       	brlt	.+2      	; 0x1a38 <LCD_VidInit+0x230>
    1a36:	c0 c0       	rjmp	.+384    	; 0x1bb8 <LCD_VidInit+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ed 5a       	subi	r30, 0xAD	; 173
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a e7       	ldi	r20, 0x7A	; 122
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	fe 01       	movw	r30, r28
    1a58:	e6 5b       	subi	r30, 0xB6	; 182
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 83       	st	Z, r24
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	a2 83       	std	Z+2, r26	; 0x02
    1a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	8e 01       	movw	r16, r28
    1a66:	0a 5b       	subi	r16, 0xBA	; 186
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e6 5b       	subi	r30, 0xB6	; 182
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a ef       	ldi	r20, 0xFA	; 250
    1a7e:	54 e4       	ldi	r21, 0x44	; 68
    1a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	f8 01       	movw	r30, r16
    1a8a:	80 83       	st	Z, r24
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	a2 83       	std	Z+2, r26	; 0x02
    1a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a92:	fe 01       	movw	r30, r28
    1a94:	ea 5b       	subi	r30, 0xBA	; 186
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	44 f4       	brge	.+16     	; 0x1ac0 <LCD_VidInit+0x2b8>
		__ticks = 1;
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ec 5b       	subi	r30, 0xBC	; 188
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
    1abe:	64 c0       	rjmp	.+200    	; 0x1b88 <LCD_VidInit+0x380>
	else if (__tmp > 65535)
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ea 5b       	subi	r30, 0xBA	; 186
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	0c f0       	brlt	.+2      	; 0x1ae0 <LCD_VidInit+0x2d8>
    1ade:	43 c0       	rjmp	.+134    	; 0x1b66 <LCD_VidInit+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e6 5b       	subi	r30, 0xB6	; 182
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8e 01       	movw	r16, r28
    1b00:	0c 5b       	subi	r16, 0xBC	; 188
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	bc 01       	movw	r22, r24
    1b06:	cd 01       	movw	r24, r26
    1b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	1f c0       	rjmp	.+62     	; 0x1b56 <LCD_VidInit+0x34e>
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ee 5b       	subi	r30, 0xBE	; 190
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
    1b26:	fe 01       	movw	r30, r28
    1b28:	ee 5b       	subi	r30, 0xBE	; 190
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_VidInit+0x328>
    1b34:	fe 01       	movw	r30, r28
    1b36:	ee 5b       	subi	r30, 0xBE	; 190
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	de 01       	movw	r26, r28
    1b40:	ac 5b       	subi	r26, 0xBC	; 188
    1b42:	bf 4f       	sbci	r27, 0xFF	; 255
    1b44:	fe 01       	movw	r30, r28
    1b46:	ec 5b       	subi	r30, 0xBC	; 188
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	11 96       	adiw	r26, 0x01	; 1
    1b52:	9c 93       	st	X, r25
    1b54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	fe 01       	movw	r30, r28
    1b58:	ec 5b       	subi	r30, 0xBC	; 188
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	d1 f6       	brne	.-76     	; 0x1b18 <LCD_VidInit+0x310>
    1b64:	42 c0       	rjmp	.+132    	; 0x1bea <LCD_VidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	8e 01       	movw	r16, r28
    1b68:	0c 5b       	subi	r16, 0xBC	; 188
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ea 5b       	subi	r30, 0xBA	; 186
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	f8 01       	movw	r30, r16
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
    1b88:	de 01       	movw	r26, r28
    1b8a:	a0 5c       	subi	r26, 0xC0	; 192
    1b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ec 5b       	subi	r30, 0xBC	; 188
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	11 96       	adiw	r26, 0x01	; 1
    1b9a:	9c 93       	st	X, r25
    1b9c:	8e 93       	st	-X, r24
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e0 5c       	subi	r30, 0xC0	; 192
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_VidInit+0x3a0>
    1bac:	fe 01       	movw	r30, r28
    1bae:	e0 5c       	subi	r30, 0xC0	; 192
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
    1bb6:	19 c0       	rjmp	.+50     	; 0x1bea <LCD_VidInit+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb8:	8e 01       	movw	r16, r28
    1bba:	02 5b       	subi	r16, 0xB2	; 178
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e1 5b       	subi	r30, 0xB1	; 177
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	80 83       	st	Z, r24
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e2 5b       	subi	r30, 0xB2	; 178
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1be2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1be4:	8a 95       	dec	r24
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_VidInit+0x3dc>
    1be8:	8f af       	std	Y+63, r24	; 0x3f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
    1bea:	8c e0       	ldi	r24, 0x0C	; 12
    1bec:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e2       	ldi	r26, 0x20	; 32
    1bf6:	b2 e4       	ldi	r27, 0x42	; 66
    1bf8:	8b af       	std	Y+59, r24	; 0x3b
    1bfa:	9c af       	std	Y+60, r25	; 0x3c
    1bfc:	ad af       	std	Y+61, r26	; 0x3d
    1bfe:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c00:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c02:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c08:	2b ea       	ldi	r18, 0xAB	; 171
    1c0a:	3a ea       	ldi	r19, 0xAA	; 170
    1c0c:	4a e2       	ldi	r20, 0x2A	; 42
    1c0e:	50 e4       	ldi	r21, 0x40	; 64
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f ab       	std	Y+55, r24	; 0x37
    1c1a:	98 af       	std	Y+56, r25	; 0x38
    1c1c:	a9 af       	std	Y+57, r26	; 0x39
    1c1e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1c20:	6f a9       	ldd	r22, Y+55	; 0x37
    1c22:	78 ad       	ldd	r23, Y+56	; 0x38
    1c24:	89 ad       	ldd	r24, Y+57	; 0x39
    1c26:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	1c f4       	brge	.+6      	; 0x1c3e <LCD_VidInit+0x436>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	8e ab       	std	Y+54, r24	; 0x36
    1c3c:	91 c0       	rjmp	.+290    	; 0x1d60 <LCD_VidInit+0x558>
	else if (__tmp > 255)
    1c3e:	6f a9       	ldd	r22, Y+55	; 0x37
    1c40:	78 ad       	ldd	r23, Y+56	; 0x38
    1c42:	89 ad       	ldd	r24, Y+57	; 0x39
    1c44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	53 e4       	ldi	r21, 0x43	; 67
    1c4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	0c f0       	brlt	.+2      	; 0x1c58 <LCD_VidInit+0x450>
    1c56:	7b c0       	rjmp	.+246    	; 0x1d4e <LCD_VidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1c58:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c5a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	54 e4       	ldi	r21, 0x44	; 68
    1c68:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8a ab       	std	Y+50, r24	; 0x32
    1c72:	9b ab       	std	Y+51, r25	; 0x33
    1c74:	ac ab       	std	Y+52, r26	; 0x34
    1c76:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6a a9       	ldd	r22, Y+50	; 0x32
    1c7a:	7b a9       	ldd	r23, Y+51	; 0x33
    1c7c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c7e:	9d a9       	ldd	r25, Y+53	; 0x35
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a ef       	ldi	r20, 0xFA	; 250
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8e a7       	std	Y+46, r24	; 0x2e
    1c92:	9f a7       	std	Y+47, r25	; 0x2f
    1c94:	a8 ab       	std	Y+48, r26	; 0x30
    1c96:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1c98:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c9a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c9c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c9e:	99 a9       	ldd	r25, Y+49	; 0x31
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_VidInit+0x4b2>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9d a7       	std	Y+45, r25	; 0x2d
    1cb6:	8c a7       	std	Y+44, r24	; 0x2c
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_VidInit+0x530>
	else if (__tmp > 65535)
    1cba:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cbc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cbe:	88 a9       	ldd	r24, Y+48	; 0x30
    1cc0:	99 a9       	ldd	r25, Y+49	; 0x31
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_VidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6a a9       	ldd	r22, Y+50	; 0x32
    1cd4:	7b a9       	ldd	r23, Y+51	; 0x33
    1cd6:	8c a9       	ldd	r24, Y+52	; 0x34
    1cd8:	9d a9       	ldd	r25, Y+53	; 0x35
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9d a7       	std	Y+45, r25	; 0x2d
    1cf8:	8c a7       	std	Y+44, r24	; 0x2c
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_VidInit+0x512>
    1cfc:	88 ec       	ldi	r24, 0xC8	; 200
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9b a7       	std	Y+43, r25	; 0x2b
    1d02:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d04:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d06:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_VidInit+0x500>
    1d0c:	9b a7       	std	Y+43, r25	; 0x2b
    1d0e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d12:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9d a7       	std	Y+45, r25	; 0x2d
    1d18:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d1c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_VidInit+0x4f4>
    1d22:	24 c0       	rjmp	.+72     	; 0x1d6c <LCD_VidInit+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d26:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d28:	88 a9       	ldd	r24, Y+48	; 0x30
    1d2a:	99 a9       	ldd	r25, Y+49	; 0x31
    1d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9d a7       	std	Y+45, r25	; 0x2d
    1d36:	8c a7       	std	Y+44, r24	; 0x2c
    1d38:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d3a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d3c:	99 a7       	std	Y+41, r25	; 0x29
    1d3e:	88 a7       	std	Y+40, r24	; 0x28
    1d40:	88 a5       	ldd	r24, Y+40	; 0x28
    1d42:	99 a5       	ldd	r25, Y+41	; 0x29
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_VidInit+0x53c>
    1d48:	99 a7       	std	Y+41, r25	; 0x29
    1d4a:	88 a7       	std	Y+40, r24	; 0x28
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <LCD_VidInit+0x564>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d4e:	6f a9       	ldd	r22, Y+55	; 0x37
    1d50:	78 ad       	ldd	r23, Y+56	; 0x38
    1d52:	89 ad       	ldd	r24, Y+57	; 0x39
    1d54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8e ab       	std	Y+54, r24	; 0x36
    1d60:	8e a9       	ldd	r24, Y+54	; 0x36
    1d62:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d64:	8f a1       	ldd	r24, Y+39	; 0x27
    1d66:	8a 95       	dec	r24
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_VidInit+0x55e>
    1d6a:	8f a3       	std	Y+39, r24	; 0x27
	// Delay for more than 39 us
	_delay_us(40);
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE_RIGHT);
    1d6c:	86 e0       	ldi	r24, 0x06	; 6
    1d6e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e2       	ldi	r26, 0x20	; 32
    1d78:	b2 e4       	ldi	r27, 0x42	; 66
    1d7a:	8b a3       	std	Y+35, r24	; 0x23
    1d7c:	9c a3       	std	Y+36, r25	; 0x24
    1d7e:	ad a3       	std	Y+37, r26	; 0x25
    1d80:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d82:	6b a1       	ldd	r22, Y+35	; 0x23
    1d84:	7c a1       	ldd	r23, Y+36	; 0x24
    1d86:	8d a1       	ldd	r24, Y+37	; 0x25
    1d88:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8a:	2b ea       	ldi	r18, 0xAB	; 171
    1d8c:	3a ea       	ldi	r19, 0xAA	; 170
    1d8e:	4a e2       	ldi	r20, 0x2A	; 42
    1d90:	50 e4       	ldi	r21, 0x40	; 64
    1d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d9c:	98 a3       	std	Y+32, r25	; 0x20
    1d9e:	a9 a3       	std	Y+33, r26	; 0x21
    1da0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1da2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1da4:	78 a1       	ldd	r23, Y+32	; 0x20
    1da6:	89 a1       	ldd	r24, Y+33	; 0x21
    1da8:	9a a1       	ldd	r25, Y+34	; 0x22
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	1c f4       	brge	.+6      	; 0x1dc0 <LCD_VidInit+0x5b8>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	8e 8f       	std	Y+30, r24	; 0x1e
    1dbe:	91 c0       	rjmp	.+290    	; 0x1ee2 <LCD_VidInit+0x6da>
	else if (__tmp > 255)
    1dc0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dc2:	78 a1       	ldd	r23, Y+32	; 0x20
    1dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4f e7       	ldi	r20, 0x7F	; 127
    1dce:	53 e4       	ldi	r21, 0x43	; 67
    1dd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	0c f0       	brlt	.+2      	; 0x1dda <LCD_VidInit+0x5d2>
    1dd8:	7b c0       	rjmp	.+246    	; 0x1ed0 <LCD_VidInit+0x6c8>
	{
		_delay_ms(__us / 1000.0);
    1dda:	6b a1       	ldd	r22, Y+35	; 0x23
    1ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dde:	8d a1       	ldd	r24, Y+37	; 0x25
    1de0:	9e a1       	ldd	r25, Y+38	; 0x26
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a e7       	ldi	r20, 0x7A	; 122
    1de8:	54 e4       	ldi	r21, 0x44	; 68
    1dea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8a 8f       	std	Y+26, r24	; 0x1a
    1df4:	9b 8f       	std	Y+27, r25	; 0x1b
    1df6:	ac 8f       	std	Y+28, r26	; 0x1c
    1df8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1dfc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1dfe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8e 8b       	std	Y+22, r24	; 0x16
    1e14:	9f 8b       	std	Y+23, r25	; 0x17
    1e16:	a8 8f       	std	Y+24, r26	; 0x18
    1e18:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e1a:	6e 89       	ldd	r22, Y+22	; 0x16
    1e1c:	7f 89       	ldd	r23, Y+23	; 0x17
    1e1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e20:	99 8d       	ldd	r25, Y+25	; 0x19
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <LCD_VidInit+0x634>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9d 8b       	std	Y+21, r25	; 0x15
    1e38:	8c 8b       	std	Y+20, r24	; 0x14
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <LCD_VidInit+0x6b2>
	else if (__tmp > 65535)
    1e3c:	6e 89       	ldd	r22, Y+22	; 0x16
    1e3e:	7f 89       	ldd	r23, Y+23	; 0x17
    1e40:	88 8d       	ldd	r24, Y+24	; 0x18
    1e42:	99 8d       	ldd	r25, Y+25	; 0x19
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <LCD_VidInit+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9d 8b       	std	Y+21, r25	; 0x15
    1e7a:	8c 8b       	std	Y+20, r24	; 0x14
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <LCD_VidInit+0x694>
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9b 8b       	std	Y+19, r25	; 0x13
    1e84:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e86:	8a 89       	ldd	r24, Y+18	; 0x12
    1e88:	9b 89       	ldd	r25, Y+19	; 0x13
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_VidInit+0x682>
    1e8e:	9b 8b       	std	Y+19, r25	; 0x13
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8c 89       	ldd	r24, Y+20	; 0x14
    1e94:	9d 89       	ldd	r25, Y+21	; 0x15
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9d 8b       	std	Y+21, r25	; 0x15
    1e9a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8c 89       	ldd	r24, Y+20	; 0x14
    1e9e:	9d 89       	ldd	r25, Y+21	; 0x15
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <LCD_VidInit+0x676>
    1ea4:	24 c0       	rjmp	.+72     	; 0x1eee <LCD_VidInit+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6e 89       	ldd	r22, Y+22	; 0x16
    1ea8:	7f 89       	ldd	r23, Y+23	; 0x17
    1eaa:	88 8d       	ldd	r24, Y+24	; 0x18
    1eac:	99 8d       	ldd	r25, Y+25	; 0x19
    1eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9d 8b       	std	Y+21, r25	; 0x15
    1eb8:	8c 8b       	std	Y+20, r24	; 0x14
    1eba:	8c 89       	ldd	r24, Y+20	; 0x14
    1ebc:	9d 89       	ldd	r25, Y+21	; 0x15
    1ebe:	99 8b       	std	Y+17, r25	; 0x11
    1ec0:	88 8b       	std	Y+16, r24	; 0x10
    1ec2:	88 89       	ldd	r24, Y+16	; 0x10
    1ec4:	99 89       	ldd	r25, Y+17	; 0x11
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_VidInit+0x6be>
    1eca:	99 8b       	std	Y+17, r25	; 0x11
    1ecc:	88 8b       	std	Y+16, r24	; 0x10
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_VidInit+0x6e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ed0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ed2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	8a 95       	dec	r24
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_VidInit+0x6e0>
    1eec:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e0       	ldi	r26, 0x00	; 0
    1efa:	b0 e4       	ldi	r27, 0x40	; 64
    1efc:	8b 87       	std	Y+11, r24	; 0x0b
    1efe:	9c 87       	std	Y+12, r25	; 0x0c
    1f00:	ad 87       	std	Y+13, r26	; 0x0d
    1f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a ef       	ldi	r20, 0xFA	; 250
    1f12:	54 e4       	ldi	r21, 0x44	; 68
    1f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8f 83       	std	Y+7, r24	; 0x07
    1f1e:	98 87       	std	Y+8, r25	; 0x08
    1f20:	a9 87       	std	Y+9, r26	; 0x09
    1f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <LCD_VidInit+0x73e>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <LCD_VidInit+0x7bc>
	else if (__tmp > 65535)
    1f46:	6f 81       	ldd	r22, Y+7	; 0x07
    1f48:	78 85       	ldd	r23, Y+8	; 0x08
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	4c f5       	brge	.+82     	; 0x1fb0 <LCD_VidInit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <LCD_VidInit+0x79e>
    1f88:	88 ec       	ldi	r24, 0xC8	; 200
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_VidInit+0x78c>
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <LCD_VidInit+0x780>
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <LCD_VidInit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_VidInit+0x7c8>
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
	// Delay for more than 1.53 ms
	_delay_ms(2);
#endif
}
    1fd8:	cc 59       	subi	r28, 0x9C	; 156
    1fda:	df 4f       	sbci	r29, 0xFF	; 255
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	08 95       	ret

00001ff0 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_U8Char){
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	6d 97       	sbiw	r28, 0x1d	; 29
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT
	/******* to define RS / RW ***********/
	DIO_VidSetPinValue(CONTROL_PORT,RS,HIGH);
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
	/*to define value of character on port*/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Char);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2014:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_VidSetPortValue>
	/*********to make enable pulse*********/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e8       	ldi	r26, 0x80	; 128
    2028:	bf e3       	ldi	r27, 0x3F	; 63
    202a:	89 8f       	std	Y+25, r24	; 0x19
    202c:	9a 8f       	std	Y+26, r25	; 0x1a
    202e:	ab 8f       	std	Y+27, r26	; 0x1b
    2030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	69 8d       	ldd	r22, Y+25	; 0x19
    2034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8d 8b       	std	Y+21, r24	; 0x15
    204c:	9e 8b       	std	Y+22, r25	; 0x16
    204e:	af 8b       	std	Y+23, r26	; 0x17
    2050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <LCD_VidSendChar+0x84>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <LCD_VidSendChar+0x102>
	else if (__tmp > 65535)
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <LCD_VidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	69 8d       	ldd	r22, Y+25	; 0x19
    208e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <LCD_VidSendChar+0xe4>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a 8b       	std	Y+18, r25	; 0x12
    20bc:	89 8b       	std	Y+17, r24	; 0x11
    20be:	89 89       	ldd	r24, Y+17	; 0x11
    20c0:	9a 89       	ldd	r25, Y+18	; 0x12
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_VidSendChar+0xd2>
    20c6:	9a 8b       	std	Y+18, r25	; 0x12
    20c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9c 8b       	std	Y+20, r25	; 0x14
    20d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <LCD_VidSendChar+0xc6>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <LCD_VidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	98 8b       	std	Y+16, r25	; 0x10
    20f8:	8f 87       	std	Y+15, r24	; 0x0f
    20fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fc:	98 89       	ldd	r25, Y+16	; 0x10
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_VidSendChar+0x10e>
    2102:	98 8b       	std	Y+16, r25	; 0x10
    2104:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	61 e0       	ldi	r22, 0x01	; 1
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e0       	ldi	r26, 0x00	; 0
    2116:	b0 e4       	ldi	r27, 0x40	; 64
    2118:	8b 87       	std	Y+11, r24	; 0x0b
    211a:	9c 87       	std	Y+12, r25	; 0x0c
    211c:	ad 87       	std	Y+13, r26	; 0x0d
    211e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8f 83       	std	Y+7, r24	; 0x07
    213a:	98 87       	std	Y+8, r25	; 0x08
    213c:	a9 87       	std	Y+9, r26	; 0x09
    213e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_VidSendChar+0x172>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_VidSendChar+0x1f0>
	else if (__tmp > 65535)
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_VidSendChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6b 85       	ldd	r22, Y+11	; 0x0b
    217c:	7c 85       	ldd	r23, Y+12	; 0x0c
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_VidSendChar+0x1d2>
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 83       	std	Y+4, r25	; 0x04
    21aa:	8b 83       	std	Y+3, r24	; 0x03
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_VidSendChar+0x1c0>
    21b4:	9c 83       	std	Y+4, r25	; 0x04
    21b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_VidSendChar+0x1b4>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <LCD_VidSendChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	9a 81       	ldd	r25, Y+2	; 0x02
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_VidSendChar+0x1fc>
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
		_delay_ms(2);

#endif

}
    21f4:	6d 96       	adiw	r28, 0x1d	; 29
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <LCD_VidSendString>:

void LCD_VidSendString(u8 Copy_U8String[] ){
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	6b 97       	sbiw	r28, 0x1b	; 27
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	9b 8f       	std	Y+27, r25	; 0x1b
    221c:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 i=0;
    221e:	19 8e       	std	Y+25, r1	; 0x19
    2220:	d2 c0       	rjmp	.+420    	; 0x23c6 <LCD_VidSendString+0x1c0>
	while( Copy_U8String[i] != '\0' ){
		if (15 == i){
    2222:	89 8d       	ldd	r24, Y+25	; 0x19
    2224:	8f 30       	cpi	r24, 0x0F	; 15
    2226:	19 f4       	brne	.+6      	; 0x222e <LCD_VidSendString+0x28>
			LCD_VidSendCommend(LINE_2_START);
    2228:	80 ec       	ldi	r24, 0xC0	; 192
    222a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
		}
		LCD_VidSendChar(Copy_U8String[i]);
    222e:	89 8d       	ldd	r24, Y+25	; 0x19
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2236:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2238:	fc 01       	movw	r30, r24
    223a:	e2 0f       	add	r30, r18
    223c:	f3 1f       	adc	r31, r19
    223e:	80 81       	ld	r24, Z
    2240:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	8d 8b       	std	Y+21, r24	; 0x15
    224e:	9e 8b       	std	Y+22, r25	; 0x16
    2250:	af 8b       	std	Y+23, r26	; 0x17
    2252:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2254:	6d 89       	ldd	r22, Y+21	; 0x15
    2256:	7e 89       	ldd	r23, Y+22	; 0x16
    2258:	8f 89       	ldd	r24, Y+23	; 0x17
    225a:	98 8d       	ldd	r25, Y+24	; 0x18
    225c:	2b ea       	ldi	r18, 0xAB	; 171
    225e:	3a ea       	ldi	r19, 0xAA	; 170
    2260:	4a e2       	ldi	r20, 0x2A	; 42
    2262:	50 e4       	ldi	r21, 0x40	; 64
    2264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	89 8b       	std	Y+17, r24	; 0x11
    226e:	9a 8b       	std	Y+18, r25	; 0x12
    2270:	ab 8b       	std	Y+19, r26	; 0x13
    2272:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2274:	69 89       	ldd	r22, Y+17	; 0x11
    2276:	7a 89       	ldd	r23, Y+18	; 0x12
    2278:	8b 89       	ldd	r24, Y+19	; 0x13
    227a:	9c 89       	ldd	r25, Y+20	; 0x14
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	1c f4       	brge	.+6      	; 0x2292 <LCD_VidSendString+0x8c>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	88 8b       	std	Y+16, r24	; 0x10
    2290:	91 c0       	rjmp	.+290    	; 0x23b4 <LCD_VidSendString+0x1ae>
	else if (__tmp > 255)
    2292:	69 89       	ldd	r22, Y+17	; 0x11
    2294:	7a 89       	ldd	r23, Y+18	; 0x12
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	53 e4       	ldi	r21, 0x43	; 67
    22a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	0c f0       	brlt	.+2      	; 0x22ac <LCD_VidSendString+0xa6>
    22aa:	7b c0       	rjmp	.+246    	; 0x23a2 <LCD_VidSendString+0x19c>
	{
		_delay_ms(__us / 1000.0);
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8c 87       	std	Y+12, r24	; 0x0c
    22c6:	9d 87       	std	Y+13, r25	; 0x0d
    22c8:	ae 87       	std	Y+14, r26	; 0x0e
    22ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    22d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a ef       	ldi	r20, 0xFA	; 250
    22da:	54 e4       	ldi	r21, 0x44	; 68
    22dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	88 87       	std	Y+8, r24	; 0x08
    22e6:	99 87       	std	Y+9, r25	; 0x09
    22e8:	aa 87       	std	Y+10, r26	; 0x0a
    22ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22ec:	68 85       	ldd	r22, Y+8	; 0x08
    22ee:	79 85       	ldd	r23, Y+9	; 0x09
    22f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_VidSendString+0x108>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9f 83       	std	Y+7, r25	; 0x07
    230a:	8e 83       	std	Y+6, r24	; 0x06
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_VidSendString+0x186>
	else if (__tmp > 65535)
    230e:	68 85       	ldd	r22, Y+8	; 0x08
    2310:	79 85       	ldd	r23, Y+9	; 0x09
    2312:	8a 85       	ldd	r24, Y+10	; 0x0a
    2314:	9b 85       	ldd	r25, Y+11	; 0x0b
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_VidSendString+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6c 85       	ldd	r22, Y+12	; 0x0c
    2328:	7d 85       	ldd	r23, Y+13	; 0x0d
    232a:	8e 85       	ldd	r24, Y+14	; 0x0e
    232c:	9f 85       	ldd	r25, Y+15	; 0x0f
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9f 83       	std	Y+7, r25	; 0x07
    234c:	8e 83       	std	Y+6, r24	; 0x06
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_VidSendString+0x168>
    2350:	88 ec       	ldi	r24, 0xC8	; 200
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9d 83       	std	Y+5, r25	; 0x05
    2356:	8c 83       	std	Y+4, r24	; 0x04
    2358:	8c 81       	ldd	r24, Y+4	; 0x04
    235a:	9d 81       	ldd	r25, Y+5	; 0x05
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_VidSendString+0x156>
    2360:	9d 83       	std	Y+5, r25	; 0x05
    2362:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8e 81       	ldd	r24, Y+6	; 0x06
    2366:	9f 81       	ldd	r25, Y+7	; 0x07
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9f 83       	std	Y+7, r25	; 0x07
    236c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8e 81       	ldd	r24, Y+6	; 0x06
    2370:	9f 81       	ldd	r25, Y+7	; 0x07
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_VidSendString+0x14a>
    2376:	24 c0       	rjmp	.+72     	; 0x23c0 <LCD_VidSendString+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	68 85       	ldd	r22, Y+8	; 0x08
    237a:	79 85       	ldd	r23, Y+9	; 0x09
    237c:	8a 85       	ldd	r24, Y+10	; 0x0a
    237e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2380:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9f 83       	std	Y+7, r25	; 0x07
    238a:	8e 83       	std	Y+6, r24	; 0x06
    238c:	8e 81       	ldd	r24, Y+6	; 0x06
    238e:	9f 81       	ldd	r25, Y+7	; 0x07
    2390:	9b 83       	std	Y+3, r25	; 0x03
    2392:	8a 83       	std	Y+2, r24	; 0x02
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_VidSendString+0x192>
    239c:	9b 83       	std	Y+3, r25	; 0x03
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <LCD_VidSendString+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23a2:	69 89       	ldd	r22, Y+17	; 0x11
    23a4:	7a 89       	ldd	r23, Y+18	; 0x12
    23a6:	8b 89       	ldd	r24, Y+19	; 0x13
    23a8:	9c 89       	ldd	r25, Y+20	; 0x14
    23aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	88 8b       	std	Y+16, r24	; 0x10
    23b4:	88 89       	ldd	r24, Y+16	; 0x10
    23b6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	8a 95       	dec	r24
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <LCD_VidSendString+0x1b4>
    23be:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		i++;
    23c0:	89 8d       	ldd	r24, Y+25	; 0x19
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	89 8f       	std	Y+25, r24	; 0x19

}

void LCD_VidSendString(u8 Copy_U8String[] ){
	u8 i=0;
	while( Copy_U8String[i] != '\0' ){
    23c6:	89 8d       	ldd	r24, Y+25	; 0x19
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23d0:	fc 01       	movw	r30, r24
    23d2:	e2 0f       	add	r30, r18
    23d4:	f3 1f       	adc	r31, r19
    23d6:	80 81       	ld	r24, Z
    23d8:	88 23       	and	r24, r24
    23da:	09 f0       	breq	.+2      	; 0x23de <LCD_VidSendString+0x1d8>
    23dc:	22 cf       	rjmp	.-444    	; 0x2222 <LCD_VidSendString+0x1c>
		}
		LCD_VidSendChar(Copy_U8String[i]);
		_delay_us(1);
		i++;
	}//end while
}//end FUNC LCD_VidSendString
    23de:	6b 96       	adiw	r28, 0x1b	; 27
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <LCD_U32Pow>:

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <LCD_U32Pow+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <LCD_U32Pow+0x8>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	6c 83       	std	Y+4, r22	; 0x04
  u32 local_res = 1 ;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	12 c0       	rjmp	.+36     	; 0x242e <LCD_U32Pow+0x3e>
  while (Copy_U8Bow >0 ){
	  local_res *= Copy_U8Base ;
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	ac 01       	movw	r20, r24
    2416:	42 9f       	mul	r20, r18
    2418:	c0 01       	movw	r24, r0
    241a:	43 9f       	mul	r20, r19
    241c:	90 0d       	add	r25, r0
    241e:	52 9f       	mul	r21, r18
    2420:	90 0d       	add	r25, r0
    2422:	11 24       	eor	r1, r1
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
	  Copy_U8Bow--;
    2428:	8c 81       	ldd	r24, Y+4	; 0x04
    242a:	81 50       	subi	r24, 0x01	; 1
    242c:	8c 83       	std	Y+4, r24	; 0x04
	}//end while
}//end FUNC LCD_VidSendString

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
  u32 local_res = 1 ;
  while (Copy_U8Bow >0 ){
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	88 23       	and	r24, r24
    2432:	59 f7       	brne	.-42     	; 0x240a <LCD_U32Pow+0x1a>
	  local_res *= Copy_U8Base ;
	  Copy_U8Bow--;
  }
  return  local_res ;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <LCD_VidPrintVar>:

void LCD_VidPrintVar(u32 Copy_U8Var){
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <LCD_VidPrintVar+0xa>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <LCD_VidPrintVar+0xc>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <LCD_VidPrintVar+0xe>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
	//to write 0 if it send directly
	if (0 == Copy_U8Var){
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	21 f4       	brne	.+8      	; 0x246c <LCD_VidPrintVar+0x26>
		LCD_VidSendChar('0');
    2464:	80 e3       	ldi	r24, 0x30	; 48
    2466:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    246a:	5d c0       	rjmp	.+186    	; 0x2526 <LCD_VidPrintVar+0xe0>
		return ;
	}
	u32 local_num = 0 ;
    246c:	1c 82       	std	Y+4, r1	; 0x04
    246e:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0 ;
    2470:	1a 82       	std	Y+2, r1	; 0x02
    2472:	03 c0       	rjmp	.+6      	; 0x247a <LCD_VidPrintVar+0x34>
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidSendChar('0');
		return ;
	}
	u32 local_num = 0 ;
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
    247a:	8a e0       	ldi	r24, 0x0A	; 10
    247c:	6a 81       	ldd	r22, Y+2	; 0x02
    247e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_U32Pow>
    2482:	9c 01       	movw	r18, r24
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	b9 01       	movw	r22, r18
    248a:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__udivmodhi4>
    248e:	cb 01       	movw	r24, r22
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	81 f7       	brne	.-32     	; 0x2474 <LCD_VidPrintVar+0x2e>
		i++ ;
	}
	s8 copy_i = i-1 ;
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	81 50       	subi	r24, 0x01	; 1
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	27 c0       	rjmp	.+78     	; 0x24ea <LCD_VidPrintVar+0xa4>
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	2a e0       	ldi	r18, 0x0A	; 10
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	b9 01       	movw	r22, r18
    24a6:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__udivmodhi4>
    24aa:	8c 01       	movw	r16, r24
    24ac:	99 81       	ldd	r25, Y+1	; 0x01
    24ae:	8a e0       	ldi	r24, 0x0A	; 10
    24b0:	69 2f       	mov	r22, r25
    24b2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_U32Pow>
    24b6:	08 9f       	mul	r16, r24
    24b8:	90 01       	movw	r18, r0
    24ba:	09 9f       	mul	r16, r25
    24bc:	30 0d       	add	r19, r0
    24be:	18 9f       	mul	r17, r24
    24c0:	30 0d       	add	r19, r0
    24c2:	11 24       	eor	r1, r1
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	9c 83       	std	Y+4, r25	; 0x04
    24ce:	8b 83       	std	Y+3, r24	; 0x03
		Copy_U8Var/=10 ;
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	2a e0       	ldi	r18, 0x0A	; 10
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	b9 01       	movw	r22, r18
    24da:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__udivmodhi4>
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
		copy_i-- ;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	81 50       	subi	r24, 0x01	; 1
    24e8:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
	}
	s8 copy_i = i-1 ;
	while ( copy_i >= 0 ){
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	88 23       	and	r24, r24
    24ee:	b4 f6       	brge	.-84     	; 0x249c <LCD_VidPrintVar+0x56>
    24f0:	17 c0       	rjmp	.+46     	; 0x2520 <LCD_VidPrintVar+0xda>
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	2a e0       	ldi	r18, 0x0A	; 10
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	b9 01       	movw	r22, r18
    24fc:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__udivmodhi4>
    2500:	80 5d       	subi	r24, 0xD0	; 208
    2502:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
		local_num /= 10 ;
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	2a e0       	ldi	r18, 0x0A	; 10
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	b9 01       	movw	r22, r18
    2510:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__udivmodhi4>
    2514:	cb 01       	movw	r24, r22
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	81 50       	subi	r24, 0x01	; 1
    251e:	8a 83       	std	Y+2, r24	; 0x02
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	88 23       	and	r24, r24
    2524:	31 f7       	brne	.-52     	; 0x24f2 <LCD_VidPrintVar+0xac>
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
		local_num /= 10 ;
		i--;
	}
}
    2526:	26 96       	adiw	r28, 0x06	; 6
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	08 95       	ret

0000253c <LCD_VidPosCur>:
void LCD_VidPosCur(u8 Copy_U8Row , u8 Copy_U8Col ) {
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	00 d0       	rcall	.+0      	; 0x2542 <LCD_VidPosCur+0x6>
    2542:	0f 92       	push	r0
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	8a 83       	std	Y+2, r24	; 0x02
    254a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = 0 ;
    254c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_U8Row == 0)
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	88 23       	and	r24, r24
    2552:	19 f4       	brne	.+6      	; 0x255a <LCD_VidPosCur+0x1e>
		Local_Address =0x80 ;
    2554:	80 e8       	ldi	r24, 0x80	; 128
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <LCD_VidPosCur+0x28>
	else if (Copy_U8Row == 1)
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	11 f4       	brne	.+4      	; 0x2564 <LCD_VidPosCur+0x28>
		Local_Address =0xC0 ;
    2560:	80 ec       	ldi	r24, 0xC0	; 192
    2562:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Col < 16 )
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	80 31       	cpi	r24, 0x10	; 16
    2568:	20 f4       	brcc	.+8      	; 0x2572 <LCD_VidPosCur+0x36>
		Local_Address += Copy_U8Col ;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	89 0f       	add	r24, r25
    2570:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommend ( Local_Address );
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <LCD_VidClear>:
void LCD_VidClear (){
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommend(DISPLAY_CLEAR) ;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <main>:
#include "PING_PONG_1_private.h"

extern Global_row ;

void main ( void )
{
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	cb 5c       	subi	r28, 0xCB	; 203
    25a6:	d0 40       	sbci	r29, 0x00	; 0
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
	//define pin to check that the ball isn't saved
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_SAVED_1,1);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	64 e0       	ldi	r22, 0x04	; 4
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_1,0);
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>

	//define pin_out to check the code begin from beginning or after that
	u8 pin_out = 0 ;
    25c6:	fe 01       	movw	r30, r28
    25c8:	e5 53       	subi	r30, 0x35	; 53
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	10 82       	st	Z, r1

	//to initialize interrupt 0
    GIE_VidEnable();        //to open global interrupt
    25ce:	0e 94 10 0a 	call	0x1420	; 0x1420 <GIE_VidEnable>

    /* 0 :  enable perpherial interrupt 0
       1 : enable perpherial interrupt 1
       2 : enable perpherial interrupt 2
     */
    PIE_VidEnable(0);       //to enable perpherial interrupt
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <PIE_VidEnable>
    INT_VidINIT();          //to initialize interrupt
    25d8:	0e 94 c8 09 	call	0x1390	; 0x1390 <INT_VidINIT>

	//to initialize LCD
	LCD_VidInit();
    25dc:	0e 94 04 0c 	call	0x1808	; 0x1808 <LCD_VidInit>

	//define two pins to communicate between two lcds
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_OUT,HIGH);    // O/P
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	62 e0       	ldi	r22, 0x02	; 2
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_IN,LOW);     //  I/P
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_VidSetPinDirection>

	//out zero voltage
	DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,LOW);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>

    static s8 local_col = 14 ;

	//to open CGRAM location
	LCD_VidSendCommend(0b01000000);
    25fe:	80 e4       	ldi	r24, 0x40	; 64
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LCD_VidSendCommend>

	//to make ping paddle right address 0 with ball
	LCD_VidSendChar(0b00000100);
    2606:	84 e0       	ldi	r24, 0x04	; 4
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001110);
    260e:	8e e0       	ldi	r24, 0x0E	; 14
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000100);
    2616:	84 e0       	ldi	r24, 0x04	; 4
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001111);
    261e:	8f e0       	ldi	r24, 0x0F	; 15
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001111);
    2626:	8f e0       	ldi	r24, 0x0F	; 15
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    262e:	87 e0       	ldi	r24, 0x07	; 7
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001011);
    2636:	8b e0       	ldi	r24, 0x0B	; 11
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00010000);
    263e:	80 e1       	ldi	r24, 0x10	; 16
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>


	//to make ping paddle right address 1
	LCD_VidSendChar(0b00000000);
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001111);
    265e:	8f e0       	ldi	r24, 0x0F	; 15
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001111);
    2666:	8f e0       	ldi	r24, 0x0F	; 15
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    266e:	87 e0       	ldi	r24, 0x07	; 7
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001011);
    2676:	8b e0       	ldi	r24, 0x0B	; 11
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00010000);
    267e:	80 e1       	ldi	r24, 0x10	; 16
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

    //to make ball down right address 2
	LCD_VidSendChar(0b00000000);
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000010);
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    26ae:	87 e0       	ldi	r24, 0x07	; 7
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    26b6:	87 e0       	ldi	r24, 0x07	; 7
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000010);
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>


    //to make ball down left address 3
	LCD_VidSendChar(0b00000000);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001000);
    26e6:	88 e0       	ldi	r24, 0x08	; 8
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    26ee:	8c e1       	ldi	r24, 0x1C	; 28
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    26f6:	8c e1       	ldi	r24, 0x1C	; 28
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001000);
    26fe:	88 e0       	ldi	r24, 0x08	; 8
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

    //to make ball up left address 4
	LCD_VidSendChar(0b00001000);
    2706:	88 e0       	ldi	r24, 0x08	; 8
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    270e:	8c e1       	ldi	r24, 0x1C	; 28
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    2716:	8c e1       	ldi	r24, 0x1C	; 28
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001000);
    271e:	88 e0       	ldi	r24, 0x08	; 8
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

    //to make ball up right address 5
	LCD_VidSendChar(0b00000010);
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    274e:	87 e0       	ldi	r24, 0x07	; 7
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    2756:	87 e0       	ldi	r24, 0x07	; 7
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000010);
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

    //to show right ping paddle with ball in beginning
		LCD_VidPosCur(row_1,last_col);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	6f e0       	ldi	r22, 0x0F	; 15
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
		LCD_VidSendChar(ping_paddle_right_ball);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    279a:	fe 01       	movw	r30, r28
    279c:	ef 53       	subi	r30, 0x3F	; 63
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a8 ec       	ldi	r26, 0xC8	; 200
    27a6:	b2 e4       	ldi	r27, 0x42	; 66
    27a8:	80 83       	st	Z, r24
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	a2 83       	std	Z+2, r26	; 0x02
    27ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b0:	8e 01       	movw	r16, r28
    27b2:	03 54       	subi	r16, 0x43	; 67
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	fe 01       	movw	r30, r28
    27b8:	ef 53       	subi	r30, 0x3F	; 63
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a ef       	ldi	r20, 0xFA	; 250
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	f8 01       	movw	r30, r16
    27d6:	80 83       	st	Z, r24
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	a2 83       	std	Z+2, r26	; 0x02
    27dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27de:	fe 01       	movw	r30, r28
    27e0:	e3 54       	subi	r30, 0x43	; 67
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	44 f4       	brge	.+16     	; 0x280c <main+0x274>
		__ticks = 1;
    27fc:	fe 01       	movw	r30, r28
    27fe:	e5 54       	subi	r30, 0x45	; 69
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
    280a:	64 c0       	rjmp	.+200    	; 0x28d4 <main+0x33c>
	else if (__tmp > 65535)
    280c:	fe 01       	movw	r30, r28
    280e:	e3 54       	subi	r30, 0x43	; 67
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	0c f0       	brlt	.+2      	; 0x282c <main+0x294>
    282a:	43 c0       	rjmp	.+134    	; 0x28b2 <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	fe 01       	movw	r30, r28
    282e:	ef 53       	subi	r30, 0x3F	; 63
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8e 01       	movw	r16, r28
    284c:	05 54       	subi	r16, 0x45	; 69
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	f8 01       	movw	r30, r16
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
    2862:	1f c0       	rjmp	.+62     	; 0x28a2 <main+0x30a>
    2864:	fe 01       	movw	r30, r28
    2866:	e7 54       	subi	r30, 0x47	; 71
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	88 ec       	ldi	r24, 0xC8	; 200
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2872:	fe 01       	movw	r30, r28
    2874:	e7 54       	subi	r30, 0x47	; 71
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <main+0x2e4>
    2880:	fe 01       	movw	r30, r28
    2882:	e7 54       	subi	r30, 0x47	; 71
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	de 01       	movw	r26, r28
    288c:	a5 54       	subi	r26, 0x45	; 69
    288e:	bf 4f       	sbci	r27, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	e5 54       	subi	r30, 0x45	; 69
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	11 96       	adiw	r26, 0x01	; 1
    289e:	9c 93       	st	X, r25
    28a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	fe 01       	movw	r30, r28
    28a4:	e5 54       	subi	r30, 0x45	; 69
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	d1 f6       	brne	.-76     	; 0x2864 <main+0x2cc>
    28b0:	27 c0       	rjmp	.+78     	; 0x2900 <main+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b2:	8e 01       	movw	r16, r28
    28b4:	05 54       	subi	r16, 0x45	; 69
    28b6:	1f 4f       	sbci	r17, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	e3 54       	subi	r30, 0x43	; 67
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	f8 01       	movw	r30, r16
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
    28d4:	de 01       	movw	r26, r28
    28d6:	a9 54       	subi	r26, 0x49	; 73
    28d8:	bf 4f       	sbci	r27, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	e5 54       	subi	r30, 0x45	; 69
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	8d 93       	st	X+, r24
    28e6:	9c 93       	st	X, r25
    28e8:	fe 01       	movw	r30, r28
    28ea:	e9 54       	subi	r30, 0x49	; 73
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <main+0x35a>
    28f6:	fe 01       	movw	r30, r28
    28f8:	e9 54       	subi	r30, 0x49	; 73
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
		_delay_ms(100);

		//to show right ping paddle in beginning
		LCD_VidPosCur(row_1,last_col);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	6f e0       	ldi	r22, 0x0F	; 15
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
		LCD_VidSendChar(ping_paddle_right);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

		//declare result
		u8 result = 0 ;
    2914:	fe 01       	movw	r30, r28
    2916:	e6 53       	subi	r30, 0x36	; 54
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	10 82       	st	Z, r1

	while(1)
	{
		//to check that ball saved in LCD 2 or not
		if (DIO_U8GetPinValue(PORT_COMMUN,PIN_SAVED_2)){
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	65 e0       	ldi	r22, 0x05	; 5
    2920:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_U8GetPinValue>
    2924:	88 23       	and	r24, r24
    2926:	09 f4       	brne	.+2      	; 0x292a <main+0x392>
    2928:	ae c1       	rjmp	.+860    	; 0x2c86 <main+0x6ee>
			PIE_VidDisable(1);
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <PIE_VidDisable>
			result++;
    2930:	de 01       	movw	r26, r28
    2932:	a6 53       	subi	r26, 0x36	; 54
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e6 53       	subi	r30, 0x36	; 54
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	8f 5f       	subi	r24, 0xFF	; 255
    2940:	8c 93       	st	X, r24
			LCD_VidClear();
    2942:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_VidClear>
			//to show state wining
			for (u8 i = 0 ; i < 3 ; i++){
    2946:	fe 01       	movw	r30, r28
    2948:	e7 53       	subi	r30, 0x37	; 55
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	10 82       	st	Z, r1
    294e:	7f c1       	rjmp	.+766    	; 0x2c4e <main+0x6b6>
				LCD_VidPosCur( row_0 , 4 ) ;
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	64 e0       	ldi	r22, 0x04	; 4
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
				LCD_VidPrintVar(result);
    295c:	fe 01       	movw	r30, r28
    295e:	e6 53       	subi	r30, 0x36	; 54
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidPrintVar>
    296c:	fe 01       	movw	r30, r28
    296e:	ed 54       	subi	r30, 0x4D	; 77
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	aa ef       	ldi	r26, 0xFA	; 250
    2978:	b3 e4       	ldi	r27, 0x43	; 67
    297a:	80 83       	st	Z, r24
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	a2 83       	std	Z+2, r26	; 0x02
    2980:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2982:	8e 01       	movw	r16, r28
    2984:	01 55       	subi	r16, 0x51	; 81
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	fe 01       	movw	r30, r28
    298a:	ed 54       	subi	r30, 0x4D	; 77
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a ef       	ldi	r20, 0xFA	; 250
    299c:	54 e4       	ldi	r21, 0x44	; 68
    299e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	80 83       	st	Z, r24
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	a2 83       	std	Z+2, r26	; 0x02
    29ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b0:	fe 01       	movw	r30, r28
    29b2:	e1 55       	subi	r30, 0x51	; 81
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	44 f4       	brge	.+16     	; 0x29de <main+0x446>
		__ticks = 1;
    29ce:	fe 01       	movw	r30, r28
    29d0:	e3 55       	subi	r30, 0x53	; 83
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	64 c0       	rjmp	.+200    	; 0x2aa6 <main+0x50e>
	else if (__tmp > 65535)
    29de:	fe 01       	movw	r30, r28
    29e0:	e1 55       	subi	r30, 0x51	; 81
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	0c f0       	brlt	.+2      	; 0x29fe <main+0x466>
    29fc:	43 c0       	rjmp	.+134    	; 0x2a84 <main+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	fe 01       	movw	r30, r28
    2a00:	ed 54       	subi	r30, 0x4D	; 77
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	03 55       	subi	r16, 0x53	; 83
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	f8 01       	movw	r30, r16
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	1f c0       	rjmp	.+62     	; 0x2a74 <main+0x4dc>
    2a36:	fe 01       	movw	r30, r28
    2a38:	e5 55       	subi	r30, 0x55	; 85
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	88 ec       	ldi	r24, 0xC8	; 200
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
    2a44:	fe 01       	movw	r30, r28
    2a46:	e5 55       	subi	r30, 0x55	; 85
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <main+0x4b6>
    2a52:	fe 01       	movw	r30, r28
    2a54:	e5 55       	subi	r30, 0x55	; 85
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	de 01       	movw	r26, r28
    2a5e:	a3 55       	subi	r26, 0x53	; 83
    2a60:	bf 4f       	sbci	r27, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	e3 55       	subi	r30, 0x53	; 83
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	11 96       	adiw	r26, 0x01	; 1
    2a70:	9c 93       	st	X, r25
    2a72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	fe 01       	movw	r30, r28
    2a76:	e3 55       	subi	r30, 0x53	; 83
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	d1 f6       	brne	.-76     	; 0x2a36 <main+0x49e>
    2a82:	27 c0       	rjmp	.+78     	; 0x2ad2 <main+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a84:	8e 01       	movw	r16, r28
    2a86:	03 55       	subi	r16, 0x53	; 83
    2a88:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e1 55       	subi	r30, 0x51	; 81
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	60 81       	ld	r22, Z
    2a92:	71 81       	ldd	r23, Z+1	; 0x01
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
    2aa6:	de 01       	movw	r26, r28
    2aa8:	a7 55       	subi	r26, 0x57	; 87
    2aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	e3 55       	subi	r30, 0x53	; 83
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	8d 93       	st	X+, r24
    2ab8:	9c 93       	st	X, r25
    2aba:	fe 01       	movw	r30, r28
    2abc:	e7 55       	subi	r30, 0x57	; 87
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <main+0x52c>
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e7 55       	subi	r30, 0x57	; 87
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
                _delay_ms(500);
				LCD_VidClear();
    2ad2:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_VidClear>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	eb 55       	subi	r30, 0x5B	; 91
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	aa ef       	ldi	r26, 0xFA	; 250
    2ae2:	b3 e4       	ldi	r27, 0x43	; 67
    2ae4:	80 83       	st	Z, r24
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	a2 83       	std	Z+2, r26	; 0x02
    2aea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	8e 01       	movw	r16, r28
    2aee:	0f 55       	subi	r16, 0x5F	; 95
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	eb 55       	subi	r30, 0x5B	; 91
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4a ef       	ldi	r20, 0xFA	; 250
    2b06:	54 e4       	ldi	r21, 0x44	; 68
    2b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	f8 01       	movw	r30, r16
    2b12:	80 83       	st	Z, r24
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	a2 83       	std	Z+2, r26	; 0x02
    2b18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ef 55       	subi	r30, 0x5F	; 95
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	44 f4       	brge	.+16     	; 0x2b48 <main+0x5b0>
		__ticks = 1;
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e1 56       	subi	r30, 0x61	; 97
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
    2b46:	64 c0       	rjmp	.+200    	; 0x2c10 <main+0x678>
	else if (__tmp > 65535)
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ef 55       	subi	r30, 0x5F	; 95
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	0c f0       	brlt	.+2      	; 0x2b68 <main+0x5d0>
    2b66:	43 c0       	rjmp	.+134    	; 0x2bee <main+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	fe 01       	movw	r30, r28
    2b6a:	eb 55       	subi	r30, 0x5B	; 91
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	60 81       	ld	r22, Z
    2b70:	71 81       	ldd	r23, Z+1	; 0x01
    2b72:	82 81       	ldd	r24, Z+2	; 0x02
    2b74:	93 81       	ldd	r25, Z+3	; 0x03
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	8e 01       	movw	r16, r28
    2b88:	01 56       	subi	r16, 0x61	; 97
    2b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	f8 01       	movw	r30, r16
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	1f c0       	rjmp	.+62     	; 0x2bde <main+0x646>
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e3 56       	subi	r30, 0x63	; 99
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e3 56       	subi	r30, 0x63	; 99
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <main+0x620>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e3 56       	subi	r30, 0x63	; 99
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc6:	de 01       	movw	r26, r28
    2bc8:	a1 56       	subi	r26, 0x61	; 97
    2bca:	bf 4f       	sbci	r27, 0xFF	; 255
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e1 56       	subi	r30, 0x61	; 97
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	11 96       	adiw	r26, 0x01	; 1
    2bda:	9c 93       	st	X, r25
    2bdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	fe 01       	movw	r30, r28
    2be0:	e1 56       	subi	r30, 0x61	; 97
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	d1 f6       	brne	.-76     	; 0x2ba0 <main+0x608>
    2bec:	27 c0       	rjmp	.+78     	; 0x2c3c <main+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	8e 01       	movw	r16, r28
    2bf0:	01 56       	subi	r16, 0x61	; 97
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ef 55       	subi	r30, 0x5F	; 95
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    2c10:	de 01       	movw	r26, r28
    2c12:	a5 56       	subi	r26, 0x65	; 101
    2c14:	bf 4f       	sbci	r27, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	e1 56       	subi	r30, 0x61	; 97
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	8d 93       	st	X+, r24
    2c22:	9c 93       	st	X, r25
    2c24:	fe 01       	movw	r30, r28
    2c26:	e5 56       	subi	r30, 0x65	; 101
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <main+0x696>
    2c32:	fe 01       	movw	r30, r28
    2c34:	e5 56       	subi	r30, 0x65	; 101
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	80 83       	st	Z, r24
		if (DIO_U8GetPinValue(PORT_COMMUN,PIN_SAVED_2)){
			PIE_VidDisable(1);
			result++;
			LCD_VidClear();
			//to show state wining
			for (u8 i = 0 ; i < 3 ; i++){
    2c3c:	de 01       	movw	r26, r28
    2c3e:	a7 53       	subi	r26, 0x37	; 55
    2c40:	bf 4f       	sbci	r27, 0xFF	; 255
    2c42:	fe 01       	movw	r30, r28
    2c44:	e7 53       	subi	r30, 0x37	; 55
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	8c 93       	st	X, r24
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e7 53       	subi	r30, 0x37	; 55
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	83 30       	cpi	r24, 0x03	; 3
    2c58:	08 f4       	brcc	.+2      	; 0x2c5c <main+0x6c4>
    2c5a:	7a ce       	rjmp	.-780    	; 0x2950 <main+0x3b8>
                _delay_ms(500);
				LCD_VidClear();
				_delay_ms(500);
	          }//end for loop
			//to show right ping paddle in beginning
			LCD_VidPosCur((Global_row+1)%2,last_col);
    2c5c:	80 91 68 00 	lds	r24, 0x0068
    2c60:	90 91 69 00 	lds	r25, 0x0069
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	22 e0       	ldi	r18, 0x02	; 2
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	b9 01       	movw	r22, r18
    2c6c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__divmodhi4>
    2c70:	6f e0       	ldi	r22, 0x0F	; 15
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(ping_paddle_right);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
			PIE_VidEnable(1);
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	0e 94 2c 0a 	call	0x1458	; 0x1458 <PIE_VidEnable>
		}//end if

		if (pin_out == LOW ){
    2c86:	fe 01       	movw	r30, r28
    2c88:	e5 53       	subi	r30, 0x35	; 53
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 23       	and	r24, r24
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <main+0x6fc>
    2c92:	9c c3       	rjmp	.+1848   	; 0x33cc <main+0xe34>

		//to show fly down
		for(u8 i = 0 ; i < 3 ; i++){
    2c94:	fe 01       	movw	r30, r28
    2c96:	e8 53       	subi	r30, 0x38	; 56
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	10 82       	st	Z, r1
    2c9c:	df c0       	rjmp	.+446    	; 0x2e5c <main+0x8c4>
			//to show  ball up
			LCD_VidPosCur(row_1,local_col);
    2c9e:	80 91 69 00 	lds	r24, 0x0069
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	33 27       	eor	r19, r19
    2ca6:	27 fd       	sbrc	r18, 7
    2ca8:	30 95       	com	r19
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	b9 01       	movw	r22, r18
    2cb0:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    2cb4:	84 e0       	ldi	r24, 0x04	; 4
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e9 56       	subi	r30, 0x69	; 105
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a8 ec       	ldi	r26, 0xC8	; 200
    2cc8:	b2 e4       	ldi	r27, 0x42	; 66
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	0d 56       	subi	r16, 0x6D	; 109
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e9 56       	subi	r30, 0x69	; 105
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	60 81       	ld	r22, Z
    2ce0:	71 81       	ldd	r23, Z+1	; 0x01
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	93 81       	ldd	r25, Z+3	; 0x03
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a ef       	ldi	r20, 0xFA	; 250
    2cec:	54 e4       	ldi	r21, 0x44	; 68
    2cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	80 83       	st	Z, r24
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	a2 83       	std	Z+2, r26	; 0x02
    2cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d00:	fe 01       	movw	r30, r28
    2d02:	ed 56       	subi	r30, 0x6D	; 109
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	44 f4       	brge	.+16     	; 0x2d2e <main+0x796>
		__ticks = 1;
    2d1e:	fe 01       	movw	r30, r28
    2d20:	ef 56       	subi	r30, 0x6F	; 111
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	80 83       	st	Z, r24
    2d2c:	64 c0       	rjmp	.+200    	; 0x2df6 <main+0x85e>
	else if (__tmp > 65535)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ed 56       	subi	r30, 0x6D	; 109
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	3f ef       	ldi	r19, 0xFF	; 255
    2d40:	4f e7       	ldi	r20, 0x7F	; 127
    2d42:	57 e4       	ldi	r21, 0x47	; 71
    2d44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d48:	18 16       	cp	r1, r24
    2d4a:	0c f0       	brlt	.+2      	; 0x2d4e <main+0x7b6>
    2d4c:	43 c0       	rjmp	.+134    	; 0x2dd4 <main+0x83c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e9 56       	subi	r30, 0x69	; 105
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	8e 01       	movw	r16, r28
    2d6e:	0f 56       	subi	r16, 0x6F	; 111
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	f8 01       	movw	r30, r16
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
    2d84:	1f c0       	rjmp	.+62     	; 0x2dc4 <main+0x82c>
    2d86:	fe 01       	movw	r30, r28
    2d88:	e1 57       	subi	r30, 0x71	; 113
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	88 ec       	ldi	r24, 0xC8	; 200
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	fe 01       	movw	r30, r28
    2d96:	e1 57       	subi	r30, 0x71	; 113
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <main+0x806>
    2da2:	fe 01       	movw	r30, r28
    2da4:	e1 57       	subi	r30, 0x71	; 113
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	de 01       	movw	r26, r28
    2dae:	af 56       	subi	r26, 0x6F	; 111
    2db0:	bf 4f       	sbci	r27, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	ef 56       	subi	r30, 0x6F	; 111
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	11 96       	adiw	r26, 0x01	; 1
    2dc0:	9c 93       	st	X, r25
    2dc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ef 56       	subi	r30, 0x6F	; 111
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	d1 f6       	brne	.-76     	; 0x2d86 <main+0x7ee>
    2dd2:	27 c0       	rjmp	.+78     	; 0x2e22 <main+0x88a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	8e 01       	movw	r16, r28
    2dd6:	0f 56       	subi	r16, 0x6F	; 111
    2dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ed 56       	subi	r30, 0x6D	; 109
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	f8 01       	movw	r30, r16
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
    2df6:	de 01       	movw	r26, r28
    2df8:	a3 57       	subi	r26, 0x73	; 115
    2dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ef 56       	subi	r30, 0x6F	; 111
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	8d 93       	st	X+, r24
    2e08:	9c 93       	st	X, r25
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e3 57       	subi	r30, 0x73	; 115
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <main+0x87c>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e3 57       	subi	r30, 0x73	; 115
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(row_1,local_col);
    2e22:	80 91 69 00 	lds	r24, 0x0069
    2e26:	28 2f       	mov	r18, r24
    2e28:	33 27       	eor	r19, r19
    2e2a:	27 fd       	sbrc	r18, 7
    2e2c:	30 95       	com	r19
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	b9 01       	movw	r22, r18
    2e34:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    2e38:	80 e2       	ldi	r24, 0x20	; 32
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

			local_col--;
    2e40:	80 91 69 00 	lds	r24, 0x0069
    2e44:	81 50       	subi	r24, 0x01	; 1
    2e46:	80 93 69 00 	sts	0x0069, r24
		}//end if

		if (pin_out == LOW ){

		//to show fly down
		for(u8 i = 0 ; i < 3 ; i++){
    2e4a:	de 01       	movw	r26, r28
    2e4c:	a8 53       	subi	r26, 0x38	; 56
    2e4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e50:	fe 01       	movw	r30, r28
    2e52:	e8 53       	subi	r30, 0x38	; 56
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	8c 93       	st	X, r24
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e8 53       	subi	r30, 0x38	; 56
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	83 30       	cpi	r24, 0x03	; 3
    2e66:	08 f4       	brcc	.+2      	; 0x2e6a <main+0x8d2>
    2e68:	1a cf       	rjmp	.-460    	; 0x2c9e <main+0x706>

			local_col--;
		}

		//to make ball drop down to up in specific cell and the next to it
		for (s8 i = 1 ; i >= 0 ; i--){
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e9 53       	subi	r30, 0x39	; 57
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	80 83       	st	Z, r24
    2e74:	b6 c1       	rjmp	.+876    	; 0x31e2 <main+0xc4a>
			//to show  ball down right
			LCD_VidPosCur(i,local_col);
    2e76:	fe 01       	movw	r30, r28
    2e78:	e9 53       	subi	r30, 0x39	; 57
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	48 2f       	mov	r20, r24
    2e80:	55 27       	eor	r21, r21
    2e82:	47 fd       	sbrc	r20, 7
    2e84:	50 95       	com	r21
    2e86:	80 91 69 00 	lds	r24, 0x0069
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	33 27       	eor	r19, r19
    2e8e:	27 fd       	sbrc	r18, 7
    2e90:	30 95       	com	r19
    2e92:	ca 01       	movw	r24, r20
    2e94:	b9 01       	movw	r22, r18
    2e96:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(ball_down_right);
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e7 57       	subi	r30, 0x77	; 119
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	a8 ec       	ldi	r26, 0xC8	; 200
    2eae:	b2 e4       	ldi	r27, 0x42	; 66
    2eb0:	80 83       	st	Z, r24
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	a2 83       	std	Z+2, r26	; 0x02
    2eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb8:	8e 01       	movw	r16, r28
    2eba:	0b 57       	subi	r16, 0x7B	; 123
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e7 57       	subi	r30, 0x77	; 119
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a ef       	ldi	r20, 0xFA	; 250
    2ed2:	54 e4       	ldi	r21, 0x44	; 68
    2ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	f8 01       	movw	r30, r16
    2ede:	80 83       	st	Z, r24
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	a2 83       	std	Z+2, r26	; 0x02
    2ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	eb 57       	subi	r30, 0x7B	; 123
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	44 f4       	brge	.+16     	; 0x2f14 <main+0x97c>
		__ticks = 1;
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 57       	subi	r30, 0x7D	; 125
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	64 c0       	rjmp	.+200    	; 0x2fdc <main+0xa44>
	else if (__tmp > 65535)
    2f14:	fe 01       	movw	r30, r28
    2f16:	eb 57       	subi	r30, 0x7B	; 123
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	60 81       	ld	r22, Z
    2f1c:	71 81       	ldd	r23, Z+1	; 0x01
    2f1e:	82 81       	ldd	r24, Z+2	; 0x02
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	3f ef       	ldi	r19, 0xFF	; 255
    2f26:	4f e7       	ldi	r20, 0x7F	; 127
    2f28:	57 e4       	ldi	r21, 0x47	; 71
    2f2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f2e:	18 16       	cp	r1, r24
    2f30:	0c f0       	brlt	.+2      	; 0x2f34 <main+0x99c>
    2f32:	43 c0       	rjmp	.+134    	; 0x2fba <main+0xa22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f34:	fe 01       	movw	r30, r28
    2f36:	e7 57       	subi	r30, 0x77	; 119
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	60 81       	ld	r22, Z
    2f3c:	71 81       	ldd	r23, Z+1	; 0x01
    2f3e:	82 81       	ldd	r24, Z+2	; 0x02
    2f40:	93 81       	ldd	r25, Z+3	; 0x03
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8e 01       	movw	r16, r28
    2f54:	0d 57       	subi	r16, 0x7D	; 125
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	1f c0       	rjmp	.+62     	; 0x2faa <main+0xa12>
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ef 57       	subi	r30, 0x7F	; 127
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	88 ec       	ldi	r24, 0xC8	; 200
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ef 57       	subi	r30, 0x7F	; 127
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <main+0x9ec>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ef 57       	subi	r30, 0x7F	; 127
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f92:	de 01       	movw	r26, r28
    2f94:	ad 57       	subi	r26, 0x7D	; 125
    2f96:	bf 4f       	sbci	r27, 0xFF	; 255
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ed 57       	subi	r30, 0x7D	; 125
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	9c 93       	st	X, r25
    2fa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2faa:	fe 01       	movw	r30, r28
    2fac:	ed 57       	subi	r30, 0x7D	; 125
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	d1 f6       	brne	.-76     	; 0x2f6c <main+0x9d4>
    2fb8:	27 c0       	rjmp	.+78     	; 0x3008 <main+0xa70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fba:	8e 01       	movw	r16, r28
    2fbc:	0d 57       	subi	r16, 0x7D	; 125
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	eb 57       	subi	r30, 0x7B	; 123
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	de 01       	movw	r26, r28
    2fde:	a1 58       	subi	r26, 0x81	; 129
    2fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ed 57       	subi	r30, 0x7D	; 125
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	8d 93       	st	X+, r24
    2fee:	9c 93       	st	X, r25
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e1 58       	subi	r30, 0x81	; 129
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	80 81       	ld	r24, Z
    2ff8:	91 81       	ldd	r25, Z+1	; 0x01
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <main+0xa62>
    2ffe:	fe 01       	movw	r30, r28
    3000:	e1 58       	subi	r30, 0x81	; 129
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
			_delay_ms(100);

			//to show ball up left
			LCD_VidPosCur(i,local_col);
    3008:	fe 01       	movw	r30, r28
    300a:	e9 53       	subi	r30, 0x39	; 57
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	48 2f       	mov	r20, r24
    3012:	55 27       	eor	r21, r21
    3014:	47 fd       	sbrc	r20, 7
    3016:	50 95       	com	r21
    3018:	80 91 69 00 	lds	r24, 0x0069
    301c:	28 2f       	mov	r18, r24
    301e:	33 27       	eor	r19, r19
    3020:	27 fd       	sbrc	r18, 7
    3022:	30 95       	com	r19
    3024:	ca 01       	movw	r24, r20
    3026:	b9 01       	movw	r22, r18
    3028:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    302c:	84 e0       	ldi	r24, 0x04	; 4
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    3034:	fe 01       	movw	r30, r28
    3036:	e5 58       	subi	r30, 0x85	; 133
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	a8 ec       	ldi	r26, 0xC8	; 200
    3040:	b2 e4       	ldi	r27, 0x42	; 66
    3042:	80 83       	st	Z, r24
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	a2 83       	std	Z+2, r26	; 0x02
    3048:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304a:	8e 01       	movw	r16, r28
    304c:	09 58       	subi	r16, 0x89	; 137
    304e:	1f 4f       	sbci	r17, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	e5 58       	subi	r30, 0x85	; 133
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a ef       	ldi	r20, 0xFA	; 250
    3064:	54 e4       	ldi	r21, 0x44	; 68
    3066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	f8 01       	movw	r30, r16
    3070:	80 83       	st	Z, r24
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	a2 83       	std	Z+2, r26	; 0x02
    3076:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3078:	fe 01       	movw	r30, r28
    307a:	e9 58       	subi	r30, 0x89	; 137
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	60 81       	ld	r22, Z
    3080:	71 81       	ldd	r23, Z+1	; 0x01
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	93 81       	ldd	r25, Z+3	; 0x03
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e8       	ldi	r20, 0x80	; 128
    308c:	5f e3       	ldi	r21, 0x3F	; 63
    308e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3092:	88 23       	and	r24, r24
    3094:	44 f4       	brge	.+16     	; 0x30a6 <main+0xb0e>
		__ticks = 1;
    3096:	fe 01       	movw	r30, r28
    3098:	eb 58       	subi	r30, 0x8B	; 139
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
    30a4:	64 c0       	rjmp	.+200    	; 0x316e <main+0xbd6>
	else if (__tmp > 65535)
    30a6:	fe 01       	movw	r30, r28
    30a8:	e9 58       	subi	r30, 0x89	; 137
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <main+0xb2e>
    30c4:	43 c0       	rjmp	.+134    	; 0x314c <main+0xbb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c6:	fe 01       	movw	r30, r28
    30c8:	e5 58       	subi	r30, 0x85	; 133
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	8e 01       	movw	r16, r28
    30e6:	0b 58       	subi	r16, 0x8B	; 139
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	f8 01       	movw	r30, r16
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	80 83       	st	Z, r24
    30fc:	1f c0       	rjmp	.+62     	; 0x313c <main+0xba4>
    30fe:	fe 01       	movw	r30, r28
    3100:	ed 58       	subi	r30, 0x8D	; 141
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	88 ec       	ldi	r24, 0xC8	; 200
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
    310c:	fe 01       	movw	r30, r28
    310e:	ed 58       	subi	r30, 0x8D	; 141
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <main+0xb7e>
    311a:	fe 01       	movw	r30, r28
    311c:	ed 58       	subi	r30, 0x8D	; 141
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3124:	de 01       	movw	r26, r28
    3126:	ab 58       	subi	r26, 0x8B	; 139
    3128:	bf 4f       	sbci	r27, 0xFF	; 255
    312a:	fe 01       	movw	r30, r28
    312c:	eb 58       	subi	r30, 0x8B	; 139
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	11 96       	adiw	r26, 0x01	; 1
    3138:	9c 93       	st	X, r25
    313a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313c:	fe 01       	movw	r30, r28
    313e:	eb 58       	subi	r30, 0x8B	; 139
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	d1 f6       	brne	.-76     	; 0x30fe <main+0xb66>
    314a:	27 c0       	rjmp	.+78     	; 0x319a <main+0xc02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	8e 01       	movw	r16, r28
    314e:	0b 58       	subi	r16, 0x8B	; 139
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	fe 01       	movw	r30, r28
    3154:	e9 58       	subi	r30, 0x89	; 137
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	f8 01       	movw	r30, r16
    316a:	91 83       	std	Z+1, r25	; 0x01
    316c:	80 83       	st	Z, r24
    316e:	de 01       	movw	r26, r28
    3170:	af 58       	subi	r26, 0x8F	; 143
    3172:	bf 4f       	sbci	r27, 0xFF	; 255
    3174:	fe 01       	movw	r30, r28
    3176:	eb 58       	subi	r30, 0x8B	; 139
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	80 81       	ld	r24, Z
    317c:	91 81       	ldd	r25, Z+1	; 0x01
    317e:	8d 93       	st	X+, r24
    3180:	9c 93       	st	X, r25
    3182:	fe 01       	movw	r30, r28
    3184:	ef 58       	subi	r30, 0x8F	; 143
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <main+0xbf4>
    3190:	fe 01       	movw	r30, r28
    3192:	ef 58       	subi	r30, 0x8F	; 143
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	91 83       	std	Z+1, r25	; 0x01
    3198:	80 83       	st	Z, r24
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(i,local_col);
    319a:	fe 01       	movw	r30, r28
    319c:	e9 53       	subi	r30, 0x39	; 57
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	48 2f       	mov	r20, r24
    31a4:	55 27       	eor	r21, r21
    31a6:	47 fd       	sbrc	r20, 7
    31a8:	50 95       	com	r21
    31aa:	80 91 69 00 	lds	r24, 0x0069
    31ae:	28 2f       	mov	r18, r24
    31b0:	33 27       	eor	r19, r19
    31b2:	27 fd       	sbrc	r18, 7
    31b4:	30 95       	com	r19
    31b6:	ca 01       	movw	r24, r20
    31b8:	b9 01       	movw	r22, r18
    31ba:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    31be:	80 e2       	ldi	r24, 0x20	; 32
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

			local_col-- ;
    31c6:	80 91 69 00 	lds	r24, 0x0069
    31ca:	81 50       	subi	r24, 0x01	; 1
    31cc:	80 93 69 00 	sts	0x0069, r24

			local_col--;
		}

		//to make ball drop down to up in specific cell and the next to it
		for (s8 i = 1 ; i >= 0 ; i--){
    31d0:	de 01       	movw	r26, r28
    31d2:	a9 53       	subi	r26, 0x39	; 57
    31d4:	bf 4f       	sbci	r27, 0xFF	; 255
    31d6:	fe 01       	movw	r30, r28
    31d8:	e9 53       	subi	r30, 0x39	; 57
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	81 50       	subi	r24, 0x01	; 1
    31e0:	8c 93       	st	X, r24
    31e2:	fe 01       	movw	r30, r28
    31e4:	e9 53       	subi	r30, 0x39	; 57
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	88 23       	and	r24, r24
    31ec:	0c f0       	brlt	.+2      	; 0x31f0 <main+0xc58>
    31ee:	43 ce       	rjmp	.-890    	; 0x2e76 <main+0x8de>
    31f0:	da c0       	rjmp	.+436    	; 0x33a6 <main+0xe0e>

		//to make ball fly up
        while (local_col <= 12 && local_col >= 0){

			//to show  ball up
			LCD_VidPosCur(row_0,local_col);
    31f2:	80 91 69 00 	lds	r24, 0x0069
    31f6:	28 2f       	mov	r18, r24
    31f8:	33 27       	eor	r19, r19
    31fa:	27 fd       	sbrc	r18, 7
    31fc:	30 95       	com	r19
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	b9 01       	movw	r22, r18
    3204:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    3208:	84 e0       	ldi	r24, 0x04	; 4
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    3210:	fe 01       	movw	r30, r28
    3212:	e3 59       	subi	r30, 0x93	; 147
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	a8 ec       	ldi	r26, 0xC8	; 200
    321c:	b2 e4       	ldi	r27, 0x42	; 66
    321e:	80 83       	st	Z, r24
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	a2 83       	std	Z+2, r26	; 0x02
    3224:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	8e 01       	movw	r16, r28
    3228:	07 59       	subi	r16, 0x97	; 151
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	e3 59       	subi	r30, 0x93	; 147
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a ef       	ldi	r20, 0xFA	; 250
    3240:	54 e4       	ldi	r21, 0x44	; 68
    3242:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	80 83       	st	Z, r24
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	a2 83       	std	Z+2, r26	; 0x02
    3252:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3254:	fe 01       	movw	r30, r28
    3256:	e7 59       	subi	r30, 0x97	; 151
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	60 81       	ld	r22, Z
    325c:	71 81       	ldd	r23, Z+1	; 0x01
    325e:	82 81       	ldd	r24, Z+2	; 0x02
    3260:	93 81       	ldd	r25, Z+3	; 0x03
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e8       	ldi	r20, 0x80	; 128
    3268:	5f e3       	ldi	r21, 0x3F	; 63
    326a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    326e:	88 23       	and	r24, r24
    3270:	44 f4       	brge	.+16     	; 0x3282 <main+0xcea>
		__ticks = 1;
    3272:	fe 01       	movw	r30, r28
    3274:	e9 59       	subi	r30, 0x99	; 153
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
    3280:	64 c0       	rjmp	.+200    	; 0x334a <main+0xdb2>
	else if (__tmp > 65535)
    3282:	fe 01       	movw	r30, r28
    3284:	e7 59       	subi	r30, 0x97	; 151
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	60 81       	ld	r22, Z
    328a:	71 81       	ldd	r23, Z+1	; 0x01
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	93 81       	ldd	r25, Z+3	; 0x03
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	0c f0       	brlt	.+2      	; 0x32a2 <main+0xd0a>
    32a0:	43 c0       	rjmp	.+134    	; 0x3328 <main+0xd90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a2:	fe 01       	movw	r30, r28
    32a4:	e3 59       	subi	r30, 0x93	; 147
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	60 81       	ld	r22, Z
    32aa:	71 81       	ldd	r23, Z+1	; 0x01
    32ac:	82 81       	ldd	r24, Z+2	; 0x02
    32ae:	93 81       	ldd	r25, Z+3	; 0x03
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8e 01       	movw	r16, r28
    32c2:	09 59       	subi	r16, 0x99	; 153
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	f8 01       	movw	r30, r16
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	1f c0       	rjmp	.+62     	; 0x3318 <main+0xd80>
    32da:	fe 01       	movw	r30, r28
    32dc:	eb 59       	subi	r30, 0x9B	; 155
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	88 ec       	ldi	r24, 0xC8	; 200
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
    32e8:	fe 01       	movw	r30, r28
    32ea:	eb 59       	subi	r30, 0x9B	; 155
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <main+0xd5a>
    32f6:	fe 01       	movw	r30, r28
    32f8:	eb 59       	subi	r30, 0x9B	; 155
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3300:	de 01       	movw	r26, r28
    3302:	a9 59       	subi	r26, 0x99	; 153
    3304:	bf 4f       	sbci	r27, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	e9 59       	subi	r30, 0x99	; 153
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	11 96       	adiw	r26, 0x01	; 1
    3314:	9c 93       	st	X, r25
    3316:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	fe 01       	movw	r30, r28
    331a:	e9 59       	subi	r30, 0x99	; 153
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	d1 f6       	brne	.-76     	; 0x32da <main+0xd42>
    3326:	27 c0       	rjmp	.+78     	; 0x3376 <main+0xdde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3328:	8e 01       	movw	r16, r28
    332a:	09 59       	subi	r16, 0x99	; 153
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	fe 01       	movw	r30, r28
    3330:	e7 59       	subi	r30, 0x97	; 151
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	de 01       	movw	r26, r28
    334c:	ad 59       	subi	r26, 0x9D	; 157
    334e:	bf 4f       	sbci	r27, 0xFF	; 255
    3350:	fe 01       	movw	r30, r28
    3352:	e9 59       	subi	r30, 0x99	; 153
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	8d 93       	st	X+, r24
    335c:	9c 93       	st	X, r25
    335e:	fe 01       	movw	r30, r28
    3360:	ed 59       	subi	r30, 0x9D	; 157
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <main+0xdd0>
    336c:	fe 01       	movw	r30, r28
    336e:	ed 59       	subi	r30, 0x9D	; 157
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(row_0,local_col);
    3376:	80 91 69 00 	lds	r24, 0x0069
    337a:	28 2f       	mov	r18, r24
    337c:	33 27       	eor	r19, r19
    337e:	27 fd       	sbrc	r18, 7
    3380:	30 95       	com	r19
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	b9 01       	movw	r22, r18
    3388:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    338c:	80 e2       	ldi	r24, 0x20	; 32
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
            if (local_col == 0){
    3394:	80 91 69 00 	lds	r24, 0x0069
    3398:	88 23       	and	r24, r24
    339a:	71 f0       	breq	.+28     	; 0x33b8 <main+0xe20>
            	break ;
            }//end if
            else {
            	local_col--;
    339c:	80 91 69 00 	lds	r24, 0x0069
    33a0:	81 50       	subi	r24, 0x01	; 1
    33a2:	80 93 69 00 	sts	0x0069, r24

			local_col-- ;
		}//end for loop

		//to make ball fly up
        while (local_col <= 12 && local_col >= 0){
    33a6:	80 91 69 00 	lds	r24, 0x0069
    33aa:	8d 30       	cpi	r24, 0x0D	; 13
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <main+0xe20>
    33ae:	80 91 69 00 	lds	r24, 0x0069
    33b2:	88 23       	and	r24, r24
    33b4:	0c f0       	brlt	.+2      	; 0x33b8 <main+0xe20>
    33b6:	1d cf       	rjmp	.-454    	; 0x31f2 <main+0xc5a>
            }//end else

        }

			//out high voltage
			DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,HIGH);
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	62 e0       	ldi	r22, 0x02	; 2
    33bc:	41 e0       	ldi	r20, 0x01	; 1
    33be:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
			pin_out = HIGH ;
    33c2:	fe 01       	movw	r30, r28
    33c4:	e5 53       	subi	r30, 0x35	; 53
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	80 83       	st	Z, r24
		}//end if pin out

		//to show ball in opposite direction

		//to be sure that u get high voltage
		if ( DIO_U8GetPinValue(PORT_COMMUN,PIN_IN) ){
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	63 e0       	ldi	r22, 0x03	; 3
    33d0:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_U8GetPinValue>
    33d4:	88 23       	and	r24, r24
    33d6:	09 f4       	brne	.+2      	; 0x33da <main+0xe42>
    33d8:	a1 ca       	rjmp	.-2750   	; 0x291c <main+0x384>

			//out zero voltage
			DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,0);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	62 e0       	ldi	r22, 0x02	; 2
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
			pin_out = 0 ;
    33e4:	fe 01       	movw	r30, r28
    33e6:	e5 53       	subi	r30, 0x35	; 53
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	10 82       	st	Z, r1
    33ec:	da c0       	rjmp	.+436    	; 0x35a2 <main+0x100a>

			//to make ball fly up in opposite direction
			while (local_col <= 11 && local_col >= 0){

			//to show  ball up
			LCD_VidPosCur(row_0,local_col);
    33ee:	80 91 69 00 	lds	r24, 0x0069
    33f2:	28 2f       	mov	r18, r24
    33f4:	33 27       	eor	r19, r19
    33f6:	27 fd       	sbrc	r18, 7
    33f8:	30 95       	com	r19
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	b9 01       	movw	r22, r18
    3400:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    3404:	84 e0       	ldi	r24, 0x04	; 4
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    340c:	fe 01       	movw	r30, r28
    340e:	e1 5a       	subi	r30, 0xA1	; 161
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a8 ec       	ldi	r26, 0xC8	; 200
    3418:	b2 e4       	ldi	r27, 0x42	; 66
    341a:	80 83       	st	Z, r24
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	a2 83       	std	Z+2, r26	; 0x02
    3420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3422:	8e 01       	movw	r16, r28
    3424:	05 5a       	subi	r16, 0xA5	; 165
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	fe 01       	movw	r30, r28
    342a:	e1 5a       	subi	r30, 0xA1	; 161
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	4a ef       	ldi	r20, 0xFA	; 250
    343c:	54 e4       	ldi	r21, 0x44	; 68
    343e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	f8 01       	movw	r30, r16
    3448:	80 83       	st	Z, r24
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	a2 83       	std	Z+2, r26	; 0x02
    344e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3450:	fe 01       	movw	r30, r28
    3452:	e5 5a       	subi	r30, 0xA5	; 165
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	60 81       	ld	r22, Z
    3458:	71 81       	ldd	r23, Z+1	; 0x01
    345a:	82 81       	ldd	r24, Z+2	; 0x02
    345c:	93 81       	ldd	r25, Z+3	; 0x03
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e8       	ldi	r20, 0x80	; 128
    3464:	5f e3       	ldi	r21, 0x3F	; 63
    3466:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    346a:	88 23       	and	r24, r24
    346c:	44 f4       	brge	.+16     	; 0x347e <main+0xee6>
		__ticks = 1;
    346e:	fe 01       	movw	r30, r28
    3470:	e7 5a       	subi	r30, 0xA7	; 167
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	80 83       	st	Z, r24
    347c:	64 c0       	rjmp	.+200    	; 0x3546 <main+0xfae>
	else if (__tmp > 65535)
    347e:	fe 01       	movw	r30, r28
    3480:	e5 5a       	subi	r30, 0xA5	; 165
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	60 81       	ld	r22, Z
    3486:	71 81       	ldd	r23, Z+1	; 0x01
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	93 81       	ldd	r25, Z+3	; 0x03
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	3f ef       	ldi	r19, 0xFF	; 255
    3490:	4f e7       	ldi	r20, 0x7F	; 127
    3492:	57 e4       	ldi	r21, 0x47	; 71
    3494:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3498:	18 16       	cp	r1, r24
    349a:	0c f0       	brlt	.+2      	; 0x349e <main+0xf06>
    349c:	43 c0       	rjmp	.+134    	; 0x3524 <main+0xf8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349e:	fe 01       	movw	r30, r28
    34a0:	e1 5a       	subi	r30, 0xA1	; 161
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	51 e4       	ldi	r21, 0x41	; 65
    34b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	8e 01       	movw	r16, r28
    34be:	07 5a       	subi	r16, 0xA7	; 167
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	bc 01       	movw	r22, r24
    34c4:	cd 01       	movw	r24, r26
    34c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	f8 01       	movw	r30, r16
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	80 83       	st	Z, r24
    34d4:	1f c0       	rjmp	.+62     	; 0x3514 <main+0xf7c>
    34d6:	fe 01       	movw	r30, r28
    34d8:	e9 5a       	subi	r30, 0xA9	; 169
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	88 ec       	ldi	r24, 0xC8	; 200
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
    34e4:	fe 01       	movw	r30, r28
    34e6:	e9 5a       	subi	r30, 0xA9	; 169
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <main+0xf56>
    34f2:	fe 01       	movw	r30, r28
    34f4:	e9 5a       	subi	r30, 0xA9	; 169
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fc:	de 01       	movw	r26, r28
    34fe:	a7 5a       	subi	r26, 0xA7	; 167
    3500:	bf 4f       	sbci	r27, 0xFF	; 255
    3502:	fe 01       	movw	r30, r28
    3504:	e7 5a       	subi	r30, 0xA7	; 167
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	11 96       	adiw	r26, 0x01	; 1
    3510:	9c 93       	st	X, r25
    3512:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3514:	fe 01       	movw	r30, r28
    3516:	e7 5a       	subi	r30, 0xA7	; 167
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	d1 f6       	brne	.-76     	; 0x34d6 <main+0xf3e>
    3522:	27 c0       	rjmp	.+78     	; 0x3572 <main+0xfda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3524:	8e 01       	movw	r16, r28
    3526:	07 5a       	subi	r16, 0xA7	; 167
    3528:	1f 4f       	sbci	r17, 0xFF	; 255
    352a:	fe 01       	movw	r30, r28
    352c:	e5 5a       	subi	r30, 0xA5	; 165
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	60 81       	ld	r22, Z
    3532:	71 81       	ldd	r23, Z+1	; 0x01
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	f8 01       	movw	r30, r16
    3542:	91 83       	std	Z+1, r25	; 0x01
    3544:	80 83       	st	Z, r24
    3546:	de 01       	movw	r26, r28
    3548:	ab 5a       	subi	r26, 0xAB	; 171
    354a:	bf 4f       	sbci	r27, 0xFF	; 255
    354c:	fe 01       	movw	r30, r28
    354e:	e7 5a       	subi	r30, 0xA7	; 167
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	80 81       	ld	r24, Z
    3554:	91 81       	ldd	r25, Z+1	; 0x01
    3556:	8d 93       	st	X+, r24
    3558:	9c 93       	st	X, r25
    355a:	fe 01       	movw	r30, r28
    355c:	eb 5a       	subi	r30, 0xAB	; 171
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <main+0xfcc>
    3568:	fe 01       	movw	r30, r28
    356a:	eb 5a       	subi	r30, 0xAB	; 171
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	80 83       	st	Z, r24
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(row_0,local_col);
    3572:	80 91 69 00 	lds	r24, 0x0069
    3576:	28 2f       	mov	r18, r24
    3578:	33 27       	eor	r19, r19
    357a:	27 fd       	sbrc	r18, 7
    357c:	30 95       	com	r19
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	b9 01       	movw	r22, r18
    3584:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    3588:	80 e2       	ldi	r24, 0x20	; 32
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
			if (local_col == 11){
    3590:	80 91 69 00 	lds	r24, 0x0069
    3594:	8b 30       	cpi	r24, 0x0B	; 11
    3596:	71 f0       	breq	.+28     	; 0x35b4 <main+0x101c>
			      break ;
			}//end if
			else {
			      local_col++ ;
    3598:	80 91 69 00 	lds	r24, 0x0069
    359c:	8f 5f       	subi	r24, 0xFF	; 255
    359e:	80 93 69 00 	sts	0x0069, r24
			//out zero voltage
			DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,0);
			pin_out = 0 ;

			//to make ball fly up in opposite direction
			while (local_col <= 11 && local_col >= 0){
    35a2:	80 91 69 00 	lds	r24, 0x0069
    35a6:	8c 30       	cpi	r24, 0x0C	; 12
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <main+0x101c>
    35aa:	80 91 69 00 	lds	r24, 0x0069
    35ae:	88 23       	and	r24, r24
    35b0:	0c f0       	brlt	.+2      	; 0x35b4 <main+0x101c>
    35b2:	1d cf       	rjmp	.-454    	; 0x33ee <main+0xe56>
		    }//end while

			 //to make ball drop from up to down

			 //to show  ball down right
			  LCD_VidPosCur(row_0,local_col);
    35b4:	80 91 69 00 	lds	r24, 0x0069
    35b8:	28 2f       	mov	r18, r24
    35ba:	33 27       	eor	r19, r19
    35bc:	27 fd       	sbrc	r18, 7
    35be:	30 95       	com	r19
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	b9 01       	movw	r22, r18
    35c6:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
		      LCD_VidSendChar(ball_down_right);
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    35d2:	fe 01       	movw	r30, r28
    35d4:	ef 5a       	subi	r30, 0xAF	; 175
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	a8 ec       	ldi	r26, 0xC8	; 200
    35de:	b2 e4       	ldi	r27, 0x42	; 66
    35e0:	80 83       	st	Z, r24
    35e2:	91 83       	std	Z+1, r25	; 0x01
    35e4:	a2 83       	std	Z+2, r26	; 0x02
    35e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e8:	8e 01       	movw	r16, r28
    35ea:	03 5b       	subi	r16, 0xB3	; 179
    35ec:	1f 4f       	sbci	r17, 0xFF	; 255
    35ee:	fe 01       	movw	r30, r28
    35f0:	ef 5a       	subi	r30, 0xAF	; 175
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a ef       	ldi	r20, 0xFA	; 250
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	f8 01       	movw	r30, r16
    360e:	80 83       	st	Z, r24
    3610:	91 83       	std	Z+1, r25	; 0x01
    3612:	a2 83       	std	Z+2, r26	; 0x02
    3614:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3616:	fe 01       	movw	r30, r28
    3618:	e3 5b       	subi	r30, 0xB3	; 179
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e8       	ldi	r20, 0x80	; 128
    362a:	5f e3       	ldi	r21, 0x3F	; 63
    362c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3630:	88 23       	and	r24, r24
    3632:	44 f4       	brge	.+16     	; 0x3644 <main+0x10ac>
		__ticks = 1;
    3634:	fe 01       	movw	r30, r28
    3636:	e5 5b       	subi	r30, 0xB5	; 181
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	91 83       	std	Z+1, r25	; 0x01
    3640:	80 83       	st	Z, r24
    3642:	64 c0       	rjmp	.+200    	; 0x370c <main+0x1174>
	else if (__tmp > 65535)
    3644:	fe 01       	movw	r30, r28
    3646:	e3 5b       	subi	r30, 0xB3	; 179
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	3f ef       	ldi	r19, 0xFF	; 255
    3656:	4f e7       	ldi	r20, 0x7F	; 127
    3658:	57 e4       	ldi	r21, 0x47	; 71
    365a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    365e:	18 16       	cp	r1, r24
    3660:	0c f0       	brlt	.+2      	; 0x3664 <main+0x10cc>
    3662:	43 c0       	rjmp	.+134    	; 0x36ea <main+0x1152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3664:	fe 01       	movw	r30, r28
    3666:	ef 5a       	subi	r30, 0xAF	; 175
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	60 81       	ld	r22, Z
    366c:	71 81       	ldd	r23, Z+1	; 0x01
    366e:	82 81       	ldd	r24, Z+2	; 0x02
    3670:	93 81       	ldd	r25, Z+3	; 0x03
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e2       	ldi	r20, 0x20	; 32
    3678:	51 e4       	ldi	r21, 0x41	; 65
    367a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	8e 01       	movw	r16, r28
    3684:	05 5b       	subi	r16, 0xB5	; 181
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	f8 01       	movw	r30, r16
    3696:	91 83       	std	Z+1, r25	; 0x01
    3698:	80 83       	st	Z, r24
    369a:	1f c0       	rjmp	.+62     	; 0x36da <main+0x1142>
    369c:	fe 01       	movw	r30, r28
    369e:	e7 5b       	subi	r30, 0xB7	; 183
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	88 ec       	ldi	r24, 0xC8	; 200
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
    36aa:	fe 01       	movw	r30, r28
    36ac:	e7 5b       	subi	r30, 0xB7	; 183
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <main+0x111c>
    36b8:	fe 01       	movw	r30, r28
    36ba:	e7 5b       	subi	r30, 0xB7	; 183
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c2:	de 01       	movw	r26, r28
    36c4:	a5 5b       	subi	r26, 0xB5	; 181
    36c6:	bf 4f       	sbci	r27, 0xFF	; 255
    36c8:	fe 01       	movw	r30, r28
    36ca:	e5 5b       	subi	r30, 0xB5	; 181
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 81       	ld	r24, Z
    36d0:	91 81       	ldd	r25, Z+1	; 0x01
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	11 96       	adiw	r26, 0x01	; 1
    36d6:	9c 93       	st	X, r25
    36d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36da:	fe 01       	movw	r30, r28
    36dc:	e5 5b       	subi	r30, 0xB5	; 181
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	d1 f6       	brne	.-76     	; 0x369c <main+0x1104>
    36e8:	27 c0       	rjmp	.+78     	; 0x3738 <main+0x11a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ea:	8e 01       	movw	r16, r28
    36ec:	05 5b       	subi	r16, 0xB5	; 181
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
    36f0:	fe 01       	movw	r30, r28
    36f2:	e3 5b       	subi	r30, 0xB3	; 179
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	60 81       	ld	r22, Z
    36f8:	71 81       	ldd	r23, Z+1	; 0x01
    36fa:	82 81       	ldd	r24, Z+2	; 0x02
    36fc:	93 81       	ldd	r25, Z+3	; 0x03
    36fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	f8 01       	movw	r30, r16
    3708:	91 83       	std	Z+1, r25	; 0x01
    370a:	80 83       	st	Z, r24
    370c:	de 01       	movw	r26, r28
    370e:	a9 5b       	subi	r26, 0xB9	; 185
    3710:	bf 4f       	sbci	r27, 0xFF	; 255
    3712:	fe 01       	movw	r30, r28
    3714:	e5 5b       	subi	r30, 0xB5	; 181
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	8d 93       	st	X+, r24
    371e:	9c 93       	st	X, r25
    3720:	fe 01       	movw	r30, r28
    3722:	e9 5b       	subi	r30, 0xB9	; 185
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	91 81       	ldd	r25, Z+1	; 0x01
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <main+0x1192>
    372e:	fe 01       	movw	r30, r28
    3730:	e9 5b       	subi	r30, 0xB9	; 185
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	80 83       	st	Z, r24
			 _delay_ms(100);

			 //to clear cell
			  LCD_VidPosCur(row_0,local_col);
    3738:	80 91 69 00 	lds	r24, 0x0069
    373c:	28 2f       	mov	r18, r24
    373e:	33 27       	eor	r19, r19
    3740:	27 fd       	sbrc	r18, 7
    3742:	30 95       	com	r19
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	b9 01       	movw	r22, r18
    374a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			  LCD_VidSendChar(' ');
    374e:	80 e2       	ldi	r24, 0x20	; 32
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

			  local_col++ ;
    3756:	80 91 69 00 	lds	r24, 0x0069
    375a:	8f 5f       	subi	r24, 0xFF	; 255
    375c:	80 93 69 00 	sts	0x0069, r24

			  //to make ball drop up to down in specific cell and the next to it
			  for (s8 i = 1 ; i >= 0 ; i--){
    3760:	fe 01       	movw	r30, r28
    3762:	ea 53       	subi	r30, 0x3A	; 58
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	80 83       	st	Z, r24
    376a:	47 c1       	rjmp	.+654    	; 0x39fa <main+0x1462>

			   //to show  ball down left
			   LCD_VidPosCur(i,local_col);
    376c:	fe 01       	movw	r30, r28
    376e:	ea 53       	subi	r30, 0x3A	; 58
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 81       	ld	r24, Z
    3774:	48 2f       	mov	r20, r24
    3776:	55 27       	eor	r21, r21
    3778:	47 fd       	sbrc	r20, 7
    377a:	50 95       	com	r21
    377c:	80 91 69 00 	lds	r24, 0x0069
    3780:	28 2f       	mov	r18, r24
    3782:	33 27       	eor	r19, r19
    3784:	27 fd       	sbrc	r18, 7
    3786:	30 95       	com	r19
    3788:	ca 01       	movw	r24, r20
    378a:	b9 01       	movw	r22, r18
    378c:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			   LCD_VidSendChar(ball_down_left);
    3790:	83 e0       	ldi	r24, 0x03	; 3
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    3798:	fe 01       	movw	r30, r28
    379a:	ed 5b       	subi	r30, 0xBD	; 189
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	a8 ec       	ldi	r26, 0xC8	; 200
    37a4:	b2 e4       	ldi	r27, 0x42	; 66
    37a6:	80 83       	st	Z, r24
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	a2 83       	std	Z+2, r26	; 0x02
    37ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ae:	8e 01       	movw	r16, r28
    37b0:	01 5c       	subi	r16, 0xC1	; 193
    37b2:	1f 4f       	sbci	r17, 0xFF	; 255
    37b4:	fe 01       	movw	r30, r28
    37b6:	ed 5b       	subi	r30, 0xBD	; 189
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	60 81       	ld	r22, Z
    37bc:	71 81       	ldd	r23, Z+1	; 0x01
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	f8 01       	movw	r30, r16
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37dc:	fe 01       	movw	r30, r28
    37de:	ff 96       	adiw	r30, 0x3f	; 63
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f e3       	ldi	r21, 0x3F	; 63
    37f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    37f4:	88 23       	and	r24, r24
    37f6:	2c f4       	brge	.+10     	; 0x3802 <main+0x126a>
		__ticks = 1;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	9e af       	std	Y+62, r25	; 0x3e
    37fe:	8d af       	std	Y+61, r24	; 0x3d
    3800:	46 c0       	rjmp	.+140    	; 0x388e <main+0x12f6>
	else if (__tmp > 65535)
    3802:	fe 01       	movw	r30, r28
    3804:	ff 96       	adiw	r30, 0x3f	; 63
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    381a:	18 16       	cp	r1, r24
    381c:	64 f5       	brge	.+88     	; 0x3876 <main+0x12de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381e:	fe 01       	movw	r30, r28
    3820:	ed 5b       	subi	r30, 0xBD	; 189
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	60 81       	ld	r22, Z
    3826:	71 81       	ldd	r23, Z+1	; 0x01
    3828:	82 81       	ldd	r24, Z+2	; 0x02
    382a:	93 81       	ldd	r25, Z+3	; 0x03
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	40 e2       	ldi	r20, 0x20	; 32
    3832:	51 e4       	ldi	r21, 0x41	; 65
    3834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	bc 01       	movw	r22, r24
    383e:	cd 01       	movw	r24, r26
    3840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	9e af       	std	Y+62, r25	; 0x3e
    384a:	8d af       	std	Y+61, r24	; 0x3d
    384c:	0f c0       	rjmp	.+30     	; 0x386c <main+0x12d4>
    384e:	88 ec       	ldi	r24, 0xC8	; 200
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	9c af       	std	Y+60, r25	; 0x3c
    3854:	8b af       	std	Y+59, r24	; 0x3b
    3856:	8b ad       	ldd	r24, Y+59	; 0x3b
    3858:	9c ad       	ldd	r25, Y+60	; 0x3c
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <main+0x12c2>
    385e:	9c af       	std	Y+60, r25	; 0x3c
    3860:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3862:	8d ad       	ldd	r24, Y+61	; 0x3d
    3864:	9e ad       	ldd	r25, Y+62	; 0x3e
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	9e af       	std	Y+62, r25	; 0x3e
    386a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386c:	8d ad       	ldd	r24, Y+61	; 0x3d
    386e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	69 f7       	brne	.-38     	; 0x384e <main+0x12b6>
    3874:	16 c0       	rjmp	.+44     	; 0x38a2 <main+0x130a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3876:	fe 01       	movw	r30, r28
    3878:	ff 96       	adiw	r30, 0x3f	; 63
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	9e af       	std	Y+62, r25	; 0x3e
    388c:	8d af       	std	Y+61, r24	; 0x3d
    388e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3890:	9e ad       	ldd	r25, Y+62	; 0x3e
    3892:	9a af       	std	Y+58, r25	; 0x3a
    3894:	89 af       	std	Y+57, r24	; 0x39
    3896:	89 ad       	ldd	r24, Y+57	; 0x39
    3898:	9a ad       	ldd	r25, Y+58	; 0x3a
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <main+0x1302>
    389e:	9a af       	std	Y+58, r25	; 0x3a
    38a0:	89 af       	std	Y+57, r24	; 0x39
			   _delay_ms(100);

			   //to show ball up left
			   LCD_VidPosCur(i,local_col);
    38a2:	fe 01       	movw	r30, r28
    38a4:	ea 53       	subi	r30, 0x3A	; 58
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 81       	ld	r24, Z
    38aa:	48 2f       	mov	r20, r24
    38ac:	55 27       	eor	r21, r21
    38ae:	47 fd       	sbrc	r20, 7
    38b0:	50 95       	com	r21
    38b2:	80 91 69 00 	lds	r24, 0x0069
    38b6:	28 2f       	mov	r18, r24
    38b8:	33 27       	eor	r19, r19
    38ba:	27 fd       	sbrc	r18, 7
    38bc:	30 95       	com	r19
    38be:	ca 01       	movw	r24, r20
    38c0:	b9 01       	movw	r22, r18
    38c2:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			   LCD_VidSendChar(ball_up_right);
    38c6:	85 e0       	ldi	r24, 0x05	; 5
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	a8 ec       	ldi	r26, 0xC8	; 200
    38d4:	b2 e4       	ldi	r27, 0x42	; 66
    38d6:	8d ab       	std	Y+53, r24	; 0x35
    38d8:	9e ab       	std	Y+54, r25	; 0x36
    38da:	af ab       	std	Y+55, r26	; 0x37
    38dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	6d a9       	ldd	r22, Y+53	; 0x35
    38e0:	7e a9       	ldd	r23, Y+54	; 0x36
    38e2:	8f a9       	ldd	r24, Y+55	; 0x37
    38e4:	98 ad       	ldd	r25, Y+56	; 0x38
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a ef       	ldi	r20, 0xFA	; 250
    38ec:	54 e4       	ldi	r21, 0x44	; 68
    38ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	89 ab       	std	Y+49, r24	; 0x31
    38f8:	9a ab       	std	Y+50, r25	; 0x32
    38fa:	ab ab       	std	Y+51, r26	; 0x33
    38fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3900:	7a a9       	ldd	r23, Y+50	; 0x32
    3902:	8b a9       	ldd	r24, Y+51	; 0x33
    3904:	9c a9       	ldd	r25, Y+52	; 0x34
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <main+0x1388>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	98 ab       	std	Y+48, r25	; 0x30
    391c:	8f a7       	std	Y+47, r24	; 0x2f
    391e:	3f c0       	rjmp	.+126    	; 0x399e <main+0x1406>
	else if (__tmp > 65535)
    3920:	69 a9       	ldd	r22, Y+49	; 0x31
    3922:	7a a9       	ldd	r23, Y+50	; 0x32
    3924:	8b a9       	ldd	r24, Y+51	; 0x33
    3926:	9c a9       	ldd	r25, Y+52	; 0x34
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <main+0x13f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	6d a9       	ldd	r22, Y+53	; 0x35
    393a:	7e a9       	ldd	r23, Y+54	; 0x36
    393c:	8f a9       	ldd	r24, Y+55	; 0x37
    393e:	98 ad       	ldd	r25, Y+56	; 0x38
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	98 ab       	std	Y+48, r25	; 0x30
    395e:	8f a7       	std	Y+47, r24	; 0x2f
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <main+0x13e8>
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9e a7       	std	Y+46, r25	; 0x2e
    3968:	8d a7       	std	Y+45, r24	; 0x2d
    396a:	8d a5       	ldd	r24, Y+45	; 0x2d
    396c:	9e a5       	ldd	r25, Y+46	; 0x2e
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <main+0x13d6>
    3972:	9e a7       	std	Y+46, r25	; 0x2e
    3974:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8f a5       	ldd	r24, Y+47	; 0x2f
    3978:	98 a9       	ldd	r25, Y+48	; 0x30
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	98 ab       	std	Y+48, r25	; 0x30
    397e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8f a5       	ldd	r24, Y+47	; 0x2f
    3982:	98 a9       	ldd	r25, Y+48	; 0x30
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <main+0x13ca>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <main+0x141a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	69 a9       	ldd	r22, Y+49	; 0x31
    398c:	7a a9       	ldd	r23, Y+50	; 0x32
    398e:	8b a9       	ldd	r24, Y+51	; 0x33
    3990:	9c a9       	ldd	r25, Y+52	; 0x34
    3992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	98 ab       	std	Y+48, r25	; 0x30
    399c:	8f a7       	std	Y+47, r24	; 0x2f
    399e:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a0:	98 a9       	ldd	r25, Y+48	; 0x30
    39a2:	9c a7       	std	Y+44, r25	; 0x2c
    39a4:	8b a7       	std	Y+43, r24	; 0x2b
    39a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    39a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <main+0x1412>
    39ae:	9c a7       	std	Y+44, r25	; 0x2c
    39b0:	8b a7       	std	Y+43, r24	; 0x2b
			   _delay_ms(100);

			   //to clear cell
			   LCD_VidPosCur(i,local_col);
    39b2:	fe 01       	movw	r30, r28
    39b4:	ea 53       	subi	r30, 0x3A	; 58
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 81       	ld	r24, Z
    39ba:	48 2f       	mov	r20, r24
    39bc:	55 27       	eor	r21, r21
    39be:	47 fd       	sbrc	r20, 7
    39c0:	50 95       	com	r21
    39c2:	80 91 69 00 	lds	r24, 0x0069
    39c6:	28 2f       	mov	r18, r24
    39c8:	33 27       	eor	r19, r19
    39ca:	27 fd       	sbrc	r18, 7
    39cc:	30 95       	com	r19
    39ce:	ca 01       	movw	r24, r20
    39d0:	b9 01       	movw	r22, r18
    39d2:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
			   LCD_VidSendChar(' ');
    39d6:	80 e2       	ldi	r24, 0x20	; 32
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>

			    local_col++ ;
    39de:	80 91 69 00 	lds	r24, 0x0069
    39e2:	8f 5f       	subi	r24, 0xFF	; 255
    39e4:	80 93 69 00 	sts	0x0069, r24
			  LCD_VidSendChar(' ');

			  local_col++ ;

			  //to make ball drop up to down in specific cell and the next to it
			  for (s8 i = 1 ; i >= 0 ; i--){
    39e8:	de 01       	movw	r26, r28
    39ea:	aa 53       	subi	r26, 0x3A	; 58
    39ec:	bf 4f       	sbci	r27, 0xFF	; 255
    39ee:	fe 01       	movw	r30, r28
    39f0:	ea 53       	subi	r30, 0x3A	; 58
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	80 81       	ld	r24, Z
    39f6:	81 50       	subi	r24, 0x01	; 1
    39f8:	8c 93       	st	X, r24
    39fa:	fe 01       	movw	r30, r28
    39fc:	ea 53       	subi	r30, 0x3A	; 58
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 81       	ld	r24, Z
    3a02:	88 23       	and	r24, r24
    3a04:	0c f0       	brlt	.+2      	; 0x3a08 <main+0x1470>
    3a06:	b2 ce       	rjmp	.-668    	; 0x376c <main+0x11d4>
    3a08:	95 c0       	rjmp	.+298    	; 0x3b34 <main+0x159c>
			    }

			   //to make ball fly up
			    while (local_col < 15){
				//to show  ball up
				LCD_VidPosCur(row_0,local_col);
    3a0a:	80 91 69 00 	lds	r24, 0x0069
    3a0e:	28 2f       	mov	r18, r24
    3a10:	33 27       	eor	r19, r19
    3a12:	27 fd       	sbrc	r18, 7
    3a14:	30 95       	com	r19
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	b9 01       	movw	r22, r18
    3a1c:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
				LCD_VidSendChar(ball_up_right);
    3a20:	85 e0       	ldi	r24, 0x05	; 5
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	a8 ec       	ldi	r26, 0xC8	; 200
    3a2e:	b2 e4       	ldi	r27, 0x42	; 66
    3a30:	8f a3       	std	Y+39, r24	; 0x27
    3a32:	98 a7       	std	Y+40, r25	; 0x28
    3a34:	a9 a7       	std	Y+41, r26	; 0x29
    3a36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a38:	6f a1       	ldd	r22, Y+39	; 0x27
    3a3a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4a ef       	ldi	r20, 0xFA	; 250
    3a46:	54 e4       	ldi	r21, 0x44	; 68
    3a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	8b a3       	std	Y+35, r24	; 0x23
    3a52:	9c a3       	std	Y+36, r25	; 0x24
    3a54:	ad a3       	std	Y+37, r26	; 0x25
    3a56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a58:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e8       	ldi	r20, 0x80	; 128
    3a66:	5f e3       	ldi	r21, 0x3F	; 63
    3a68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a6c:	88 23       	and	r24, r24
    3a6e:	2c f4       	brge	.+10     	; 0x3a7a <main+0x14e2>
		__ticks = 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9a a3       	std	Y+34, r25	; 0x22
    3a76:	89 a3       	std	Y+33, r24	; 0x21
    3a78:	3f c0       	rjmp	.+126    	; 0x3af8 <main+0x1560>
	else if (__tmp > 65535)
    3a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a80:	9e a1       	ldd	r25, Y+38	; 0x26
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	3f ef       	ldi	r19, 0xFF	; 255
    3a86:	4f e7       	ldi	r20, 0x7F	; 127
    3a88:	57 e4       	ldi	r21, 0x47	; 71
    3a8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a8e:	18 16       	cp	r1, r24
    3a90:	4c f5       	brge	.+82     	; 0x3ae4 <main+0x154c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	6f a1       	ldd	r22, Y+39	; 0x27
    3a94:	78 a5       	ldd	r23, Y+40	; 0x28
    3a96:	89 a5       	ldd	r24, Y+41	; 0x29
    3a98:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e2       	ldi	r20, 0x20	; 32
    3aa0:	51 e4       	ldi	r21, 0x41	; 65
    3aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9a a3       	std	Y+34, r25	; 0x22
    3ab8:	89 a3       	std	Y+33, r24	; 0x21
    3aba:	0f c0       	rjmp	.+30     	; 0x3ada <main+0x1542>
    3abc:	88 ec       	ldi	r24, 0xC8	; 200
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	98 a3       	std	Y+32, r25	; 0x20
    3ac2:	8f 8f       	std	Y+31, r24	; 0x1f
    3ac4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac6:	98 a1       	ldd	r25, Y+32	; 0x20
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <main+0x1530>
    3acc:	98 a3       	std	Y+32, r25	; 0x20
    3ace:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	9a a3       	std	Y+34, r25	; 0x22
    3ad8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ada:	89 a1       	ldd	r24, Y+33	; 0x21
    3adc:	9a a1       	ldd	r25, Y+34	; 0x22
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	69 f7       	brne	.-38     	; 0x3abc <main+0x1524>
    3ae2:	14 c0       	rjmp	.+40     	; 0x3b0c <main+0x1574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aea:	9e a1       	ldd	r25, Y+38	; 0x26
    3aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	9a a3       	std	Y+34, r25	; 0x22
    3af6:	89 a3       	std	Y+33, r24	; 0x21
    3af8:	89 a1       	ldd	r24, Y+33	; 0x21
    3afa:	9a a1       	ldd	r25, Y+34	; 0x22
    3afc:	9e 8f       	std	Y+30, r25	; 0x1e
    3afe:	8d 8f       	std	Y+29, r24	; 0x1d
    3b00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	f1 f7       	brne	.-4      	; 0x3b04 <main+0x156c>
    3b08:	9e 8f       	std	Y+30, r25	; 0x1e
    3b0a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(100);

				//to clear cell
				LCD_VidPosCur(row_0,local_col);
    3b0c:	80 91 69 00 	lds	r24, 0x0069
    3b10:	28 2f       	mov	r18, r24
    3b12:	33 27       	eor	r19, r19
    3b14:	27 fd       	sbrc	r18, 7
    3b16:	30 95       	com	r19
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	b9 01       	movw	r22, r18
    3b1e:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
				LCD_VidSendChar(' ');
    3b22:	80 e2       	ldi	r24, 0x20	; 32
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
				local_col++ ;
    3b2a:	80 91 69 00 	lds	r24, 0x0069
    3b2e:	8f 5f       	subi	r24, 0xFF	; 255
    3b30:	80 93 69 00 	sts	0x0069, r24

			    local_col++ ;
			    }

			   //to make ball fly up
			    while (local_col < 15){
    3b34:	80 91 69 00 	lds	r24, 0x0069
    3b38:	8f 30       	cpi	r24, 0x0F	; 15
    3b3a:	0c f4       	brge	.+2      	; 0x3b3e <main+0x15a6>
    3b3c:	66 cf       	rjmp	.-308    	; 0x3a0a <main+0x1472>
				LCD_VidSendChar(' ');
				local_col++ ;
			    }//end while (local_col < 15)

			  //to check that the paddle save ball LCD 1
			  if ( (Global_row+1)%2 != 0 ){
    3b3e:	80 91 68 00 	lds	r24, 0x0068
    3b42:	90 91 69 00 	lds	r25, 0x0069
    3b46:	01 96       	adiw	r24, 0x01	; 1
    3b48:	81 70       	andi	r24, 0x01	; 1
    3b4a:	90 70       	andi	r25, 0x00	; 0
    3b4c:	88 23       	and	r24, r24
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <main+0x15ba>
    3b50:	2d c1       	rjmp	.+602    	; 0x3dac <main+0x1814>
				  PIE_VidDisable(1);
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <PIE_VidDisable>
					LCD_VidClear();
    3b58:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_VidClear>
					DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_1,HIGH);
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	64 e0       	ldi	r22, 0x04	; 4
    3b60:	41 e0       	ldi	r20, 0x01	; 1
    3b62:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>
					//to show state wining
					for (u8 i = 0 ; i < 3 ; i++){
    3b66:	fe 01       	movw	r30, r28
    3b68:	eb 53       	subi	r30, 0x3B	; 59
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	10 82       	st	Z, r1
    3b6e:	fd c0       	rjmp	.+506    	; 0x3d6a <main+0x17d2>
						LCD_VidPosCur( row_0 , 4 ) ;
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	64 e0       	ldi	r22, 0x04	; 4
    3b76:	70 e0       	ldi	r23, 0x00	; 0
    3b78:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
						LCD_VidPrintVar(result);
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e6 53       	subi	r30, 0x36	; 54
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	80 81       	ld	r24, Z
    3b84:	88 2f       	mov	r24, r24
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_VidPrintVar>
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	aa ef       	ldi	r26, 0xFA	; 250
    3b92:	b3 e4       	ldi	r27, 0x43	; 67
    3b94:	89 8f       	std	Y+25, r24	; 0x19
    3b96:	9a 8f       	std	Y+26, r25	; 0x1a
    3b98:	ab 8f       	std	Y+27, r26	; 0x1b
    3b9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	4a ef       	ldi	r20, 0xFA	; 250
    3baa:	54 e4       	ldi	r21, 0x44	; 68
    3bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	8d 8b       	std	Y+21, r24	; 0x15
    3bb6:	9e 8b       	std	Y+22, r25	; 0x16
    3bb8:	af 8b       	std	Y+23, r26	; 0x17
    3bba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e8       	ldi	r20, 0x80	; 128
    3bca:	5f e3       	ldi	r21, 0x3F	; 63
    3bcc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3bd0:	88 23       	and	r24, r24
    3bd2:	2c f4       	brge	.+10     	; 0x3bde <main+0x1646>
		__ticks = 1;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	9c 8b       	std	Y+20, r25	; 0x14
    3bda:	8b 8b       	std	Y+19, r24	; 0x13
    3bdc:	3f c0       	rjmp	.+126    	; 0x3c5c <main+0x16c4>
	else if (__tmp > 65535)
    3bde:	6d 89       	ldd	r22, Y+21	; 0x15
    3be0:	7e 89       	ldd	r23, Y+22	; 0x16
    3be2:	8f 89       	ldd	r24, Y+23	; 0x17
    3be4:	98 8d       	ldd	r25, Y+24	; 0x18
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	3f ef       	ldi	r19, 0xFF	; 255
    3bea:	4f e7       	ldi	r20, 0x7F	; 127
    3bec:	57 e4       	ldi	r21, 0x47	; 71
    3bee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3bf2:	18 16       	cp	r1, r24
    3bf4:	4c f5       	brge	.+82     	; 0x3c48 <main+0x16b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf6:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e2       	ldi	r20, 0x20	; 32
    3c04:	51 e4       	ldi	r21, 0x41	; 65
    3c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	9c 8b       	std	Y+20, r25	; 0x14
    3c1c:	8b 8b       	std	Y+19, r24	; 0x13
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <main+0x16a6>
    3c20:	88 ec       	ldi	r24, 0xC8	; 200
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	9a 8b       	std	Y+18, r25	; 0x12
    3c26:	89 8b       	std	Y+17, r24	; 0x11
    3c28:	89 89       	ldd	r24, Y+17	; 0x11
    3c2a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <main+0x1694>
    3c30:	9a 8b       	std	Y+18, r25	; 0x12
    3c32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c34:	8b 89       	ldd	r24, Y+19	; 0x13
    3c36:	9c 89       	ldd	r25, Y+20	; 0x14
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	9c 8b       	std	Y+20, r25	; 0x14
    3c3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c40:	9c 89       	ldd	r25, Y+20	; 0x14
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	69 f7       	brne	.-38     	; 0x3c20 <main+0x1688>
    3c46:	14 c0       	rjmp	.+40     	; 0x3c70 <main+0x16d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c48:	6d 89       	ldd	r22, Y+21	; 0x15
    3c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	9c 8b       	std	Y+20, r25	; 0x14
    3c5a:	8b 8b       	std	Y+19, r24	; 0x13
    3c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c60:	98 8b       	std	Y+16, r25	; 0x10
    3c62:	8f 87       	std	Y+15, r24	; 0x0f
    3c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c66:	98 89       	ldd	r25, Y+16	; 0x10
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <main+0x16d0>
    3c6c:	98 8b       	std	Y+16, r25	; 0x10
    3c6e:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						LCD_VidClear();
    3c70:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_VidClear>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	aa ef       	ldi	r26, 0xFA	; 250
    3c7a:	b3 e4       	ldi	r27, 0x43	; 67
    3c7c:	8b 87       	std	Y+11, r24	; 0x0b
    3c7e:	9c 87       	std	Y+12, r25	; 0x0c
    3c80:	ad 87       	std	Y+13, r26	; 0x0d
    3c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a ef       	ldi	r20, 0xFA	; 250
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	8f 83       	std	Y+7, r24	; 0x07
    3c9e:	98 87       	std	Y+8, r25	; 0x08
    3ca0:	a9 87       	std	Y+9, r26	; 0x09
    3ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	78 85       	ldd	r23, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e8       	ldi	r20, 0x80	; 128
    3cb2:	5f e3       	ldi	r21, 0x3F	; 63
    3cb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3cb8:	88 23       	and	r24, r24
    3cba:	2c f4       	brge	.+10     	; 0x3cc6 <main+0x172e>
		__ticks = 1;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	9e 83       	std	Y+6, r25	; 0x06
    3cc2:	8d 83       	std	Y+5, r24	; 0x05
    3cc4:	3f c0       	rjmp	.+126    	; 0x3d44 <main+0x17ac>
	else if (__tmp > 65535)
    3cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc8:	78 85       	ldd	r23, Y+8	; 0x08
    3cca:	89 85       	ldd	r24, Y+9	; 0x09
    3ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	3f ef       	ldi	r19, 0xFF	; 255
    3cd2:	4f e7       	ldi	r20, 0x7F	; 127
    3cd4:	57 e4       	ldi	r21, 0x47	; 71
    3cd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3cda:	18 16       	cp	r1, r24
    3cdc:	4c f5       	brge	.+82     	; 0x3d30 <main+0x1798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e2       	ldi	r20, 0x20	; 32
    3cec:	51 e4       	ldi	r21, 0x41	; 65
    3cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	9e 83       	std	Y+6, r25	; 0x06
    3d04:	8d 83       	std	Y+5, r24	; 0x05
    3d06:	0f c0       	rjmp	.+30     	; 0x3d26 <main+0x178e>
    3d08:	88 ec       	ldi	r24, 0xC8	; 200
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	9c 83       	std	Y+4, r25	; 0x04
    3d0e:	8b 83       	std	Y+3, r24	; 0x03
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	9c 81       	ldd	r25, Y+4	; 0x04
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <main+0x177c>
    3d18:	9c 83       	std	Y+4, r25	; 0x04
    3d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	69 f7       	brne	.-38     	; 0x3d08 <main+0x1770>
    3d2e:	14 c0       	rjmp	.+40     	; 0x3d58 <main+0x17c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d30:	6f 81       	ldd	r22, Y+7	; 0x07
    3d32:	78 85       	ldd	r23, Y+8	; 0x08
    3d34:	89 85       	ldd	r24, Y+9	; 0x09
    3d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
    3d44:	8d 81       	ldd	r24, Y+5	; 0x05
    3d46:	9e 81       	ldd	r25, Y+6	; 0x06
    3d48:	9a 83       	std	Y+2, r25	; 0x02
    3d4a:	89 83       	std	Y+1, r24	; 0x01
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <main+0x17b8>
    3d54:	9a 83       	std	Y+2, r25	; 0x02
    3d56:	89 83       	std	Y+1, r24	; 0x01
			  if ( (Global_row+1)%2 != 0 ){
				  PIE_VidDisable(1);
					LCD_VidClear();
					DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_1,HIGH);
					//to show state wining
					for (u8 i = 0 ; i < 3 ; i++){
    3d58:	de 01       	movw	r26, r28
    3d5a:	ab 53       	subi	r26, 0x3B	; 59
    3d5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d5e:	fe 01       	movw	r30, r28
    3d60:	eb 53       	subi	r30, 0x3B	; 59
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 81       	ld	r24, Z
    3d66:	8f 5f       	subi	r24, 0xFF	; 255
    3d68:	8c 93       	st	X, r24
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	eb 53       	subi	r30, 0x3B	; 59
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	83 30       	cpi	r24, 0x03	; 3
    3d74:	08 f4       	brcc	.+2      	; 0x3d78 <main+0x17e0>
    3d76:	fc ce       	rjmp	.-520    	; 0x3b70 <main+0x15d8>
						LCD_VidClear();
						_delay_ms(500);
			          }//end for loop

					//to out low to prevent LCD 2 from display result
					DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_1,LOW);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	64 e0       	ldi	r22, 0x04	; 4
    3d7c:	40 e0       	ldi	r20, 0x00	; 0
    3d7e:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_VidSetPinValue>

					//to show right ping paddle in beginning
					LCD_VidPosCur((Global_row+1)%2,last_col);
    3d82:	80 91 68 00 	lds	r24, 0x0068
    3d86:	90 91 69 00 	lds	r25, 0x0069
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	22 e0       	ldi	r18, 0x02	; 2
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	b9 01       	movw	r22, r18
    3d92:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__divmodhi4>
    3d96:	6f e0       	ldi	r22, 0x0F	; 15
    3d98:	70 e0       	ldi	r23, 0x00	; 0
    3d9a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_VidPosCur>
					LCD_VidSendChar(ping_paddle_right);
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_VidSendChar>
					PIE_VidEnable(1);
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <PIE_VidEnable>

			  }//end if "check"

			local_col = 14 ;
    3dac:	8e e0       	ldi	r24, 0x0E	; 14
    3dae:	80 93 69 00 	sts	0x0069, r24
    3db2:	0c 94 8e 14 	jmp	0x291c	; 0x291c <main+0x384>

00003db6 <__udivmodhi4>:
    3db6:	aa 1b       	sub	r26, r26
    3db8:	bb 1b       	sub	r27, r27
    3dba:	51 e1       	ldi	r21, 0x11	; 17
    3dbc:	07 c0       	rjmp	.+14     	; 0x3dcc <__udivmodhi4_ep>

00003dbe <__udivmodhi4_loop>:
    3dbe:	aa 1f       	adc	r26, r26
    3dc0:	bb 1f       	adc	r27, r27
    3dc2:	a6 17       	cp	r26, r22
    3dc4:	b7 07       	cpc	r27, r23
    3dc6:	10 f0       	brcs	.+4      	; 0x3dcc <__udivmodhi4_ep>
    3dc8:	a6 1b       	sub	r26, r22
    3dca:	b7 0b       	sbc	r27, r23

00003dcc <__udivmodhi4_ep>:
    3dcc:	88 1f       	adc	r24, r24
    3dce:	99 1f       	adc	r25, r25
    3dd0:	5a 95       	dec	r21
    3dd2:	a9 f7       	brne	.-22     	; 0x3dbe <__udivmodhi4_loop>
    3dd4:	80 95       	com	r24
    3dd6:	90 95       	com	r25
    3dd8:	bc 01       	movw	r22, r24
    3dda:	cd 01       	movw	r24, r26
    3ddc:	08 95       	ret

00003dde <__divmodhi4>:
    3dde:	97 fb       	bst	r25, 7
    3de0:	09 2e       	mov	r0, r25
    3de2:	07 26       	eor	r0, r23
    3de4:	0a d0       	rcall	.+20     	; 0x3dfa <__divmodhi4_neg1>
    3de6:	77 fd       	sbrc	r23, 7
    3de8:	04 d0       	rcall	.+8      	; 0x3df2 <__divmodhi4_neg2>
    3dea:	e5 df       	rcall	.-54     	; 0x3db6 <__udivmodhi4>
    3dec:	06 d0       	rcall	.+12     	; 0x3dfa <__divmodhi4_neg1>
    3dee:	00 20       	and	r0, r0
    3df0:	1a f4       	brpl	.+6      	; 0x3df8 <__divmodhi4_exit>

00003df2 <__divmodhi4_neg2>:
    3df2:	70 95       	com	r23
    3df4:	61 95       	neg	r22
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255

00003df8 <__divmodhi4_exit>:
    3df8:	08 95       	ret

00003dfa <__divmodhi4_neg1>:
    3dfa:	f6 f7       	brtc	.-4      	; 0x3df8 <__divmodhi4_exit>
    3dfc:	90 95       	com	r25
    3dfe:	81 95       	neg	r24
    3e00:	9f 4f       	sbci	r25, 0xFF	; 255
    3e02:	08 95       	ret

00003e04 <__prologue_saves__>:
    3e04:	2f 92       	push	r2
    3e06:	3f 92       	push	r3
    3e08:	4f 92       	push	r4
    3e0a:	5f 92       	push	r5
    3e0c:	6f 92       	push	r6
    3e0e:	7f 92       	push	r7
    3e10:	8f 92       	push	r8
    3e12:	9f 92       	push	r9
    3e14:	af 92       	push	r10
    3e16:	bf 92       	push	r11
    3e18:	cf 92       	push	r12
    3e1a:	df 92       	push	r13
    3e1c:	ef 92       	push	r14
    3e1e:	ff 92       	push	r15
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	cf 93       	push	r28
    3e26:	df 93       	push	r29
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	ca 1b       	sub	r28, r26
    3e2e:	db 0b       	sbc	r29, r27
    3e30:	0f b6       	in	r0, 0x3f	; 63
    3e32:	f8 94       	cli
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	cd bf       	out	0x3d, r28	; 61
    3e3a:	09 94       	ijmp

00003e3c <__epilogue_restores__>:
    3e3c:	2a 88       	ldd	r2, Y+18	; 0x12
    3e3e:	39 88       	ldd	r3, Y+17	; 0x11
    3e40:	48 88       	ldd	r4, Y+16	; 0x10
    3e42:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e44:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e46:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e48:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e4e:	b9 84       	ldd	r11, Y+9	; 0x09
    3e50:	c8 84       	ldd	r12, Y+8	; 0x08
    3e52:	df 80       	ldd	r13, Y+7	; 0x07
    3e54:	ee 80       	ldd	r14, Y+6	; 0x06
    3e56:	fd 80       	ldd	r15, Y+5	; 0x05
    3e58:	0c 81       	ldd	r16, Y+4	; 0x04
    3e5a:	1b 81       	ldd	r17, Y+3	; 0x03
    3e5c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e60:	ce 0f       	add	r28, r30
    3e62:	d1 1d       	adc	r29, r1
    3e64:	0f b6       	in	r0, 0x3f	; 63
    3e66:	f8 94       	cli
    3e68:	de bf       	out	0x3e, r29	; 62
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	ed 01       	movw	r28, r26
    3e70:	08 95       	ret

00003e72 <_exit>:
    3e72:	f8 94       	cli

00003e74 <__stop_program>:
    3e74:	ff cf       	rjmp	.-2      	; 0x3e74 <__stop_program>
