
PING_PONG_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00003d22  00003db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00003dc0  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  00003dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b29  00000000  00000000  000068bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000073e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007545  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000076d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009719  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bbde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c46c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__vector_1>
       8:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_2>
       c:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 12 	call	0x25bc	; 0x25bc <main>
      8a:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_VidSetPinDirection>:
#include"../LIB/STD_TYPES.h"
#include"../LIB/BIT_MATH.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <DIO_VidSetPinDirection+0x22>
     cbe:	6f c0       	rjmp	.+222    	; 0xd9e <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3f 83       	std	Y+7, r19	; 0x07
     cc8:	2e 83       	std	Y+6, r18	; 0x06
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	49 f1       	breq	.+82     	; 0xd26 <DIO_VidSetPinDirection+0x88>
     cd4:	2e 81       	ldd	r18, Y+6	; 0x06
     cd6:	3f 81       	ldd	r19, Y+7	; 0x07
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	2c f4       	brge	.+10     	; 0xce8 <DIO_VidSetPinDirection+0x4a>
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	9f 81       	ldd	r25, Y+7	; 0x07
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	61 f0       	breq	.+24     	; 0xcfe <DIO_VidSetPinDirection+0x60>
     ce6:	d2 c0       	rjmp	.+420    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
     ce8:	2e 81       	ldd	r18, Y+6	; 0x06
     cea:	3f 81       	ldd	r19, Y+7	; 0x07
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	71 f1       	breq	.+92     	; 0xd4e <DIO_VidSetPinDirection+0xb0>
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	91 05       	cpc	r25, r1
     cfa:	e9 f1       	breq	.+122    	; 0xd76 <DIO_VidSetPinDirection+0xd8>
     cfc:	c7 c0       	rjmp	.+398    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_VidSetPinDirection+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_VidSetPinDirection+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	b3 c0       	rjmp	.+358    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_VidSetPinDirection+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_VidSetPinDirection+0xa2>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	9f c0       	rjmp	.+318    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
     d4e:	a4 e3       	ldi	r26, 0x34	; 52
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e3       	ldi	r30, 0x34	; 52
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_VidSetPinDirection+0xce>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_VidSetPinDirection+0xca>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	8b c0       	rjmp	.+278    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
     d76:	a1 e3       	ldi	r26, 0x31	; 49
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e3       	ldi	r30, 0x31	; 49
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_VidSetPinDirection+0xf6>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_VidSetPinDirection+0xf2>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	77 c0       	rjmp	.+238    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	88 23       	and	r24, r24
     da2:	09 f0       	breq	.+2      	; 0xda6 <DIO_VidSetPinDirection+0x108>
     da4:	73 c0       	rjmp	.+230    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	59 f1       	breq	.+86     	; 0xe10 <DIO_VidSetPinDirection+0x172>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_VidSetPinDirection+0x130>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f0       	breq	.+26     	; 0xde6 <DIO_VidSetPinDirection+0x148>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <DIO_VidSetPinDirection+0x19c>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <DIO_VidSetPinDirection+0x146>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <DIO_VidSetPinDirection+0x1c6>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_VidSetPinDirection+0x166>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_VidSetPinDirection+0x162>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	3e c0       	rjmp	.+124    	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_VidSetPinDirection+0x190>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_VidSetPinDirection+0x18c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_VidSetPinDirection+0x1ba>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_VidSetPinDirection+0x1b6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_VidSetPinDirection+0x1e4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_VidSetPinDirection+0x1e0>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
     e8c:	27 96       	adiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_VidSetPortDirection+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_VidSetPortDirection+0x8>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3c 83       	std	Y+4, r19	; 0x04
     eb6:	2b 83       	std	Y+3, r18	; 0x03
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	d1 f0       	breq	.+52     	; 0xef6 <DIO_VidSetPortDirection+0x58>
     ec2:	2b 81       	ldd	r18, Y+3	; 0x03
     ec4:	3c 81       	ldd	r19, Y+4	; 0x04
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_VidSetPortDirection+0x38>
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	61 f0       	breq	.+24     	; 0xeec <DIO_VidSetPortDirection+0x4e>
     ed4:	1e c0       	rjmp	.+60     	; 0xf12 <DIO_VidSetPortDirection+0x74>
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	3c 81       	ldd	r19, Y+4	; 0x04
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	81 f0       	breq	.+32     	; 0xf00 <DIO_VidSetPortDirection+0x62>
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	81 f0       	breq	.+32     	; 0xf0a <DIO_VidSetPortDirection+0x6c>
     eea:	13 c0       	rjmp	.+38     	; 0xf12 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
     eec:	ea e3       	ldi	r30, 0x3A	; 58
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	80 83       	st	Z, r24
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
     ef6:	e7 e3       	ldi	r30, 0x37	; 55
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	80 83       	st	Z, r24
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
     f00:	e4 e3       	ldi	r30, 0x34	; 52
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	80 83       	st	Z, r24
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	27 97       	sbiw	r28, 0x07	; 7
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	6a 83       	std	Y+2, r22	; 0x02
     f38:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <DIO_VidSetPinValue+0x22>
     f40:	6f c0       	rjmp	.+222    	; 0x1020 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	9f 81       	ldd	r25, Y+7	; 0x07
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 05       	cpc	r25, r1
     f54:	49 f1       	breq	.+82     	; 0xfa8 <DIO_VidSetPinValue+0x88>
     f56:	2e 81       	ldd	r18, Y+6	; 0x06
     f58:	3f 81       	ldd	r19, Y+7	; 0x07
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	2c f4       	brge	.+10     	; 0xf6a <DIO_VidSetPinValue+0x4a>
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	61 f0       	breq	.+24     	; 0xf80 <DIO_VidSetPinValue+0x60>
     f68:	d2 c0       	rjmp	.+420    	; 0x110e <DIO_VidSetPinValue+0x1ee>
     f6a:	2e 81       	ldd	r18, Y+6	; 0x06
     f6c:	3f 81       	ldd	r19, Y+7	; 0x07
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	71 f1       	breq	.+92     	; 0xfd0 <DIO_VidSetPinValue+0xb0>
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	91 05       	cpc	r25, r1
     f7c:	e9 f1       	breq	.+122    	; 0xff8 <DIO_VidSetPinValue+0xd8>
     f7e:	c7 c0       	rjmp	.+398    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
     f80:	ab e3       	ldi	r26, 0x3B	; 59
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	eb e3       	ldi	r30, 0x3B	; 59
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_VidSetPinValue+0x7e>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_VidSetPinValue+0x7a>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	b3 c0       	rjmp	.+358    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
     fa8:	a8 e3       	ldi	r26, 0x38	; 56
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VidSetPinValue+0xa6>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VidSetPinValue+0xa2>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	9f c0       	rjmp	.+318    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
     fd0:	a5 e3       	ldi	r26, 0x35	; 53
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_VidSetPinValue+0xce>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_VidSetPinValue+0xca>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	8b c0       	rjmp	.+278    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
     ff8:	a2 e3       	ldi	r26, 0x32	; 50
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e2 e3       	ldi	r30, 0x32	; 50
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_VidSetPinValue+0xf6>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_VidSetPinValue+0xf2>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	77 c0       	rjmp	.+238    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <DIO_VidSetPinValue+0x108>
    1026:	73 c0       	rjmp	.+230    	; 0x110e <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	59 f1       	breq	.+86     	; 0x1092 <DIO_VidSetPinValue+0x172>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <DIO_VidSetPinValue+0x130>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f0       	breq	.+26     	; 0x1068 <DIO_VidSetPinValue+0x148>
    104e:	5f c0       	rjmp	.+190    	; 0x110e <DIO_VidSetPinValue+0x1ee>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	89 f1       	breq	.+98     	; 0x10bc <DIO_VidSetPinValue+0x19c>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <DIO_VidSetPinValue+0x146>
    1064:	40 c0       	rjmp	.+128    	; 0x10e6 <DIO_VidSetPinValue+0x1c6>
    1066:	53 c0       	rjmp	.+166    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    1068:	ab e3       	ldi	r26, 0x3B	; 59
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e3       	ldi	r30, 0x3B	; 59
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_VidSetPinValue+0x166>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_VidSetPinValue+0x162>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	3e c0       	rjmp	.+124    	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    1092:	a8 e3       	ldi	r26, 0x38	; 56
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 e3       	ldi	r30, 0x38	; 56
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_VidSetPinValue+0x190>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_VidSetPinValue+0x18c>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	29 c0       	rjmp	.+82     	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    10bc:	a5 e3       	ldi	r26, 0x35	; 53
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e3       	ldi	r30, 0x35	; 53
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_VidSetPinValue+0x1ba>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_VidSetPinValue+0x1b6>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    10e6:	a2 e3       	ldi	r26, 0x32	; 50
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e2 e3       	ldi	r30, 0x32	; 50
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_VidSetPinValue+0x1e4>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_VidSetPinValue+0x1e0>
    1108:	80 95       	com	r24
    110a:	84 23       	and	r24, r20
    110c:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    110e:	27 96       	adiw	r28, 0x07	; 7
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_VidSetPortValue+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_VidSetPortValue+0x8>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	d1 f0       	breq	.+52     	; 0x1178 <DIO_VidSetPortValue+0x58>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <DIO_VidSetPortValue+0x38>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <DIO_VidSetPortValue+0x4e>
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <DIO_VidSetPortValue+0x74>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <DIO_VidSetPortValue+0x62>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_VidSetPortValue+0x6c>
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    1178:	e8 e3       	ldi	r30, 0x38	; 56
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    1182:	e5 e3       	ldi	r30, 0x35	; 53
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <DIO_VidTogglePinValue+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_VidTogglePinValue+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3c 83       	std	Y+4, r19	; 0x04
    11ba:	2b 83       	std	Y+3, r18	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	49 f1       	breq	.+82     	; 0x1218 <DIO_VidTogglePinValue+0x76>
    11c6:	2b 81       	ldd	r18, Y+3	; 0x03
    11c8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	2c f4       	brge	.+10     	; 0x11da <DIO_VidTogglePinValue+0x38>
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <DIO_VidTogglePinValue+0x4e>
    11d8:	5a c0       	rjmp	.+180    	; 0x128e <DIO_VidTogglePinValue+0xec>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	71 f1       	breq	.+92     	; 0x1240 <DIO_VidTogglePinValue+0x9e>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	e9 f1       	breq	.+122    	; 0x1268 <DIO_VidTogglePinValue+0xc6>
    11ee:	4f c0       	rjmp	.+158    	; 0x128e <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    11f0:	ab e3       	ldi	r26, 0x3B	; 59
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_VidTogglePinValue+0x6c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_VidTogglePinValue+0x68>
    1212:	84 27       	eor	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	3b c0       	rjmp	.+118    	; 0x128e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    1218:	a8 e3       	ldi	r26, 0x38	; 56
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_VidTogglePinValue+0x94>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_VidTogglePinValue+0x90>
    123a:	84 27       	eor	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	27 c0       	rjmp	.+78     	; 0x128e <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_VidTogglePinValue+0xbc>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_VidTogglePinValue+0xb8>
    1262:	84 27       	eor	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	13 c0       	rjmp	.+38     	; 0x128e <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_VidTogglePinValue+0xe4>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_VidTogglePinValue+0xe0>
    128a:	84 27       	eor	r24, r20
    128c:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_U8GetPinValue+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <DIO_U8GetPinValue+0x8>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_U8GetPinValue+0xa>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3d 83       	std	Y+5, r19	; 0x05
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ba:	5d 81       	ldd	r21, Y+5	; 0x05
    12bc:	41 30       	cpi	r20, 0x01	; 1
    12be:	51 05       	cpc	r21, r1
    12c0:	49 f1       	breq	.+82     	; 0x1314 <DIO_U8GetPinValue+0x78>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	91 05       	cpc	r25, r1
    12ca:	34 f4       	brge	.+12     	; 0x12d8 <DIO_U8GetPinValue+0x3c>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	61 f0       	breq	.+24     	; 0x12ee <DIO_U8GetPinValue+0x52>
    12d6:	57 c0       	rjmp	.+174    	; 0x1386 <DIO_U8GetPinValue+0xea>
    12d8:	4c 81       	ldd	r20, Y+4	; 0x04
    12da:	5d 81       	ldd	r21, Y+5	; 0x05
    12dc:	42 30       	cpi	r20, 0x02	; 2
    12de:	51 05       	cpc	r21, r1
    12e0:	61 f1       	breq	.+88     	; 0x133a <DIO_U8GetPinValue+0x9e>
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	91 05       	cpc	r25, r1
    12ea:	d1 f1       	breq	.+116    	; 0x1360 <DIO_U8GetPinValue+0xc4>
    12ec:	4c c0       	rjmp	.+152    	; 0x1386 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    12ee:	e9 e3       	ldi	r30, 0x39	; 57
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_U8GetPinValue+0x6a>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_U8GetPinValue+0x66>
    130a:	ca 01       	movw	r24, r20
    130c:	58 2f       	mov	r21, r24
    130e:	51 70       	andi	r21, 0x01	; 1
    1310:	5b 83       	std	Y+3, r21	; 0x03
    1312:	3a c0       	rjmp	.+116    	; 0x1388 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    1314:	e6 e3       	ldi	r30, 0x36	; 54
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_U8GetPinValue+0x90>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_U8GetPinValue+0x8c>
    1330:	ca 01       	movw	r24, r20
    1332:	58 2f       	mov	r21, r24
    1334:	51 70       	andi	r21, 0x01	; 1
    1336:	5b 83       	std	Y+3, r21	; 0x03
    1338:	27 c0       	rjmp	.+78     	; 0x1388 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    133a:	e3 e3       	ldi	r30, 0x33	; 51
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_U8GetPinValue+0xb6>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_U8GetPinValue+0xb2>
    1356:	ca 01       	movw	r24, r20
    1358:	58 2f       	mov	r21, r24
    135a:	51 70       	andi	r21, 0x01	; 1
    135c:	5b 83       	std	Y+3, r21	; 0x03
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    1360:	e0 e3       	ldi	r30, 0x30	; 48
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_U8GetPinValue+0xdc>
    1374:	55 95       	asr	r21
    1376:	47 95       	ror	r20
    1378:	8a 95       	dec	r24
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_U8GetPinValue+0xd8>
    137c:	ca 01       	movw	r24, r20
    137e:	58 2f       	mov	r21, r24
    1380:	51 70       	andi	r21, 0x01	; 1
    1382:	5b 83       	std	Y+3, r21	; 0x03
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <DIO_U8GetPinValue+0xec>
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	8e 83       	std	Y+6, r24	; 0x06
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	26 96       	adiw	r28, 0x06	; 6
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <INT_VidINIT>:
#define ping_paddle_left 1

u8 Global_row = 0 ;

/**********************************************************/
void INT_VidINIT(void){
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    	SET_BIT(MCUCR,ISC00);
    	CLR_BIT(MCUCR,ISC01);
    }
    else if (INT0_FALLING){
		//INT0 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	62 e0       	ldi	r22, 0x02	; 2
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	62 e0       	ldi	r22, 0x02	; 2
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC00);
    13bc:	a5 e5       	ldi	r26, 0x55	; 85
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e5 e5       	ldi	r30, 0x55	; 85
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8e 7f       	andi	r24, 0xFE	; 254
    13c8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    13ca:	a5 e5       	ldi	r26, 0x55	; 85
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e5       	ldi	r30, 0x55	; 85
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	82 60       	ori	r24, 0x02	; 2
    13d6:	8c 93       	st	X, r24
    	SET_BIT(MCUCR,ISC10);
    	CLR_BIT(MCUCR,ISC11);
    }
    else if (INT1_FALLING){
		//INT1 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	63 e0       	ldi	r22, 0x03	; 3
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	63 e0       	ldi	r22, 0x03	; 3
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC10);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8b 7f       	andi	r24, 0xFB	; 251
    13f8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	8c 93       	st	X, r24
    }
#endif

#ifdef INT2      //to define edge of interrupt 2
    if (INT2_FALLING){
        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	62 e0       	ldi	r22, 0x02	; 2
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
		CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    141c:	a4 e5       	ldi	r26, 0x54	; 84
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e5       	ldi	r30, 0x54	; 84
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	8c 93       	st	X, r24
    else if (INT2_RASING) {
    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    }
#endif

}
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <GIE_VidEnable>:

/**********************************************************/
void GIE_VidEnable (void){
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    1438:	af e5       	ldi	r26, 0x5F	; 95
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ef e5       	ldi	r30, 0x5F	; 95
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 68       	ori	r24, 0x80	; 128
    1444:	8c 93       	st	X, r24
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <GIE_VidDisable>:

void GIE_VidDisable (void){
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    1454:	af e5       	ldi	r26, 0x5F	; 95
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ef e5       	ldi	r30, 0x5F	; 95
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 77       	andi	r24, 0x7F	; 127
    1460:	8c 93       	st	X, r24
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <PIE_VidEnable>:

/**********************************************************/
void PIE_VidEnable(u8 COPY_U8INT_NUM){
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <PIE_VidEnable+0x6>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3b 83       	std	Y+3, r19	; 0x03
    147e:	2a 83       	std	Y+2, r18	; 0x02
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	89 f0       	breq	.+34     	; 0x14ac <PIE_VidEnable+0x44>
    148a:	2a 81       	ldd	r18, Y+2	; 0x02
    148c:	3b 81       	ldd	r19, Y+3	; 0x03
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	a1 f0       	breq	.+40     	; 0x14bc <PIE_VidEnable+0x54>
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	b9 f4       	brne	.+46     	; 0x14ca <PIE_VidEnable+0x62>
	case 0 : SET_BIT(GICR,INT0);  break ;   //INT0 Enable
    149c:	ab e5       	ldi	r26, 0x5B	; 91
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	eb e5       	ldi	r30, 0x5B	; 91
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	80 64       	ori	r24, 0x40	; 64
    14a8:	8c 93       	st	X, r24
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <PIE_VidEnable+0x62>
	case 1 : SET_BIT(GICR,INT1);  break ;   //INT1 Enable
    14ac:	ab e5       	ldi	r26, 0x5B	; 91
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	eb e5       	ldi	r30, 0x5B	; 91
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 68       	ori	r24, 0x80	; 128
    14b8:	8c 93       	st	X, r24
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <PIE_VidEnable+0x62>
	case 2 : SET_BIT(GICR,INT2);  break ;   //INT2 Enable
    14bc:	ab e5       	ldi	r26, 0x5B	; 91
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	eb e5       	ldi	r30, 0x5B	; 91
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 62       	ori	r24, 0x20	; 32
    14c8:	8c 93       	st	X, r24
	}
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <PIE_VidDisable>:

void PIE_VidDisable(u8 COPY_U8INT_NUM){
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <PIE_VidDisable+0x6>
    14dc:	0f 92       	push	r0
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3b 83       	std	Y+3, r19	; 0x03
    14ec:	2a 83       	std	Y+2, r18	; 0x02
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	89 f0       	breq	.+34     	; 0x151a <PIE_VidDisable+0x44>
    14f8:	2a 81       	ldd	r18, Y+2	; 0x02
    14fa:	3b 81       	ldd	r19, Y+3	; 0x03
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	a1 f0       	breq	.+40     	; 0x152a <PIE_VidDisable+0x54>
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	b9 f4       	brne	.+46     	; 0x1538 <PIE_VidDisable+0x62>
	case 0 : CLR_BIT(GICR,INT0);  break ;   //INT0 Enable
    150a:	ab e5       	ldi	r26, 0x5B	; 91
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e5       	ldi	r30, 0x5B	; 91
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 7b       	andi	r24, 0xBF	; 191
    1516:	8c 93       	st	X, r24
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <PIE_VidDisable+0x62>
	case 1 : CLR_BIT(GICR,INT1);  break ;   //INT1 Enable
    151a:	ab e5       	ldi	r26, 0x5B	; 91
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	eb e5       	ldi	r30, 0x5B	; 91
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	8c 93       	st	X, r24
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <PIE_VidDisable+0x62>
	case 2 : CLR_BIT(GICR,INT2);  break ;   //INT2 Enable
    152a:	ab e5       	ldi	r26, 0x5B	; 91
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e5       	ldi	r30, 0x5B	; 91
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 7d       	andi	r24, 0xDF	; 223
    1536:	8c 93       	st	X, r24
	}
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <__vector_1>:

/**********************************************************/
void __vector_1(void){
    1544:	1f 92       	push	r1
    1546:	0f 92       	push	r0
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	0f 92       	push	r0
    154c:	11 24       	eor	r1, r1
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62

}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_2>:

void __vector_2(void){
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62

}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	0f 90       	pop	r0
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <__vector_3>:

void __vector_3(void){
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	//to show right ping paddle in beginning
	LCD_VidPosCur(Global_row%2,first_col);
    15ae:	80 91 6a 00 	lds	r24, 0x006A
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
	LCD_VidSendChar(ping_paddle_left);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

	Global_row++;
    15ca:	80 91 6a 00 	lds	r24, 0x006A
    15ce:	8f 5f       	subi	r24, 0xFF	; 255
    15d0:	80 93 6a 00 	sts	0x006A, r24

	//to clear cell
	LCD_VidPosCur(Global_row%2 ,first_col);
    15d4:	80 91 6a 00 	lds	r24, 0x006A
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
	LCD_VidSendChar(' ');
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <LCD_VidSendCommend>:
#include"LCD_cfg.h"
#include"LCD_private.h" 
#include<avr/delay.h>


void LCD_VidSendCommend(u8 Copy_U8Commend){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	6d 97       	sbiw	r28, 0x1d	; 29
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	DIO_VidSetPinValue(CONTROL_PORT,RS,LOW);
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
/******to out the value of commend on data port *****/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Commend);
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	6d 8d       	ldd	r22, Y+29	; 0x1d
    163a:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_VidSetPortValue>
/*************to make pulse for enable **************/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 e8       	ldi	r26, 0x80	; 128
    164e:	bf e3       	ldi	r27, 0x3F	; 63
    1650:	89 8f       	std	Y+25, r24	; 0x19
    1652:	9a 8f       	std	Y+26, r25	; 0x1a
    1654:	ab 8f       	std	Y+27, r26	; 0x1b
    1656:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1658:	69 8d       	ldd	r22, Y+25	; 0x19
    165a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	4a ef       	ldi	r20, 0xFA	; 250
    1666:	54 e4       	ldi	r21, 0x44	; 68
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8d 8b       	std	Y+21, r24	; 0x15
    1672:	9e 8b       	std	Y+22, r25	; 0x16
    1674:	af 8b       	std	Y+23, r26	; 0x17
    1676:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1678:	6d 89       	ldd	r22, Y+21	; 0x15
    167a:	7e 89       	ldd	r23, Y+22	; 0x16
    167c:	8f 89       	ldd	r24, Y+23	; 0x17
    167e:	98 8d       	ldd	r25, Y+24	; 0x18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e8       	ldi	r20, 0x80	; 128
    1686:	5f e3       	ldi	r21, 0x3F	; 63
    1688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    168c:	88 23       	and	r24, r24
    168e:	2c f4       	brge	.+10     	; 0x169a <LCD_VidSendCommend+0x84>
		__ticks = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
    1698:	3f c0       	rjmp	.+126    	; 0x1718 <LCD_VidSendCommend+0x102>
	else if (__tmp > 65535)
    169a:	6d 89       	ldd	r22, Y+21	; 0x15
    169c:	7e 89       	ldd	r23, Y+22	; 0x16
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
    16a0:	98 8d       	ldd	r25, Y+24	; 0x18
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	3f ef       	ldi	r19, 0xFF	; 255
    16a6:	4f e7       	ldi	r20, 0x7F	; 127
    16a8:	57 e4       	ldi	r21, 0x47	; 71
    16aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	4c f5       	brge	.+82     	; 0x1704 <LCD_VidSendCommend+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b2:	69 8d       	ldd	r22, Y+25	; 0x19
    16b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e2       	ldi	r20, 0x20	; 32
    16c0:	51 e4       	ldi	r21, 0x41	; 65
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9c 8b       	std	Y+20, r25	; 0x14
    16d8:	8b 8b       	std	Y+19, r24	; 0x13
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <LCD_VidSendCommend+0xe4>
    16dc:	88 ec       	ldi	r24, 0xC8	; 200
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9a 8b       	std	Y+18, r25	; 0x12
    16e2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e4:	89 89       	ldd	r24, Y+17	; 0x11
    16e6:	9a 89       	ldd	r25, Y+18	; 0x12
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_VidSendCommend+0xd2>
    16ec:	9a 8b       	std	Y+18, r25	; 0x12
    16ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f0:	8b 89       	ldd	r24, Y+19	; 0x13
    16f2:	9c 89       	ldd	r25, Y+20	; 0x14
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9c 8b       	std	Y+20, r25	; 0x14
    16f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fa:	8b 89       	ldd	r24, Y+19	; 0x13
    16fc:	9c 89       	ldd	r25, Y+20	; 0x14
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	69 f7       	brne	.-38     	; 0x16dc <LCD_VidSendCommend+0xc6>
    1702:	14 c0       	rjmp	.+40     	; 0x172c <LCD_VidSendCommend+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	6d 89       	ldd	r22, Y+21	; 0x15
    1706:	7e 89       	ldd	r23, Y+22	; 0x16
    1708:	8f 89       	ldd	r24, Y+23	; 0x17
    170a:	98 8d       	ldd	r25, Y+24	; 0x18
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	8b 8b       	std	Y+19, r24	; 0x13
    1718:	8b 89       	ldd	r24, Y+19	; 0x13
    171a:	9c 89       	ldd	r25, Y+20	; 0x14
    171c:	98 8b       	std	Y+16, r25	; 0x10
    171e:	8f 87       	std	Y+15, r24	; 0x0f
    1720:	8f 85       	ldd	r24, Y+15	; 0x0f
    1722:	98 89       	ldd	r25, Y+16	; 0x10
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_VidSendCommend+0x10e>
    1728:	98 8b       	std	Y+16, r25	; 0x10
    172a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e4       	ldi	r27, 0x40	; 64
    173e:	8b 87       	std	Y+11, r24	; 0x0b
    1740:	9c 87       	std	Y+12, r25	; 0x0c
    1742:	ad 87       	std	Y+13, r26	; 0x0d
    1744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1746:	6b 85       	ldd	r22, Y+11	; 0x0b
    1748:	7c 85       	ldd	r23, Y+12	; 0x0c
    174a:	8d 85       	ldd	r24, Y+13	; 0x0d
    174c:	9e 85       	ldd	r25, Y+14	; 0x0e
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4a ef       	ldi	r20, 0xFA	; 250
    1754:	54 e4       	ldi	r21, 0x44	; 68
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	98 87       	std	Y+8, r25	; 0x08
    1762:	a9 87       	std	Y+9, r26	; 0x09
    1764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177a:	88 23       	and	r24, r24
    177c:	2c f4       	brge	.+10     	; 0x1788 <LCD_VidSendCommend+0x172>
		__ticks = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
    1786:	3f c0       	rjmp	.+126    	; 0x1806 <LCD_VidSendCommend+0x1f0>
	else if (__tmp > 65535)
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	57 e4       	ldi	r21, 0x47	; 71
    1798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	4c f5       	brge	.+82     	; 0x17f2 <LCD_VidSendCommend+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e2       	ldi	r20, 0x20	; 32
    17ae:	51 e4       	ldi	r21, 0x41	; 65
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	0f c0       	rjmp	.+30     	; 0x17e8 <LCD_VidSendCommend+0x1d2>
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <LCD_VidSendCommend+0x1c0>
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	69 f7       	brne	.-38     	; 0x17ca <LCD_VidSendCommend+0x1b4>
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <LCD_VidSendCommend+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f2:	6f 81       	ldd	r22, Y+7	; 0x07
    17f4:	78 85       	ldd	r23, Y+8	; 0x08
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_VidSendCommend+0x1fc>
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
	_delay_ms(2);

#endif
}
    181a:	6d 96       	adiw	r28, 0x1d	; 29
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <LCD_VidInit>:



void LCD_VidInit (void) {
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	c4 56       	subi	r28, 0x64	; 100
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61

#ifdef EIGHT_BIT

/****to define CONTROL PORT as OUTPUT PINS******/
	DIO_VidSetPinDirection(CONTROL_PORT,RS,HIGH);
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,E,HIGH);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
/****to define DATA PORT as OUTPUT PINS********/
	DIO_VidSetPortDirection(DATA_PORT,0xff);
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	6f ef       	ldi	r22, 0xFF	; 255
    185e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_VidSetPortDirection>
    1862:	fe 01       	movw	r30, r28
    1864:	ef 59       	subi	r30, 0x9F	; 159
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e2       	ldi	r26, 0x20	; 32
    186e:	b2 e4       	ldi	r27, 0x42	; 66
    1870:	80 83       	st	Z, r24
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	a2 83       	std	Z+2, r26	; 0x02
    1876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	8e 01       	movw	r16, r28
    187a:	03 5a       	subi	r16, 0xA3	; 163
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	fe 01       	movw	r30, r28
    1880:	ef 59       	subi	r30, 0x9F	; 159
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a ef       	ldi	r20, 0xFA	; 250
    1892:	54 e4       	ldi	r21, 0x44	; 68
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	f8 01       	movw	r30, r16
    189e:	80 83       	st	Z, r24
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	a2 83       	std	Z+2, r26	; 0x02
    18a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a6:	fe 01       	movw	r30, r28
    18a8:	e3 5a       	subi	r30, 0xA3	; 163
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	5f e3       	ldi	r21, 0x3F	; 63
    18bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	44 f4       	brge	.+16     	; 0x18d4 <LCD_VidInit+0xa8>
		__ticks = 1;
    18c4:	fe 01       	movw	r30, r28
    18c6:	e5 5a       	subi	r30, 0xA5	; 165
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	64 c0       	rjmp	.+200    	; 0x199c <LCD_VidInit+0x170>
	else if (__tmp > 65535)
    18d4:	fe 01       	movw	r30, r28
    18d6:	e3 5a       	subi	r30, 0xA3	; 163
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	0c f0       	brlt	.+2      	; 0x18f4 <LCD_VidInit+0xc8>
    18f2:	43 c0       	rjmp	.+134    	; 0x197a <LCD_VidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	fe 01       	movw	r30, r28
    18f6:	ef 59       	subi	r30, 0x9F	; 159
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e2       	ldi	r20, 0x20	; 32
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8e 01       	movw	r16, r28
    1914:	05 5a       	subi	r16, 0xA5	; 165
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	1f c0       	rjmp	.+62     	; 0x196a <LCD_VidInit+0x13e>
    192c:	fe 01       	movw	r30, r28
    192e:	e7 5a       	subi	r30, 0xA7	; 167
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	fe 01       	movw	r30, r28
    193c:	e7 5a       	subi	r30, 0xA7	; 167
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_VidInit+0x118>
    1948:	fe 01       	movw	r30, r28
    194a:	e7 5a       	subi	r30, 0xA7	; 167
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1952:	de 01       	movw	r26, r28
    1954:	a5 5a       	subi	r26, 0xA5	; 165
    1956:	bf 4f       	sbci	r27, 0xFF	; 255
    1958:	fe 01       	movw	r30, r28
    195a:	e5 5a       	subi	r30, 0xA5	; 165
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	11 96       	adiw	r26, 0x01	; 1
    1966:	9c 93       	st	X, r25
    1968:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	fe 01       	movw	r30, r28
    196c:	e5 5a       	subi	r30, 0xA5	; 165
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	d1 f6       	brne	.-76     	; 0x192c <LCD_VidInit+0x100>
    1978:	27 c0       	rjmp	.+78     	; 0x19c8 <LCD_VidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197a:	8e 01       	movw	r16, r28
    197c:	05 5a       	subi	r16, 0xA5	; 165
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	fe 01       	movw	r30, r28
    1982:	e3 5a       	subi	r30, 0xA3	; 163
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	93 81       	ldd	r25, Z+3	; 0x03
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	f8 01       	movw	r30, r16
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
    199c:	de 01       	movw	r26, r28
    199e:	a9 5a       	subi	r26, 0xA9	; 169
    19a0:	bf 4f       	sbci	r27, 0xFF	; 255
    19a2:	fe 01       	movw	r30, r28
    19a4:	e5 5a       	subi	r30, 0xA5	; 165
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	8d 93       	st	X+, r24
    19ae:	9c 93       	st	X, r25
    19b0:	fe 01       	movw	r30, r28
    19b2:	e9 5a       	subi	r30, 0xA9	; 169
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_VidInit+0x18e>
    19be:	fe 01       	movw	r30, r28
    19c0:	e9 5a       	subi	r30, 0xA9	; 169
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
/******to initialize LCD after power***********/
	_delay_ms(40);
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
    19c8:	8c e3       	ldi	r24, 0x3C	; 60
    19ca:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
    19ce:	fe 01       	movw	r30, r28
    19d0:	ed 5a       	subi	r30, 0xAD	; 173
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e2       	ldi	r26, 0x20	; 32
    19da:	b2 e4       	ldi	r27, 0x42	; 66
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19e4:	8e 01       	movw	r16, r28
    19e6:	01 5b       	subi	r16, 0xB1	; 177
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	ed 5a       	subi	r30, 0xAD	; 173
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	2b ea       	ldi	r18, 0xAB	; 171
    19fa:	3a ea       	ldi	r19, 0xAA	; 170
    19fc:	4a e2       	ldi	r20, 0x2A	; 42
    19fe:	50 e4       	ldi	r21, 0x40	; 64
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a12:	fe 01       	movw	r30, r28
    1a14:	e1 5b       	subi	r30, 0xB1	; 177
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	34 f4       	brge	.+12     	; 0x1a3c <LCD_VidInit+0x210>
		__ticks = 1;
    1a30:	fe 01       	movw	r30, r28
    1a32:	e2 5b       	subi	r30, 0xB2	; 178
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	80 83       	st	Z, r24
    1a3a:	e0 c0       	rjmp	.+448    	; 0x1bfc <LCD_VidInit+0x3d0>
	else if (__tmp > 255)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e1 5b       	subi	r30, 0xB1	; 177
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	53 e4       	ldi	r21, 0x43	; 67
    1a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	0c f0       	brlt	.+2      	; 0x1a5c <LCD_VidInit+0x230>
    1a5a:	c0 c0       	rjmp	.+384    	; 0x1bdc <LCD_VidInit+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ed 5a       	subi	r30, 0xAD	; 173
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e6 5b       	subi	r30, 0xB6	; 182
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 83       	st	Z, r24
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	a2 83       	std	Z+2, r26	; 0x02
    1a86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	8e 01       	movw	r16, r28
    1a8a:	0a 5b       	subi	r16, 0xBA	; 186
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e6 5b       	subi	r30, 0xB6	; 182
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a ef       	ldi	r20, 0xFA	; 250
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	f8 01       	movw	r30, r16
    1aae:	80 83       	st	Z, r24
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	a2 83       	std	Z+2, r26	; 0x02
    1ab4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ea 5b       	subi	r30, 0xBA	; 186
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	44 f4       	brge	.+16     	; 0x1ae4 <LCD_VidInit+0x2b8>
		__ticks = 1;
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ec 5b       	subi	r30, 0xBC	; 188
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	91 83       	std	Z+1, r25	; 0x01
    1ae0:	80 83       	st	Z, r24
    1ae2:	64 c0       	rjmp	.+200    	; 0x1bac <LCD_VidInit+0x380>
	else if (__tmp > 65535)
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ea 5b       	subi	r30, 0xBA	; 186
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	0c f0       	brlt	.+2      	; 0x1b04 <LCD_VidInit+0x2d8>
    1b02:	43 c0       	rjmp	.+134    	; 0x1b8a <LCD_VidInit+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	fe 01       	movw	r30, r28
    1b06:	e6 5b       	subi	r30, 0xB6	; 182
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	60 81       	ld	r22, Z
    1b0c:	71 81       	ldd	r23, Z+1	; 0x01
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	8e 01       	movw	r16, r28
    1b24:	0c 5b       	subi	r16, 0xBC	; 188
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	1f c0       	rjmp	.+62     	; 0x1b7a <LCD_VidInit+0x34e>
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ee 5b       	subi	r30, 0xBE	; 190
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	80 83       	st	Z, r24
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	ee 5b       	subi	r30, 0xBE	; 190
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_VidInit+0x328>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ee 5b       	subi	r30, 0xBE	; 190
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	de 01       	movw	r26, r28
    1b64:	ac 5b       	subi	r26, 0xBC	; 188
    1b66:	bf 4f       	sbci	r27, 0xFF	; 255
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ec 5b       	subi	r30, 0xBC	; 188
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	11 96       	adiw	r26, 0x01	; 1
    1b76:	9c 93       	st	X, r25
    1b78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	ec 5b       	subi	r30, 0xBC	; 188
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	d1 f6       	brne	.-76     	; 0x1b3c <LCD_VidInit+0x310>
    1b88:	42 c0       	rjmp	.+132    	; 0x1c0e <LCD_VidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	0c 5b       	subi	r16, 0xBC	; 188
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	fe 01       	movw	r30, r28
    1b92:	ea 5b       	subi	r30, 0xBA	; 186
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	de 01       	movw	r26, r28
    1bae:	a0 5c       	subi	r26, 0xC0	; 192
    1bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ec 5b       	subi	r30, 0xBC	; 188
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	11 96       	adiw	r26, 0x01	; 1
    1bbe:	9c 93       	st	X, r25
    1bc0:	8e 93       	st	-X, r24
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e0 5c       	subi	r30, 0xC0	; 192
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_VidInit+0x3a0>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e0 5c       	subi	r30, 0xC0	; 192
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	19 c0       	rjmp	.+50     	; 0x1c0e <LCD_VidInit+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bdc:	8e 01       	movw	r16, r28
    1bde:	02 5b       	subi	r16, 0xB2	; 178
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e1 5b       	subi	r30, 0xB1	; 177
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	80 83       	st	Z, r24
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e2 5b       	subi	r30, 0xB2	; 178
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c06:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c08:	8a 95       	dec	r24
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_VidInit+0x3dc>
    1c0c:	8f af       	std	Y+63, r24	; 0x3f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
    1c0e:	8c e0       	ldi	r24, 0x0C	; 12
    1c10:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e2       	ldi	r26, 0x20	; 32
    1c1a:	b2 e4       	ldi	r27, 0x42	; 66
    1c1c:	8b af       	std	Y+59, r24	; 0x3b
    1c1e:	9c af       	std	Y+60, r25	; 0x3c
    1c20:	ad af       	std	Y+61, r26	; 0x3d
    1c22:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c24:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c26:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2c:	2b ea       	ldi	r18, 0xAB	; 171
    1c2e:	3a ea       	ldi	r19, 0xAA	; 170
    1c30:	4a e2       	ldi	r20, 0x2A	; 42
    1c32:	50 e4       	ldi	r21, 0x40	; 64
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f ab       	std	Y+55, r24	; 0x37
    1c3e:	98 af       	std	Y+56, r25	; 0x38
    1c40:	a9 af       	std	Y+57, r26	; 0x39
    1c42:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1c44:	6f a9       	ldd	r22, Y+55	; 0x37
    1c46:	78 ad       	ldd	r23, Y+56	; 0x38
    1c48:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	1c f4       	brge	.+6      	; 0x1c62 <LCD_VidInit+0x436>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	8e ab       	std	Y+54, r24	; 0x36
    1c60:	91 c0       	rjmp	.+290    	; 0x1d84 <LCD_VidInit+0x558>
	else if (__tmp > 255)
    1c62:	6f a9       	ldd	r22, Y+55	; 0x37
    1c64:	78 ad       	ldd	r23, Y+56	; 0x38
    1c66:	89 ad       	ldd	r24, Y+57	; 0x39
    1c68:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <LCD_VidInit+0x450>
    1c7a:	7b c0       	rjmp	.+246    	; 0x1d72 <LCD_VidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1c7c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c7e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a e7       	ldi	r20, 0x7A	; 122
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8a ab       	std	Y+50, r24	; 0x32
    1c96:	9b ab       	std	Y+51, r25	; 0x33
    1c98:	ac ab       	std	Y+52, r26	; 0x34
    1c9a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6a a9       	ldd	r22, Y+50	; 0x32
    1c9e:	7b a9       	ldd	r23, Y+51	; 0x33
    1ca0:	8c a9       	ldd	r24, Y+52	; 0x34
    1ca2:	9d a9       	ldd	r25, Y+53	; 0x35
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8e a7       	std	Y+46, r24	; 0x2e
    1cb6:	9f a7       	std	Y+47, r25	; 0x2f
    1cb8:	a8 ab       	std	Y+48, r26	; 0x30
    1cba:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1cbc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cbe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cc0:	88 a9       	ldd	r24, Y+48	; 0x30
    1cc2:	99 a9       	ldd	r25, Y+49	; 0x31
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <LCD_VidInit+0x4b2>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9d a7       	std	Y+45, r25	; 0x2d
    1cda:	8c a7       	std	Y+44, r24	; 0x2c
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <LCD_VidInit+0x530>
	else if (__tmp > 65535)
    1cde:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ce0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ce2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ce4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <LCD_VidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6a a9       	ldd	r22, Y+50	; 0x32
    1cf8:	7b a9       	ldd	r23, Y+51	; 0x33
    1cfa:	8c a9       	ldd	r24, Y+52	; 0x34
    1cfc:	9d a9       	ldd	r25, Y+53	; 0x35
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9d a7       	std	Y+45, r25	; 0x2d
    1d1c:	8c a7       	std	Y+44, r24	; 0x2c
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <LCD_VidInit+0x512>
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9b a7       	std	Y+43, r25	; 0x2b
    1d26:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d28:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d2a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_VidInit+0x500>
    1d30:	9b a7       	std	Y+43, r25	; 0x2b
    1d32:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d36:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9d a7       	std	Y+45, r25	; 0x2d
    1d3c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d40:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <LCD_VidInit+0x4f4>
    1d46:	24 c0       	rjmp	.+72     	; 0x1d90 <LCD_VidInit+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d4a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d4c:	88 a9       	ldd	r24, Y+48	; 0x30
    1d4e:	99 a9       	ldd	r25, Y+49	; 0x31
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9d a7       	std	Y+45, r25	; 0x2d
    1d5a:	8c a7       	std	Y+44, r24	; 0x2c
    1d5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d5e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d60:	99 a7       	std	Y+41, r25	; 0x29
    1d62:	88 a7       	std	Y+40, r24	; 0x28
    1d64:	88 a5       	ldd	r24, Y+40	; 0x28
    1d66:	99 a5       	ldd	r25, Y+41	; 0x29
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_VidInit+0x53c>
    1d6c:	99 a7       	std	Y+41, r25	; 0x29
    1d6e:	88 a7       	std	Y+40, r24	; 0x28
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_VidInit+0x564>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d72:	6f a9       	ldd	r22, Y+55	; 0x37
    1d74:	78 ad       	ldd	r23, Y+56	; 0x38
    1d76:	89 ad       	ldd	r24, Y+57	; 0x39
    1d78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8e ab       	std	Y+54, r24	; 0x36
    1d84:	8e a9       	ldd	r24, Y+54	; 0x36
    1d86:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d88:	8f a1       	ldd	r24, Y+39	; 0x27
    1d8a:	8a 95       	dec	r24
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_VidInit+0x55e>
    1d8e:	8f a3       	std	Y+39, r24	; 0x27
	// Delay for more than 39 us
	_delay_us(40);
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE_RIGHT);
    1d90:	86 e0       	ldi	r24, 0x06	; 6
    1d92:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e2       	ldi	r26, 0x20	; 32
    1d9c:	b2 e4       	ldi	r27, 0x42	; 66
    1d9e:	8b a3       	std	Y+35, r24	; 0x23
    1da0:	9c a3       	std	Y+36, r25	; 0x24
    1da2:	ad a3       	std	Y+37, r26	; 0x25
    1da4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1da6:	6b a1       	ldd	r22, Y+35	; 0x23
    1da8:	7c a1       	ldd	r23, Y+36	; 0x24
    1daa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dac:	9e a1       	ldd	r25, Y+38	; 0x26
    1dae:	2b ea       	ldi	r18, 0xAB	; 171
    1db0:	3a ea       	ldi	r19, 0xAA	; 170
    1db2:	4a e2       	ldi	r20, 0x2A	; 42
    1db4:	50 e4       	ldi	r21, 0x40	; 64
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	8f 8f       	std	Y+31, r24	; 0x1f
    1dc0:	98 a3       	std	Y+32, r25	; 0x20
    1dc2:	a9 a3       	std	Y+33, r26	; 0x21
    1dc4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1dc6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dc8:	78 a1       	ldd	r23, Y+32	; 0x20
    1dca:	89 a1       	ldd	r24, Y+33	; 0x21
    1dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	1c f4       	brge	.+6      	; 0x1de4 <LCD_VidInit+0x5b8>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	8e 8f       	std	Y+30, r24	; 0x1e
    1de2:	91 c0       	rjmp	.+290    	; 0x1f06 <LCD_VidInit+0x6da>
	else if (__tmp > 255)
    1de4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1de6:	78 a1       	ldd	r23, Y+32	; 0x20
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	53 e4       	ldi	r21, 0x43	; 67
    1df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	0c f0       	brlt	.+2      	; 0x1dfe <LCD_VidInit+0x5d2>
    1dfc:	7b c0       	rjmp	.+246    	; 0x1ef4 <LCD_VidInit+0x6c8>
	{
		_delay_ms(__us / 1000.0);
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	4a e7       	ldi	r20, 0x7A	; 122
    1e0c:	54 e4       	ldi	r21, 0x44	; 68
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	8a 8f       	std	Y+26, r24	; 0x1a
    1e18:	9b 8f       	std	Y+27, r25	; 0x1b
    1e1a:	ac 8f       	std	Y+28, r26	; 0x1c
    1e1c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e20:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e24:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a ef       	ldi	r20, 0xFA	; 250
    1e2c:	54 e4       	ldi	r21, 0x44	; 68
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8e 8b       	std	Y+22, r24	; 0x16
    1e38:	9f 8b       	std	Y+23, r25	; 0x17
    1e3a:	a8 8f       	std	Y+24, r26	; 0x18
    1e3c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e3e:	6e 89       	ldd	r22, Y+22	; 0x16
    1e40:	7f 89       	ldd	r23, Y+23	; 0x17
    1e42:	88 8d       	ldd	r24, Y+24	; 0x18
    1e44:	99 8d       	ldd	r25, Y+25	; 0x19
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <LCD_VidInit+0x634>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9d 8b       	std	Y+21, r25	; 0x15
    1e5c:	8c 8b       	std	Y+20, r24	; 0x14
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <LCD_VidInit+0x6b2>
	else if (__tmp > 65535)
    1e60:	6e 89       	ldd	r22, Y+22	; 0x16
    1e62:	7f 89       	ldd	r23, Y+23	; 0x17
    1e64:	88 8d       	ldd	r24, Y+24	; 0x18
    1e66:	99 8d       	ldd	r25, Y+25	; 0x19
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <LCD_VidInit+0x69e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e7a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9d 8b       	std	Y+21, r25	; 0x15
    1e9e:	8c 8b       	std	Y+20, r24	; 0x14
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <LCD_VidInit+0x694>
    1ea2:	88 ec       	ldi	r24, 0xC8	; 200
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9b 8b       	std	Y+19, r25	; 0x13
    1ea8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eaa:	8a 89       	ldd	r24, Y+18	; 0x12
    1eac:	9b 89       	ldd	r25, Y+19	; 0x13
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_VidInit+0x682>
    1eb2:	9b 8b       	std	Y+19, r25	; 0x13
    1eb4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8c 89       	ldd	r24, Y+20	; 0x14
    1eb8:	9d 89       	ldd	r25, Y+21	; 0x15
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9d 8b       	std	Y+21, r25	; 0x15
    1ebe:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <LCD_VidInit+0x676>
    1ec8:	24 c0       	rjmp	.+72     	; 0x1f12 <LCD_VidInit+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6e 89       	ldd	r22, Y+22	; 0x16
    1ecc:	7f 89       	ldd	r23, Y+23	; 0x17
    1ece:	88 8d       	ldd	r24, Y+24	; 0x18
    1ed0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9d 8b       	std	Y+21, r25	; 0x15
    1edc:	8c 8b       	std	Y+20, r24	; 0x14
    1ede:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee0:	9d 89       	ldd	r25, Y+21	; 0x15
    1ee2:	99 8b       	std	Y+17, r25	; 0x11
    1ee4:	88 8b       	std	Y+16, r24	; 0x10
    1ee6:	88 89       	ldd	r24, Y+16	; 0x10
    1ee8:	99 89       	ldd	r25, Y+17	; 0x11
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_VidInit+0x6be>
    1eee:	99 8b       	std	Y+17, r25	; 0x11
    1ef0:	88 8b       	std	Y+16, r24	; 0x10
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <LCD_VidInit+0x6e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ef4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ef6:	78 a1       	ldd	r23, Y+32	; 0x20
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	8e 8f       	std	Y+30, r24	; 0x1e
    1f06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f08:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0c:	8a 95       	dec	r24
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_VidInit+0x6e0>
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay for more than 39 us
	_delay_us(40);
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e4       	ldi	r27, 0x40	; 64
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
    1f22:	9c 87       	std	Y+12, r25	; 0x0c
    1f24:	ad 87       	std	Y+13, r26	; 0x0d
    1f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8f 83       	std	Y+7, r24	; 0x07
    1f42:	98 87       	std	Y+8, r25	; 0x08
    1f44:	a9 87       	std	Y+9, r26	; 0x09
    1f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <LCD_VidInit+0x73e>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <LCD_VidInit+0x7bc>
	else if (__tmp > 65535)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <LCD_VidInit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_VidInit+0x79e>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 83       	std	Y+4, r25	; 0x04
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_VidInit+0x78c>
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_VidInit+0x780>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <LCD_VidInit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_VidInit+0x7c8>
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
	// Delay for more than 1.53 ms
	_delay_ms(2);
#endif
}
    1ffc:	cc 59       	subi	r28, 0x9C	; 156
    1ffe:	df 4f       	sbci	r29, 0xFF	; 255
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_U8Char){
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	6d 97       	sbiw	r28, 0x1d	; 29
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	8d 8f       	std	Y+29, r24	; 0x1d

#ifdef EIGHT_BIT
	/******* to define RS / RW ***********/
	DIO_VidSetPinValue(CONTROL_PORT,RS,HIGH);
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
	/*to define value of character on port*/
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Char);
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2038:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_VidSetPortValue>
	/*********to make enable pulse*********/
	DIO_VidSetPinValue(CONTROL_PORT,E,HIGH);
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e8       	ldi	r26, 0x80	; 128
    204c:	bf e3       	ldi	r27, 0x3F	; 63
    204e:	89 8f       	std	Y+25, r24	; 0x19
    2050:	9a 8f       	std	Y+26, r25	; 0x1a
    2052:	ab 8f       	std	Y+27, r26	; 0x1b
    2054:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	69 8d       	ldd	r22, Y+25	; 0x19
    2058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8d 8b       	std	Y+21, r24	; 0x15
    2070:	9e 8b       	std	Y+22, r25	; 0x16
    2072:	af 8b       	std	Y+23, r26	; 0x17
    2074:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <LCD_VidSendChar+0x84>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <LCD_VidSendChar+0x102>
	else if (__tmp > 65535)
    2098:	6d 89       	ldd	r22, Y+21	; 0x15
    209a:	7e 89       	ldd	r23, Y+22	; 0x16
    209c:	8f 89       	ldd	r24, Y+23	; 0x17
    209e:	98 8d       	ldd	r25, Y+24	; 0x18
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <LCD_VidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	69 8d       	ldd	r22, Y+25	; 0x19
    20b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <LCD_VidSendChar+0xe4>
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9a 8b       	std	Y+18, r25	; 0x12
    20e0:	89 8b       	std	Y+17, r24	; 0x11
    20e2:	89 89       	ldd	r24, Y+17	; 0x11
    20e4:	9a 89       	ldd	r25, Y+18	; 0x12
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_VidSendChar+0xd2>
    20ea:	9a 8b       	std	Y+18, r25	; 0x12
    20ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	8b 89       	ldd	r24, Y+19	; 0x13
    20f0:	9c 89       	ldd	r25, Y+20	; 0x14
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9c 8b       	std	Y+20, r25	; 0x14
    20f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	9c 89       	ldd	r25, Y+20	; 0x14
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <LCD_VidSendChar+0xc6>
    2100:	14 c0       	rjmp	.+40     	; 0x212a <LCD_VidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	6d 89       	ldd	r22, Y+21	; 0x15
    2104:	7e 89       	ldd	r23, Y+22	; 0x16
    2106:	8f 89       	ldd	r24, Y+23	; 0x17
    2108:	98 8d       	ldd	r25, Y+24	; 0x18
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9c 8b       	std	Y+20, r25	; 0x14
    2114:	8b 8b       	std	Y+19, r24	; 0x13
    2116:	8b 89       	ldd	r24, Y+19	; 0x13
    2118:	9c 89       	ldd	r25, Y+20	; 0x14
    211a:	98 8b       	std	Y+16, r25	; 0x10
    211c:	8f 87       	std	Y+15, r24	; 0x0f
    211e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2120:	98 89       	ldd	r25, Y+16	; 0x10
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_VidSendChar+0x10e>
    2126:	98 8b       	std	Y+16, r25	; 0x10
    2128:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
    212a:	83 e0       	ldi	r24, 0x03	; 3
    212c:	61 e0       	ldi	r22, 0x01	; 1
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e4       	ldi	r27, 0x40	; 64
    213c:	8b 87       	std	Y+11, r24	; 0x0b
    213e:	9c 87       	std	Y+12, r25	; 0x0c
    2140:	ad 87       	std	Y+13, r26	; 0x0d
    2142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a ef       	ldi	r20, 0xFA	; 250
    2152:	54 e4       	ldi	r21, 0x44	; 68
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f 83       	std	Y+7, r24	; 0x07
    215e:	98 87       	std	Y+8, r25	; 0x08
    2160:	a9 87       	std	Y+9, r26	; 0x09
    2162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_VidSendChar+0x172>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_VidSendChar+0x1f0>
	else if (__tmp > 65535)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_VidSendChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_VidSendChar+0x1d2>
    21c8:	88 ec       	ldi	r24, 0xC8	; 200
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_VidSendChar+0x1c0>
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_VidSendChar+0x1b4>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_VidSendChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_VidSendChar+0x1fc>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSetPinValue(CONTROL_PORT,E,LOW);
		_delay_ms(2);

#endif

}
    2218:	6d 96       	adiw	r28, 0x1d	; 29
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <LCD_VidSendString>:

void LCD_VidSendString(u8 Copy_U8String[] ){
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	6b 97       	sbiw	r28, 0x1b	; 27
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	9b 8f       	std	Y+27, r25	; 0x1b
    2240:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 i=0;
    2242:	19 8e       	std	Y+25, r1	; 0x19
    2244:	d2 c0       	rjmp	.+420    	; 0x23ea <LCD_VidSendString+0x1c0>
	while( Copy_U8String[i] != '\0' ){
		if (15 == i){
    2246:	89 8d       	ldd	r24, Y+25	; 0x19
    2248:	8f 30       	cpi	r24, 0x0F	; 15
    224a:	19 f4       	brne	.+6      	; 0x2252 <LCD_VidSendString+0x28>
			LCD_VidSendCommend(LINE_2_START);
    224c:	80 ec       	ldi	r24, 0xC0	; 192
    224e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
		}
		LCD_VidSendChar(Copy_U8String[i]);
    2252:	89 8d       	ldd	r24, Y+25	; 0x19
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8a 8d       	ldd	r24, Y+26	; 0x1a
    225a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    225c:	fc 01       	movw	r30, r24
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	80 81       	ld	r24, Z
    2264:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e8       	ldi	r26, 0x80	; 128
    226e:	bf e3       	ldi	r27, 0x3F	; 63
    2270:	8d 8b       	std	Y+21, r24	; 0x15
    2272:	9e 8b       	std	Y+22, r25	; 0x16
    2274:	af 8b       	std	Y+23, r26	; 0x17
    2276:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	2b ea       	ldi	r18, 0xAB	; 171
    2282:	3a ea       	ldi	r19, 0xAA	; 170
    2284:	4a e2       	ldi	r20, 0x2A	; 42
    2286:	50 e4       	ldi	r21, 0x40	; 64
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	89 8b       	std	Y+17, r24	; 0x11
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	ab 8b       	std	Y+19, r26	; 0x13
    2296:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2298:	69 89       	ldd	r22, Y+17	; 0x11
    229a:	7a 89       	ldd	r23, Y+18	; 0x12
    229c:	8b 89       	ldd	r24, Y+19	; 0x13
    229e:	9c 89       	ldd	r25, Y+20	; 0x14
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	1c f4       	brge	.+6      	; 0x22b6 <LCD_VidSendString+0x8c>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	88 8b       	std	Y+16, r24	; 0x10
    22b4:	91 c0       	rjmp	.+290    	; 0x23d8 <LCD_VidSendString+0x1ae>
	else if (__tmp > 255)
    22b6:	69 89       	ldd	r22, Y+17	; 0x11
    22b8:	7a 89       	ldd	r23, Y+18	; 0x12
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	0c f0       	brlt	.+2      	; 0x22d0 <LCD_VidSendString+0xa6>
    22ce:	7b c0       	rjmp	.+246    	; 0x23c6 <LCD_VidSendString+0x19c>
	{
		_delay_ms(__us / 1000.0);
    22d0:	6d 89       	ldd	r22, Y+21	; 0x15
    22d2:	7e 89       	ldd	r23, Y+22	; 0x16
    22d4:	8f 89       	ldd	r24, Y+23	; 0x17
    22d6:	98 8d       	ldd	r25, Y+24	; 0x18
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8c 87       	std	Y+12, r24	; 0x0c
    22ea:	9d 87       	std	Y+13, r25	; 0x0d
    22ec:	ae 87       	std	Y+14, r26	; 0x0e
    22ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a ef       	ldi	r20, 0xFA	; 250
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	88 87       	std	Y+8, r24	; 0x08
    230a:	99 87       	std	Y+9, r25	; 0x09
    230c:	aa 87       	std	Y+10, r26	; 0x0a
    230e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2310:	68 85       	ldd	r22, Y+8	; 0x08
    2312:	79 85       	ldd	r23, Y+9	; 0x09
    2314:	8a 85       	ldd	r24, Y+10	; 0x0a
    2316:	9b 85       	ldd	r25, Y+11	; 0x0b
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <LCD_VidSendString+0x108>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9f 83       	std	Y+7, r25	; 0x07
    232e:	8e 83       	std	Y+6, r24	; 0x06
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <LCD_VidSendString+0x186>
	else if (__tmp > 65535)
    2332:	68 85       	ldd	r22, Y+8	; 0x08
    2334:	79 85       	ldd	r23, Y+9	; 0x09
    2336:	8a 85       	ldd	r24, Y+10	; 0x0a
    2338:	9b 85       	ldd	r25, Y+11	; 0x0b
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <LCD_VidSendString+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	6c 85       	ldd	r22, Y+12	; 0x0c
    234c:	7d 85       	ldd	r23, Y+13	; 0x0d
    234e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2350:	9f 85       	ldd	r25, Y+15	; 0x0f
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9f 83       	std	Y+7, r25	; 0x07
    2370:	8e 83       	std	Y+6, r24	; 0x06
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <LCD_VidSendString+0x168>
    2374:	88 ec       	ldi	r24, 0xC8	; 200
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9d 83       	std	Y+5, r25	; 0x05
    237a:	8c 83       	std	Y+4, r24	; 0x04
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_VidSendString+0x156>
    2384:	9d 83       	std	Y+5, r25	; 0x05
    2386:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	8e 81       	ldd	r24, Y+6	; 0x06
    238a:	9f 81       	ldd	r25, Y+7	; 0x07
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	9f 83       	std	Y+7, r25	; 0x07
    2390:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	69 f7       	brne	.-38     	; 0x2374 <LCD_VidSendString+0x14a>
    239a:	24 c0       	rjmp	.+72     	; 0x23e4 <LCD_VidSendString+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	68 85       	ldd	r22, Y+8	; 0x08
    239e:	79 85       	ldd	r23, Y+9	; 0x09
    23a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9f 83       	std	Y+7, r25	; 0x07
    23ae:	8e 83       	std	Y+6, r24	; 0x06
    23b0:	8e 81       	ldd	r24, Y+6	; 0x06
    23b2:	9f 81       	ldd	r25, Y+7	; 0x07
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_VidSendString+0x192>
    23c0:	9b 83       	std	Y+3, r25	; 0x03
    23c2:	8a 83       	std	Y+2, r24	; 0x02
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_VidSendString+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23c6:	69 89       	ldd	r22, Y+17	; 0x11
    23c8:	7a 89       	ldd	r23, Y+18	; 0x12
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	88 8b       	std	Y+16, r24	; 0x10
    23d8:	88 89       	ldd	r24, Y+16	; 0x10
    23da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	8a 95       	dec	r24
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_VidSendString+0x1b4>
    23e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		i++;
    23e4:	89 8d       	ldd	r24, Y+25	; 0x19
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	89 8f       	std	Y+25, r24	; 0x19

}

void LCD_VidSendString(u8 Copy_U8String[] ){
	u8 i=0;
	while( Copy_U8String[i] != '\0' ){
    23ea:	89 8d       	ldd	r24, Y+25	; 0x19
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23f4:	fc 01       	movw	r30, r24
    23f6:	e2 0f       	add	r30, r18
    23f8:	f3 1f       	adc	r31, r19
    23fa:	80 81       	ld	r24, Z
    23fc:	88 23       	and	r24, r24
    23fe:	09 f0       	breq	.+2      	; 0x2402 <LCD_VidSendString+0x1d8>
    2400:	22 cf       	rjmp	.-444    	; 0x2246 <LCD_VidSendString+0x1c>
		}
		LCD_VidSendChar(Copy_U8String[i]);
		_delay_us(1);
		i++;
	}//end while
}//end FUNC LCD_VidSendString
    2402:	6b 96       	adiw	r28, 0x1b	; 27
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <LCD_U32Pow>:

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <LCD_U32Pow+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCD_U32Pow+0x8>
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	8b 83       	std	Y+3, r24	; 0x03
    2422:	6c 83       	std	Y+4, r22	; 0x04
  u32 local_res = 1 ;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	12 c0       	rjmp	.+36     	; 0x2452 <LCD_U32Pow+0x3e>
  while (Copy_U8Bow >0 ){
	  local_res *= Copy_U8Base ;
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	ac 01       	movw	r20, r24
    243a:	42 9f       	mul	r20, r18
    243c:	c0 01       	movw	r24, r0
    243e:	43 9f       	mul	r20, r19
    2440:	90 0d       	add	r25, r0
    2442:	52 9f       	mul	r21, r18
    2444:	90 0d       	add	r25, r0
    2446:	11 24       	eor	r1, r1
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
	  Copy_U8Bow--;
    244c:	8c 81       	ldd	r24, Y+4	; 0x04
    244e:	81 50       	subi	r24, 0x01	; 1
    2450:	8c 83       	std	Y+4, r24	; 0x04
	}//end while
}//end FUNC LCD_VidSendString

u32 LCD_U32Pow(u8 Copy_U8Base , u8 Copy_U8Bow ){
  u32 local_res = 1 ;
  while (Copy_U8Bow >0 ){
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	88 23       	and	r24, r24
    2456:	59 f7       	brne	.-42     	; 0x242e <LCD_U32Pow+0x1a>
	  local_res *= Copy_U8Base ;
	  Copy_U8Bow--;
  }
  return  local_res ;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <LCD_VidPrintVar>:

void LCD_VidPrintVar(u32 Copy_U8Var){
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_VidPrintVar+0xa>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_VidPrintVar+0xc>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <LCD_VidPrintVar+0xe>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
	//to write 0 if it send directly
	if (0 == Copy_U8Var){
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	21 f4       	brne	.+8      	; 0x2490 <LCD_VidPrintVar+0x26>
		LCD_VidSendChar('0');
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    248e:	5d c0       	rjmp	.+186    	; 0x254a <LCD_VidPrintVar+0xe0>
		return ;
	}
	u32 local_num = 0 ;
    2490:	1c 82       	std	Y+4, r1	; 0x04
    2492:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0 ;
    2494:	1a 82       	std	Y+2, r1	; 0x02
    2496:	03 c0       	rjmp	.+6      	; 0x249e <LCD_VidPrintVar+0x34>
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	8f 5f       	subi	r24, 0xFF	; 255
    249c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidSendChar('0');
		return ;
	}
	u32 local_num = 0 ;
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
    249e:	8a e0       	ldi	r24, 0x0A	; 10
    24a0:	6a 81       	ldd	r22, Y+2	; 0x02
    24a2:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_U32Pow>
    24a6:	9c 01       	movw	r18, r24
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	b9 01       	movw	r22, r18
    24ae:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    24b2:	cb 01       	movw	r24, r22
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	81 f7       	brne	.-32     	; 0x2498 <LCD_VidPrintVar+0x2e>
		i++ ;
	}
	s8 copy_i = i-1 ;
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	81 50       	subi	r24, 0x01	; 1
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	27 c0       	rjmp	.+78     	; 0x250e <LCD_VidPrintVar+0xa4>
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	2a e0       	ldi	r18, 0x0A	; 10
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	b9 01       	movw	r22, r18
    24ca:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    24ce:	8c 01       	movw	r16, r24
    24d0:	99 81       	ldd	r25, Y+1	; 0x01
    24d2:	8a e0       	ldi	r24, 0x0A	; 10
    24d4:	69 2f       	mov	r22, r25
    24d6:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_U32Pow>
    24da:	08 9f       	mul	r16, r24
    24dc:	90 01       	movw	r18, r0
    24de:	09 9f       	mul	r16, r25
    24e0:	30 0d       	add	r19, r0
    24e2:	18 9f       	mul	r17, r24
    24e4:	30 0d       	add	r19, r0
    24e6:	11 24       	eor	r1, r1
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	82 0f       	add	r24, r18
    24ee:	93 1f       	adc	r25, r19
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
		Copy_U8Var/=10 ;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	2a e0       	ldi	r18, 0x0A	; 10
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	b9 01       	movw	r22, r18
    24fe:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
		copy_i-- ;
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	81 50       	subi	r24, 0x01	; 1
    250c:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0 ;
	while (  Copy_U8Var/ (LCD_U32Pow(10,i) )  != 0 ){
		i++ ;
	}
	s8 copy_i = i-1 ;
	while ( copy_i >= 0 ){
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	88 23       	and	r24, r24
    2512:	b4 f6       	brge	.-84     	; 0x24c0 <LCD_VidPrintVar+0x56>
    2514:	17 c0       	rjmp	.+46     	; 0x2544 <LCD_VidPrintVar+0xda>
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	2a e0       	ldi	r18, 0x0A	; 10
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	b9 01       	movw	r22, r18
    2520:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    2524:	80 5d       	subi	r24, 0xD0	; 208
    2526:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
		local_num /= 10 ;
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	2a e0       	ldi	r18, 0x0A	; 10
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	b9 01       	movw	r22, r18
    2534:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodhi4>
    2538:	cb 01       	movw	r24, r22
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	81 50       	subi	r24, 0x01	; 1
    2542:	8a 83       	std	Y+2, r24	; 0x02
	while ( copy_i >= 0 ){
		local_num += (Copy_U8Var%10) * ( LCD_U32Pow(10,copy_i) ) ;
		Copy_U8Var/=10 ;
		copy_i-- ;
	}
	while( i > 0 ){
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	88 23       	and	r24, r24
    2548:	31 f7       	brne	.-52     	; 0x2516 <LCD_VidPrintVar+0xac>
		LCD_VidSendChar( (local_num % 10) +'0' ) ;
		local_num /= 10 ;
		i--;
	}
}
    254a:	26 96       	adiw	r28, 0x06	; 6
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	08 95       	ret

00002560 <LCD_VidPosCur>:
void LCD_VidPosCur(u8 Copy_U8Row , u8 Copy_U8Col ) {
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <LCD_VidPosCur+0x6>
    2566:	0f 92       	push	r0
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = 0 ;
    2570:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_U8Row == 0)
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	88 23       	and	r24, r24
    2576:	19 f4       	brne	.+6      	; 0x257e <LCD_VidPosCur+0x1e>
		Local_Address =0x80 ;
    2578:	80 e8       	ldi	r24, 0x80	; 128
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	05 c0       	rjmp	.+10     	; 0x2588 <LCD_VidPosCur+0x28>
	else if (Copy_U8Row == 1)
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	11 f4       	brne	.+4      	; 0x2588 <LCD_VidPosCur+0x28>
		Local_Address =0xC0 ;
    2584:	80 ec       	ldi	r24, 0xC0	; 192
    2586:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_U8Col < 16 )
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	80 31       	cpi	r24, 0x10	; 16
    258c:	20 f4       	brcc	.+8      	; 0x2596 <LCD_VidPosCur+0x36>
		Local_Address += Copy_U8Col ;
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9b 81       	ldd	r25, Y+3	; 0x03
    2592:	89 0f       	add	r24, r25
    2594:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommend ( Local_Address );
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <LCD_VidClear>:
void LCD_VidClear (){
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommend(DISPLAY_CLEAR) ;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>
}
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <main>:
#include "PING_PONG_2_private.h"

extern Global_row ;

void main ( void )
{
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	ca 5c       	subi	r28, 0xCA	; 202
    25ca:	d0 40       	sbci	r29, 0x00	; 0
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
	//define pin to check that the ball isn't saved in LCD 1
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_SAVED_1,LOW);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	64 e0       	ldi	r22, 0x04	; 4
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>

	//define pin to check that the ball isn't saved in LCD 2
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_SAVED_2,HIGH);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	65 e0       	ldi	r22, 0x05	; 5
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_2,LOW);
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	65 e0       	ldi	r22, 0x05	; 5
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>

     /***********************/
	//to initialize interrupt 2
    GIE_VidEnable();        //to open global interrupt
    25f4:	0e 94 18 0a 	call	0x1430	; 0x1430 <GIE_VidEnable>

    /* 0 :  enable perpherial interrupt 0
       1 : enable perpherial interrupt 1
       2 : enable perpherial interrupt 2
     */
    PIE_VidEnable(2);       //to enable perpherial interrupt
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	0e 94 34 0a 	call	0x1468	; 0x1468 <PIE_VidEnable>
    INT_VidINIT();          //to initialize interrupt
    25fe:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <INT_VidINIT>

	//to initialize LCD
	LCD_VidInit();
    2602:	0e 94 16 0c 	call	0x182c	; 0x182c <LCD_VidInit>

	//define two pins to communicate between two lcds
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_OUT,HIGH);    // O/P
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORT_COMMUN,PIN_IN,LOW);     //  I/P
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	63 e0       	ldi	r22, 0x03	; 3
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinDirection>

	//out zero voltage
	DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,LOW);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>

	//to open CGRAM location
	LCD_VidSendCommend(0b01000000);
    2624:	80 e4       	ldi	r24, 0x40	; 64
    2626:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_VidSendCommend>

	//to make ping paddle left with ball address 0
	LCD_VidSendChar(0b00000100);
    262a:	84 e0       	ldi	r24, 0x04	; 4
    262c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001110);
    2630:	8e e0       	ldi	r24, 0x0E	; 14
    2632:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000100);
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011110);
    263c:	8e e1       	ldi	r24, 0x1E	; 30
    263e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011110);
    2642:	8e e1       	ldi	r24, 0x1E	; 30
    2644:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    2648:	8c e1       	ldi	r24, 0x1C	; 28
    264a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011010);
    264e:	8a e1       	ldi	r24, 0x1A	; 26
    2650:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000001);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>


	//to make ping paddle left address 1
	LCD_VidSendChar(0b00000000);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011110);
    266c:	8e e1       	ldi	r24, 0x1E	; 30
    266e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011110);
    2672:	8e e1       	ldi	r24, 0x1E	; 30
    2674:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    2678:	8c e1       	ldi	r24, 0x1C	; 28
    267a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011010);
    267e:	8a e1       	ldi	r24, 0x1A	; 26
    2680:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000001);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

    //to make ball down right address 2
	LCD_VidSendChar(0b00000000);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000010);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    26a8:	87 e0       	ldi	r24, 0x07	; 7
    26aa:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    26ae:	87 e0       	ldi	r24, 0x07	; 7
    26b0:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000010);
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>


    //to make ball down left address 3
	LCD_VidSendChar(0b00000000);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001000);
    26d2:	88 e0       	ldi	r24, 0x08	; 8
    26d4:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    26d8:	8c e1       	ldi	r24, 0x1C	; 28
    26da:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    26de:	8c e1       	ldi	r24, 0x1C	; 28
    26e0:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001000);
    26e4:	88 e0       	ldi	r24, 0x08	; 8
    26e6:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

    //to make ball up left address 4
	LCD_VidSendChar(0b00001000);
    26ea:	88 e0       	ldi	r24, 0x08	; 8
    26ec:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    26f0:	8c e1       	ldi	r24, 0x1C	; 28
    26f2:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00011100);
    26f6:	8c e1       	ldi	r24, 0x1C	; 28
    26f8:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00001000);
    26fc:	88 e0       	ldi	r24, 0x08	; 8
    26fe:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

    //to make ball up right address 5
	LCD_VidSendChar(0b00000010);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    2720:	87 e0       	ldi	r24, 0x07	; 7
    2722:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000111);
    2726:	87 e0       	ldi	r24, 0x07	; 7
    2728:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000010);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
	LCD_VidSendChar(0b00000000);
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

    static s8 local_col = 15 ;

	//to show left ping paddle in beginning
	LCD_VidPosCur(row_1,first_col);
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
	LCD_VidSendChar(ping_paddle_left);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

	//declare result
	u8 result = 0 ;
    2758:	fe 01       	movw	r30, r28
    275a:	e6 53       	subi	r30, 0x36	; 54
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	10 82       	st	Z, r1

	while(1)
	{
		//to check that ball saved in LCD 1 or not
		if (DIO_U8GetPinValue(PORT_COMMUN,PIN_SAVED_1)){
    2760:	83 e0       	ldi	r24, 0x03	; 3
    2762:	64 e0       	ldi	r22, 0x04	; 4
    2764:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_U8GetPinValue>
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <main+0x1b2>
    276c:	aa c1       	rjmp	.+852    	; 0x2ac2 <main+0x506>
			PIE_VidDisable(3);
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <PIE_VidDisable>
			result++;
    2774:	de 01       	movw	r26, r28
    2776:	a6 53       	subi	r26, 0x36	; 54
    2778:	bf 4f       	sbci	r27, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	e6 53       	subi	r30, 0x36	; 54
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	8c 93       	st	X, r24
			LCD_VidClear();
    2786:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_VidClear>
			//to show state wining
			for (u8 i = 0 ; i < 3 ; i++){
    278a:	fe 01       	movw	r30, r28
    278c:	e7 53       	subi	r30, 0x37	; 55
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	10 82       	st	Z, r1
    2792:	7d c1       	rjmp	.+762    	; 0x2a8e <main+0x4d2>
				LCD_VidPosCur( row_0 , 4 ) ;
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	64 e0       	ldi	r22, 0x04	; 4
    2798:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
				LCD_VidPrintVar(result);
    279c:	fe 01       	movw	r30, r28
    279e:	e6 53       	subi	r30, 0x36	; 54
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_VidPrintVar>
    27ac:	fe 01       	movw	r30, r28
    27ae:	ef 53       	subi	r30, 0x3F	; 63
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	aa ef       	ldi	r26, 0xFA	; 250
    27b8:	b3 e4       	ldi	r27, 0x43	; 67
    27ba:	80 83       	st	Z, r24
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	a2 83       	std	Z+2, r26	; 0x02
    27c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	8e 01       	movw	r16, r28
    27c4:	03 54       	subi	r16, 0x43	; 67
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	ef 53       	subi	r30, 0x3F	; 63
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a ef       	ldi	r20, 0xFA	; 250
    27dc:	54 e4       	ldi	r21, 0x44	; 68
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	f8 01       	movw	r30, r16
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f0:	fe 01       	movw	r30, r28
    27f2:	e3 54       	subi	r30, 0x43	; 67
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    280a:	88 23       	and	r24, r24
    280c:	44 f4       	brge	.+16     	; 0x281e <main+0x262>
		__ticks = 1;
    280e:	fe 01       	movw	r30, r28
    2810:	e5 54       	subi	r30, 0x45	; 69
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	64 c0       	rjmp	.+200    	; 0x28e6 <main+0x32a>
	else if (__tmp > 65535)
    281e:	fe 01       	movw	r30, r28
    2820:	e3 54       	subi	r30, 0x43	; 67
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	0c f0       	brlt	.+2      	; 0x283e <main+0x282>
    283c:	43 c0       	rjmp	.+134    	; 0x28c4 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283e:	fe 01       	movw	r30, r28
    2840:	ef 53       	subi	r30, 0x3F	; 63
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8e 01       	movw	r16, r28
    285e:	05 54       	subi	r16, 0x45	; 69
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	f8 01       	movw	r30, r16
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	80 83       	st	Z, r24
    2874:	1f c0       	rjmp	.+62     	; 0x28b4 <main+0x2f8>
    2876:	fe 01       	movw	r30, r28
    2878:	e7 54       	subi	r30, 0x47	; 71
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	88 ec       	ldi	r24, 0xC8	; 200
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2884:	fe 01       	movw	r30, r28
    2886:	e7 54       	subi	r30, 0x47	; 71
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <main+0x2d2>
    2892:	fe 01       	movw	r30, r28
    2894:	e7 54       	subi	r30, 0x47	; 71
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	de 01       	movw	r26, r28
    289e:	a5 54       	subi	r26, 0x45	; 69
    28a0:	bf 4f       	sbci	r27, 0xFF	; 255
    28a2:	fe 01       	movw	r30, r28
    28a4:	e5 54       	subi	r30, 0x45	; 69
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	11 96       	adiw	r26, 0x01	; 1
    28b0:	9c 93       	st	X, r25
    28b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	fe 01       	movw	r30, r28
    28b6:	e5 54       	subi	r30, 0x45	; 69
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	d1 f6       	brne	.-76     	; 0x2876 <main+0x2ba>
    28c2:	27 c0       	rjmp	.+78     	; 0x2912 <main+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	8e 01       	movw	r16, r28
    28c6:	05 54       	subi	r16, 0x45	; 69
    28c8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	e3 54       	subi	r30, 0x43	; 67
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	f8 01       	movw	r30, r16
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
    28e6:	de 01       	movw	r26, r28
    28e8:	a9 54       	subi	r26, 0x49	; 73
    28ea:	bf 4f       	sbci	r27, 0xFF	; 255
    28ec:	fe 01       	movw	r30, r28
    28ee:	e5 54       	subi	r30, 0x45	; 69
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	8d 93       	st	X+, r24
    28f8:	9c 93       	st	X, r25
    28fa:	fe 01       	movw	r30, r28
    28fc:	e9 54       	subi	r30, 0x49	; 73
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <main+0x348>
    2908:	fe 01       	movw	r30, r28
    290a:	e9 54       	subi	r30, 0x49	; 73
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
                _delay_ms(500);
				LCD_VidClear();
    2912:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_VidClear>
    2916:	fe 01       	movw	r30, r28
    2918:	ed 54       	subi	r30, 0x4D	; 77
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	aa ef       	ldi	r26, 0xFA	; 250
    2922:	b3 e4       	ldi	r27, 0x43	; 67
    2924:	80 83       	st	Z, r24
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	a2 83       	std	Z+2, r26	; 0x02
    292a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292c:	8e 01       	movw	r16, r28
    292e:	01 55       	subi	r16, 0x51	; 81
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
    2932:	fe 01       	movw	r30, r28
    2934:	ed 54       	subi	r30, 0x4D	; 77
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	60 81       	ld	r22, Z
    293a:	71 81       	ldd	r23, Z+1	; 0x01
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a ef       	ldi	r20, 0xFA	; 250
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	f8 01       	movw	r30, r16
    2952:	80 83       	st	Z, r24
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	a2 83       	std	Z+2, r26	; 0x02
    2958:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    295a:	fe 01       	movw	r30, r28
    295c:	e1 55       	subi	r30, 0x51	; 81
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2974:	88 23       	and	r24, r24
    2976:	44 f4       	brge	.+16     	; 0x2988 <main+0x3cc>
		__ticks = 1;
    2978:	fe 01       	movw	r30, r28
    297a:	e3 55       	subi	r30, 0x53	; 83
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
    2986:	64 c0       	rjmp	.+200    	; 0x2a50 <main+0x494>
	else if (__tmp > 65535)
    2988:	fe 01       	movw	r30, r28
    298a:	e1 55       	subi	r30, 0x51	; 81
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	0c f0       	brlt	.+2      	; 0x29a8 <main+0x3ec>
    29a6:	43 c0       	rjmp	.+134    	; 0x2a2e <main+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	fe 01       	movw	r30, r28
    29aa:	ed 54       	subi	r30, 0x4D	; 77
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	60 81       	ld	r22, Z
    29b0:	71 81       	ldd	r23, Z+1	; 0x01
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8e 01       	movw	r16, r28
    29c8:	03 55       	subi	r16, 0x53	; 83
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	f8 01       	movw	r30, r16
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	1f c0       	rjmp	.+62     	; 0x2a1e <main+0x462>
    29e0:	fe 01       	movw	r30, r28
    29e2:	e5 55       	subi	r30, 0x55	; 85
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	80 83       	st	Z, r24
    29ee:	fe 01       	movw	r30, r28
    29f0:	e5 55       	subi	r30, 0x55	; 85
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <main+0x43c>
    29fc:	fe 01       	movw	r30, r28
    29fe:	e5 55       	subi	r30, 0x55	; 85
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	de 01       	movw	r26, r28
    2a08:	a3 55       	subi	r26, 0x53	; 83
    2a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e3 55       	subi	r30, 0x53	; 83
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	11 96       	adiw	r26, 0x01	; 1
    2a1a:	9c 93       	st	X, r25
    2a1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e3 55       	subi	r30, 0x53	; 83
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	d1 f6       	brne	.-76     	; 0x29e0 <main+0x424>
    2a2c:	27 c0       	rjmp	.+78     	; 0x2a7c <main+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	8e 01       	movw	r16, r28
    2a30:	03 55       	subi	r16, 0x53	; 83
    2a32:	1f 4f       	sbci	r17, 0xFF	; 255
    2a34:	fe 01       	movw	r30, r28
    2a36:	e1 55       	subi	r30, 0x51	; 81
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	93 81       	ldd	r25, Z+3	; 0x03
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	80 83       	st	Z, r24
    2a50:	de 01       	movw	r26, r28
    2a52:	a7 55       	subi	r26, 0x57	; 87
    2a54:	bf 4f       	sbci	r27, 0xFF	; 255
    2a56:	fe 01       	movw	r30, r28
    2a58:	e3 55       	subi	r30, 0x53	; 83
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	8d 93       	st	X+, r24
    2a62:	9c 93       	st	X, r25
    2a64:	fe 01       	movw	r30, r28
    2a66:	e7 55       	subi	r30, 0x57	; 87
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <main+0x4b2>
    2a72:	fe 01       	movw	r30, r28
    2a74:	e7 55       	subi	r30, 0x57	; 87
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
		if (DIO_U8GetPinValue(PORT_COMMUN,PIN_SAVED_1)){
			PIE_VidDisable(3);
			result++;
			LCD_VidClear();
			//to show state wining
			for (u8 i = 0 ; i < 3 ; i++){
    2a7c:	de 01       	movw	r26, r28
    2a7e:	a7 53       	subi	r26, 0x37	; 55
    2a80:	bf 4f       	sbci	r27, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	e7 53       	subi	r30, 0x37	; 55
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	8c 93       	st	X, r24
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e7 53       	subi	r30, 0x37	; 55
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	83 30       	cpi	r24, 0x03	; 3
    2a98:	08 f4       	brcc	.+2      	; 0x2a9c <main+0x4e0>
    2a9a:	7c ce       	rjmp	.-776    	; 0x2794 <main+0x1d8>
                _delay_ms(500);
				LCD_VidClear();
				_delay_ms(500);
	          }//end for loop
			//to show right ping paddle in beginning
			LCD_VidPosCur((Global_row+1)%2,first_col);
    2a9c:	80 91 6a 00 	lds	r24, 0x006A
    2aa0:	90 91 6b 00 	lds	r25, 0x006B
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	22 e0       	ldi	r18, 0x02	; 2
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	b9 01       	movw	r22, r18
    2aac:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divmodhi4>
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(ping_paddle_left);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
			PIE_VidEnable(3);
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	0e 94 34 0a 	call	0x1468	; 0x1468 <PIE_VidEnable>
		}//end if

		//to display on second LCD
		if (DIO_U8GetPinValue(PORT_COMMUN,PIN_IN)){
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	63 e0       	ldi	r22, 0x03	; 3
    2ac6:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_U8GetPinValue>
    2aca:	88 23       	and	r24, r24
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <main+0x514>
    2ace:	48 ce       	rjmp	.-880    	; 0x2760 <main+0x1a4>
    2ad0:	d0 c0       	rjmp	.+416    	; 0x2c72 <main+0x6b6>

			//to make ball fly up
			while (local_col <= 15 && local_col >= 5){

			//to show  ball up
			LCD_VidPosCur(row_0,local_col);
    2ad2:	80 91 68 00 	lds	r24, 0x0068
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	69 2f       	mov	r22, r25
    2adc:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    2ae0:	84 e0       	ldi	r24, 0x04	; 4
    2ae2:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	eb 55       	subi	r30, 0x5B	; 91
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a8 ec       	ldi	r26, 0xC8	; 200
    2af2:	b2 e4       	ldi	r27, 0x42	; 66
    2af4:	80 83       	st	Z, r24
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	a2 83       	std	Z+2, r26	; 0x02
    2afa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	8e 01       	movw	r16, r28
    2afe:	0f 55       	subi	r16, 0x5F	; 95
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	eb 55       	subi	r30, 0x5B	; 91
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a ef       	ldi	r20, 0xFA	; 250
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	f8 01       	movw	r30, r16
    2b22:	80 83       	st	Z, r24
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	a2 83       	std	Z+2, r26	; 0x02
    2b28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ef 55       	subi	r30, 0x5F	; 95
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e8       	ldi	r20, 0x80	; 128
    2b3e:	5f e3       	ldi	r21, 0x3F	; 63
    2b40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b44:	88 23       	and	r24, r24
    2b46:	44 f4       	brge	.+16     	; 0x2b58 <main+0x59c>
		__ticks = 1;
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e1 56       	subi	r30, 0x61	; 97
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	80 83       	st	Z, r24
    2b56:	64 c0       	rjmp	.+200    	; 0x2c20 <main+0x664>
	else if (__tmp > 65535)
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ef 55       	subi	r30, 0x5F	; 95
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <main+0x5bc>
    2b76:	43 c0       	rjmp	.+134    	; 0x2bfe <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	fe 01       	movw	r30, r28
    2b7a:	eb 55       	subi	r30, 0x5B	; 91
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e2       	ldi	r20, 0x20	; 32
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8e 01       	movw	r16, r28
    2b98:	01 56       	subi	r16, 0x61	; 97
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	f8 01       	movw	r30, r16
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	1f c0       	rjmp	.+62     	; 0x2bee <main+0x632>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e3 56       	subi	r30, 0x63	; 99
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	88 ec       	ldi	r24, 0xC8	; 200
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e3 56       	subi	r30, 0x63	; 99
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <main+0x60c>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e3 56       	subi	r30, 0x63	; 99
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd6:	de 01       	movw	r26, r28
    2bd8:	a1 56       	subi	r26, 0x61	; 97
    2bda:	bf 4f       	sbci	r27, 0xFF	; 255
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e1 56       	subi	r30, 0x61	; 97
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	11 96       	adiw	r26, 0x01	; 1
    2bea:	9c 93       	st	X, r25
    2bec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e1 56       	subi	r30, 0x61	; 97
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	d1 f6       	brne	.-76     	; 0x2bb0 <main+0x5f4>
    2bfc:	27 c0       	rjmp	.+78     	; 0x2c4c <main+0x690>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	8e 01       	movw	r16, r28
    2c00:	01 56       	subi	r16, 0x61	; 97
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	ef 55       	subi	r30, 0x5F	; 95
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
    2c20:	de 01       	movw	r26, r28
    2c22:	a5 56       	subi	r26, 0x65	; 101
    2c24:	bf 4f       	sbci	r27, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	e1 56       	subi	r30, 0x61	; 97
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	8d 93       	st	X+, r24
    2c32:	9c 93       	st	X, r25
    2c34:	fe 01       	movw	r30, r28
    2c36:	e5 56       	subi	r30, 0x65	; 101
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <main+0x682>
    2c42:	fe 01       	movw	r30, r28
    2c44:	e5 56       	subi	r30, 0x65	; 101
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	80 83       	st	Z, r24
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(row_0,local_col);
    2c4c:	80 91 68 00 	lds	r24, 0x0068
    2c50:	98 2f       	mov	r25, r24
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	69 2f       	mov	r22, r25
    2c56:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    2c5a:	80 e2       	ldi	r24, 0x20	; 32
    2c5c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
			if (local_col == 5){
    2c60:	80 91 68 00 	lds	r24, 0x0068
    2c64:	85 30       	cpi	r24, 0x05	; 5
    2c66:	71 f0       	breq	.+28     	; 0x2c84 <main+0x6c8>
			      break ;
			}//end if
			else {
			      local_col-- ;
    2c68:	80 91 68 00 	lds	r24, 0x0068
    2c6c:	81 50       	subi	r24, 0x01	; 1
    2c6e:	80 93 68 00 	sts	0x0068, r24

		//to display on second LCD
		if (DIO_U8GetPinValue(PORT_COMMUN,PIN_IN)){

			//to make ball fly up
			while (local_col <= 15 && local_col >= 5){
    2c72:	80 91 68 00 	lds	r24, 0x0068
    2c76:	80 31       	cpi	r24, 0x10	; 16
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <main+0x6c8>
    2c7a:	80 91 68 00 	lds	r24, 0x0068
    2c7e:	85 30       	cpi	r24, 0x05	; 5
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <main+0x6c8>
    2c82:	27 cf       	rjmp	.-434    	; 0x2ad2 <main+0x516>
		    }//end while

			 //to make ball drop from up to down

			 //to show  ball down right
			  LCD_VidPosCur(row_0,local_col);
    2c84:	80 91 68 00 	lds	r24, 0x0068
    2c88:	98 2f       	mov	r25, r24
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	69 2f       	mov	r22, r25
    2c8e:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
		      LCD_VidSendChar(ball_down_left);
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e9 56       	subi	r30, 0x69	; 105
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a8 ec       	ldi	r26, 0xC8	; 200
    2ca4:	b2 e4       	ldi	r27, 0x42	; 66
    2ca6:	80 83       	st	Z, r24
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	a2 83       	std	Z+2, r26	; 0x02
    2cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	8e 01       	movw	r16, r28
    2cb0:	0d 56       	subi	r16, 0x6D	; 109
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e9 56       	subi	r30, 0x69	; 105
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a ef       	ldi	r20, 0xFA	; 250
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ed 56       	subi	r30, 0x6D	; 109
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	60 81       	ld	r22, Z
    2ce4:	71 81       	ldd	r23, Z+1	; 0x01
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	93 81       	ldd	r25, Z+3	; 0x03
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	44 f4       	brge	.+16     	; 0x2d0a <main+0x74e>
		__ticks = 1;
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ef 56       	subi	r30, 0x6F	; 111
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	64 c0       	rjmp	.+200    	; 0x2dd2 <main+0x816>
	else if (__tmp > 65535)
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ed 56       	subi	r30, 0x6D	; 109
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	4f e7       	ldi	r20, 0x7F	; 127
    2d1e:	57 e4       	ldi	r21, 0x47	; 71
    2d20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d24:	18 16       	cp	r1, r24
    2d26:	0c f0       	brlt	.+2      	; 0x2d2a <main+0x76e>
    2d28:	43 c0       	rjmp	.+134    	; 0x2db0 <main+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e9 56       	subi	r30, 0x69	; 105
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8e 01       	movw	r16, r28
    2d4a:	0f 56       	subi	r16, 0x6F	; 111
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
    2d60:	1f c0       	rjmp	.+62     	; 0x2da0 <main+0x7e4>
    2d62:	fe 01       	movw	r30, r28
    2d64:	e1 57       	subi	r30, 0x71	; 113
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
    2d70:	fe 01       	movw	r30, r28
    2d72:	e1 57       	subi	r30, 0x71	; 113
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x7be>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e1 57       	subi	r30, 0x71	; 113
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	de 01       	movw	r26, r28
    2d8a:	af 56       	subi	r26, 0x6F	; 111
    2d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 56       	subi	r30, 0x6F	; 111
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	11 96       	adiw	r26, 0x01	; 1
    2d9c:	9c 93       	st	X, r25
    2d9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	fe 01       	movw	r30, r28
    2da2:	ef 56       	subi	r30, 0x6F	; 111
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	d1 f6       	brne	.-76     	; 0x2d62 <main+0x7a6>
    2dae:	27 c0       	rjmp	.+78     	; 0x2dfe <main+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	8e 01       	movw	r16, r28
    2db2:	0f 56       	subi	r16, 0x6F	; 111
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	fe 01       	movw	r30, r28
    2db8:	ed 56       	subi	r30, 0x6D	; 109
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	f8 01       	movw	r30, r16
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
    2dd2:	de 01       	movw	r26, r28
    2dd4:	a3 57       	subi	r26, 0x73	; 115
    2dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ef 56       	subi	r30, 0x6F	; 111
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	8d 93       	st	X+, r24
    2de4:	9c 93       	st	X, r25
    2de6:	fe 01       	movw	r30, r28
    2de8:	e3 57       	subi	r30, 0x73	; 115
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <main+0x834>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e3 57       	subi	r30, 0x73	; 115
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
			 _delay_ms(100);

			 //to clear cell
			  LCD_VidPosCur(row_0,local_col);
    2dfe:	80 91 68 00 	lds	r24, 0x0068
    2e02:	98 2f       	mov	r25, r24
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	69 2f       	mov	r22, r25
    2e08:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			  LCD_VidSendChar(' ');
    2e0c:	80 e2       	ldi	r24, 0x20	; 32
    2e0e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

			  local_col-- ;
    2e12:	80 91 68 00 	lds	r24, 0x0068
    2e16:	81 50       	subi	r24, 0x01	; 1
    2e18:	80 93 68 00 	sts	0x0068, r24

			  //to make simulation of dropping

			   //to show  ball down left
			   LCD_VidPosCur(row_1,local_col);
    2e1c:	80 91 68 00 	lds	r24, 0x0068
    2e20:	98 2f       	mov	r25, r24
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	69 2f       	mov	r22, r25
    2e26:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			   LCD_VidSendChar(ball_down_right);
    2e2a:	82 e0       	ldi	r24, 0x02	; 2
    2e2c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    2e30:	fe 01       	movw	r30, r28
    2e32:	e7 57       	subi	r30, 0x77	; 119
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a8 ec       	ldi	r26, 0xC8	; 200
    2e3c:	b2 e4       	ldi	r27, 0x42	; 66
    2e3e:	80 83       	st	Z, r24
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	a2 83       	std	Z+2, r26	; 0x02
    2e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	8e 01       	movw	r16, r28
    2e48:	0b 57       	subi	r16, 0x7B	; 123
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e7 57       	subi	r30, 0x77	; 119
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a ef       	ldi	r20, 0xFA	; 250
    2e60:	54 e4       	ldi	r21, 0x44	; 68
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	80 83       	st	Z, r24
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	a2 83       	std	Z+2, r26	; 0x02
    2e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e74:	fe 01       	movw	r30, r28
    2e76:	eb 57       	subi	r30, 0x7B	; 123
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	44 f4       	brge	.+16     	; 0x2ea2 <main+0x8e6>
		__ticks = 1;
    2e92:	fe 01       	movw	r30, r28
    2e94:	ed 57       	subi	r30, 0x7D	; 125
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	64 c0       	rjmp	.+200    	; 0x2f6a <main+0x9ae>
	else if (__tmp > 65535)
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	eb 57       	subi	r30, 0x7B	; 123
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	0c f0       	brlt	.+2      	; 0x2ec2 <main+0x906>
    2ec0:	43 c0       	rjmp	.+134    	; 0x2f48 <main+0x98c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e7 57       	subi	r30, 0x77	; 119
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e2       	ldi	r20, 0x20	; 32
    2ed6:	51 e4       	ldi	r21, 0x41	; 65
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	0d 57       	subi	r16, 0x7D	; 125
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	1f c0       	rjmp	.+62     	; 0x2f38 <main+0x97c>
    2efa:	fe 01       	movw	r30, r28
    2efc:	ef 57       	subi	r30, 0x7F	; 127
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ef 57       	subi	r30, 0x7F	; 127
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <main+0x956>
    2f16:	fe 01       	movw	r30, r28
    2f18:	ef 57       	subi	r30, 0x7F	; 127
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f20:	de 01       	movw	r26, r28
    2f22:	ad 57       	subi	r26, 0x7D	; 125
    2f24:	bf 4f       	sbci	r27, 0xFF	; 255
    2f26:	fe 01       	movw	r30, r28
    2f28:	ed 57       	subi	r30, 0x7D	; 125
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	9c 93       	st	X, r25
    2f36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f38:	fe 01       	movw	r30, r28
    2f3a:	ed 57       	subi	r30, 0x7D	; 125
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	d1 f6       	brne	.-76     	; 0x2efa <main+0x93e>
    2f46:	27 c0       	rjmp	.+78     	; 0x2f96 <main+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f48:	8e 01       	movw	r16, r28
    2f4a:	0d 57       	subi	r16, 0x7D	; 125
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	fe 01       	movw	r30, r28
    2f50:	eb 57       	subi	r30, 0x7B	; 123
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	de 01       	movw	r26, r28
    2f6c:	a1 58       	subi	r26, 0x81	; 129
    2f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	ed 57       	subi	r30, 0x7D	; 125
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	8d 93       	st	X+, r24
    2f7c:	9c 93       	st	X, r25
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e1 58       	subi	r30, 0x81	; 129
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <main+0x9cc>
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e1 58       	subi	r30, 0x81	; 129
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
			   _delay_ms(100);

			   //to clear cell
			   LCD_VidPosCur(row_1,local_col);
    2f96:	80 91 68 00 	lds	r24, 0x0068
    2f9a:	98 2f       	mov	r25, r24
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	69 2f       	mov	r22, r25
    2fa0:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			   LCD_VidSendChar(' ');
    2fa4:	80 e2       	ldi	r24, 0x20	; 32
    2fa6:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

			    local_col-- ;
    2faa:	80 91 68 00 	lds	r24, 0x0068
    2fae:	81 50       	subi	r24, 0x01	; 1
    2fb0:	80 93 68 00 	sts	0x0068, r24

			   //to show ball up left
			   LCD_VidPosCur(row_1,local_col);
    2fb4:	80 91 68 00 	lds	r24, 0x0068
    2fb8:	98 2f       	mov	r25, r24
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	69 2f       	mov	r22, r25
    2fbe:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			   LCD_VidSendChar(ball_up_left);
    2fc2:	84 e0       	ldi	r24, 0x04	; 4
    2fc4:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e5 58       	subi	r30, 0x85	; 133
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a8 ec       	ldi	r26, 0xC8	; 200
    2fd4:	b2 e4       	ldi	r27, 0x42	; 66
    2fd6:	80 83       	st	Z, r24
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	a2 83       	std	Z+2, r26	; 0x02
    2fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	8e 01       	movw	r16, r28
    2fe0:	09 58       	subi	r16, 0x89	; 137
    2fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e5 58       	subi	r30, 0x85	; 133
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	4a ef       	ldi	r20, 0xFA	; 250
    2ff8:	54 e4       	ldi	r21, 0x44	; 68
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	f8 01       	movw	r30, r16
    3004:	80 83       	st	Z, r24
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	a2 83       	std	Z+2, r26	; 0x02
    300a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    300c:	fe 01       	movw	r30, r28
    300e:	e9 58       	subi	r30, 0x89	; 137
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	44 f4       	brge	.+16     	; 0x303a <main+0xa7e>
		__ticks = 1;
    302a:	fe 01       	movw	r30, r28
    302c:	eb 58       	subi	r30, 0x8B	; 139
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
    3038:	64 c0       	rjmp	.+200    	; 0x3102 <main+0xb46>
	else if (__tmp > 65535)
    303a:	fe 01       	movw	r30, r28
    303c:	e9 58       	subi	r30, 0x89	; 137
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	3f ef       	ldi	r19, 0xFF	; 255
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	57 e4       	ldi	r21, 0x47	; 71
    3050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3054:	18 16       	cp	r1, r24
    3056:	0c f0       	brlt	.+2      	; 0x305a <main+0xa9e>
    3058:	43 c0       	rjmp	.+134    	; 0x30e0 <main+0xb24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	fe 01       	movw	r30, r28
    305c:	e5 58       	subi	r30, 0x85	; 133
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	60 81       	ld	r22, Z
    3062:	71 81       	ldd	r23, Z+1	; 0x01
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8e 01       	movw	r16, r28
    307a:	0b 58       	subi	r16, 0x8B	; 139
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	f8 01       	movw	r30, r16
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
    3090:	1f c0       	rjmp	.+62     	; 0x30d0 <main+0xb14>
    3092:	fe 01       	movw	r30, r28
    3094:	ed 58       	subi	r30, 0x8D	; 141
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	88 ec       	ldi	r24, 0xC8	; 200
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	80 83       	st	Z, r24
    30a0:	fe 01       	movw	r30, r28
    30a2:	ed 58       	subi	r30, 0x8D	; 141
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <main+0xaee>
    30ae:	fe 01       	movw	r30, r28
    30b0:	ed 58       	subi	r30, 0x8D	; 141
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b8:	de 01       	movw	r26, r28
    30ba:	ab 58       	subi	r26, 0x8B	; 139
    30bc:	bf 4f       	sbci	r27, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	eb 58       	subi	r30, 0x8B	; 139
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	11 96       	adiw	r26, 0x01	; 1
    30cc:	9c 93       	st	X, r25
    30ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d0:	fe 01       	movw	r30, r28
    30d2:	eb 58       	subi	r30, 0x8B	; 139
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	d1 f6       	brne	.-76     	; 0x3092 <main+0xad6>
    30de:	27 c0       	rjmp	.+78     	; 0x312e <main+0xb72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e0:	8e 01       	movw	r16, r28
    30e2:	0b 58       	subi	r16, 0x8B	; 139
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	fe 01       	movw	r30, r28
    30e8:	e9 58       	subi	r30, 0x89	; 137
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	f8 01       	movw	r30, r16
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	80 83       	st	Z, r24
    3102:	de 01       	movw	r26, r28
    3104:	af 58       	subi	r26, 0x8F	; 143
    3106:	bf 4f       	sbci	r27, 0xFF	; 255
    3108:	fe 01       	movw	r30, r28
    310a:	eb 58       	subi	r30, 0x8B	; 139
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	8d 93       	st	X+, r24
    3114:	9c 93       	st	X, r25
    3116:	fe 01       	movw	r30, r28
    3118:	ef 58       	subi	r30, 0x8F	; 143
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <main+0xb64>
    3124:	fe 01       	movw	r30, r28
    3126:	ef 58       	subi	r30, 0x8F	; 143
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
			   _delay_ms(100);

			   //to clear cell
			   LCD_VidPosCur(row_1,local_col);
    312e:	80 91 68 00 	lds	r24, 0x0068
    3132:	98 2f       	mov	r25, r24
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	69 2f       	mov	r22, r25
    3138:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			   LCD_VidSendChar(' ');
    313c:	80 e2       	ldi	r24, 0x20	; 32
    313e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

			    local_col-- ;
    3142:	80 91 68 00 	lds	r24, 0x0068
    3146:	81 50       	subi	r24, 0x01	; 1
    3148:	80 93 68 00 	sts	0x0068, r24

		//to show fly down
		for(u8 i = 0 ; i < 1 ; i++){
    314c:	fe 01       	movw	r30, r28
    314e:	e8 53       	subi	r30, 0x38	; 56
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	10 82       	st	Z, r1
    3154:	d5 c0       	rjmp	.+426    	; 0x3300 <main+0xd44>
		    //to show  ball up
			LCD_VidPosCur(row_1,local_col);
    3156:	80 91 68 00 	lds	r24, 0x0068
    315a:	98 2f       	mov	r25, r24
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	69 2f       	mov	r22, r25
    3160:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    3164:	84 e0       	ldi	r24, 0x04	; 4
    3166:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    316a:	fe 01       	movw	r30, r28
    316c:	e3 59       	subi	r30, 0x93	; 147
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	a8 ec       	ldi	r26, 0xC8	; 200
    3176:	b2 e4       	ldi	r27, 0x42	; 66
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3180:	8e 01       	movw	r16, r28
    3182:	07 59       	subi	r16, 0x97	; 151
    3184:	1f 4f       	sbci	r17, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	e3 59       	subi	r30, 0x93	; 147
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ef       	ldi	r20, 0xFA	; 250
    319a:	54 e4       	ldi	r21, 0x44	; 68
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	f8 01       	movw	r30, r16
    31a6:	80 83       	st	Z, r24
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	a2 83       	std	Z+2, r26	; 0x02
    31ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ae:	fe 01       	movw	r30, r28
    31b0:	e7 59       	subi	r30, 0x97	; 151
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	44 f4       	brge	.+16     	; 0x31dc <main+0xc20>
		__ticks = 1;
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 59       	subi	r30, 0x99	; 153
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	64 c0       	rjmp	.+200    	; 0x32a4 <main+0xce8>
	else if (__tmp > 65535)
    31dc:	fe 01       	movw	r30, r28
    31de:	e7 59       	subi	r30, 0x97	; 151
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <main+0xc40>
    31fa:	43 c0       	rjmp	.+134    	; 0x3282 <main+0xcc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	fe 01       	movw	r30, r28
    31fe:	e3 59       	subi	r30, 0x93	; 147
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8e 01       	movw	r16, r28
    321c:	09 59       	subi	r16, 0x99	; 153
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	f8 01       	movw	r30, r16
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	80 83       	st	Z, r24
    3232:	1f c0       	rjmp	.+62     	; 0x3272 <main+0xcb6>
    3234:	fe 01       	movw	r30, r28
    3236:	eb 59       	subi	r30, 0x9B	; 155
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	80 83       	st	Z, r24
    3242:	fe 01       	movw	r30, r28
    3244:	eb 59       	subi	r30, 0x9B	; 155
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <main+0xc90>
    3250:	fe 01       	movw	r30, r28
    3252:	eb 59       	subi	r30, 0x9B	; 155
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	de 01       	movw	r26, r28
    325c:	a9 59       	subi	r26, 0x99	; 153
    325e:	bf 4f       	sbci	r27, 0xFF	; 255
    3260:	fe 01       	movw	r30, r28
    3262:	e9 59       	subi	r30, 0x99	; 153
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	11 96       	adiw	r26, 0x01	; 1
    326e:	9c 93       	st	X, r25
    3270:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3272:	fe 01       	movw	r30, r28
    3274:	e9 59       	subi	r30, 0x99	; 153
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	d1 f6       	brne	.-76     	; 0x3234 <main+0xc78>
    3280:	27 c0       	rjmp	.+78     	; 0x32d0 <main+0xd14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	8e 01       	movw	r16, r28
    3284:	09 59       	subi	r16, 0x99	; 153
    3286:	1f 4f       	sbci	r17, 0xFF	; 255
    3288:	fe 01       	movw	r30, r28
    328a:	e7 59       	subi	r30, 0x97	; 151
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	60 81       	ld	r22, Z
    3290:	71 81       	ldd	r23, Z+1	; 0x01
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	de 01       	movw	r26, r28
    32a6:	ad 59       	subi	r26, 0x9D	; 157
    32a8:	bf 4f       	sbci	r27, 0xFF	; 255
    32aa:	fe 01       	movw	r30, r28
    32ac:	e9 59       	subi	r30, 0x99	; 153
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	8d 93       	st	X+, r24
    32b6:	9c 93       	st	X, r25
    32b8:	fe 01       	movw	r30, r28
    32ba:	ed 59       	subi	r30, 0x9D	; 157
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	80 81       	ld	r24, Z
    32c0:	91 81       	ldd	r25, Z+1	; 0x01
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <main+0xd06>
    32c6:	fe 01       	movw	r30, r28
    32c8:	ed 59       	subi	r30, 0x9D	; 157
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	80 83       	st	Z, r24
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(row_1,local_col);
    32d0:	80 91 68 00 	lds	r24, 0x0068
    32d4:	98 2f       	mov	r25, r24
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	69 2f       	mov	r22, r25
    32da:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    32de:	80 e2       	ldi	r24, 0x20	; 32
    32e0:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

			local_col--;
    32e4:	80 91 68 00 	lds	r24, 0x0068
    32e8:	81 50       	subi	r24, 0x01	; 1
    32ea:	80 93 68 00 	sts	0x0068, r24
			   LCD_VidSendChar(' ');

			    local_col-- ;

		//to show fly down
		for(u8 i = 0 ; i < 1 ; i++){
    32ee:	de 01       	movw	r26, r28
    32f0:	a8 53       	subi	r26, 0x38	; 56
    32f2:	bf 4f       	sbci	r27, 0xFF	; 255
    32f4:	fe 01       	movw	r30, r28
    32f6:	e8 53       	subi	r30, 0x38	; 56
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 81       	ld	r24, Z
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	8c 93       	st	X, r24
    3300:	fe 01       	movw	r30, r28
    3302:	e8 53       	subi	r30, 0x38	; 56
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 81       	ld	r24, Z
    3308:	88 23       	and	r24, r24
    330a:	09 f4       	brne	.+2      	; 0x330e <main+0xd52>
    330c:	24 cf       	rjmp	.-440    	; 0x3156 <main+0xb9a>

			local_col--;
			}//end for

		 //to check that the paddle save ball in LCD 2
		  if ( (Global_row+1)%2 != 1 ){
    330e:	80 91 6a 00 	lds	r24, 0x006A
    3312:	90 91 6b 00 	lds	r25, 0x006B
    3316:	01 96       	adiw	r24, 0x01	; 1
    3318:	22 e0       	ldi	r18, 0x02	; 2
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	b9 01       	movw	r22, r18
    331e:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divmodhi4>
    3322:	81 30       	cpi	r24, 0x01	; 1
    3324:	91 05       	cpc	r25, r1
    3326:	09 f4       	brne	.+2      	; 0x332a <main+0xd6e>
    3328:	ab c1       	rjmp	.+854    	; 0x3680 <main+0x10c4>
			  PIE_VidEnable(3);
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	0e 94 34 0a 	call	0x1468	; 0x1468 <PIE_VidEnable>
				LCD_VidClear();
    3330:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_VidClear>
				DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_2,HIGH);
    3334:	83 e0       	ldi	r24, 0x03	; 3
    3336:	65 e0       	ldi	r22, 0x05	; 5
    3338:	41 e0       	ldi	r20, 0x01	; 1
    333a:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
				//to show state wining
				for (u8 i = 0 ; i < 3 ; i++){
    333e:	fe 01       	movw	r30, r28
    3340:	e9 53       	subi	r30, 0x39	; 57
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	10 82       	st	Z, r1
    3346:	7d c1       	rjmp	.+762    	; 0x3642 <main+0x1086>
					LCD_VidPosCur( row_0 , 4 ) ;
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	64 e0       	ldi	r22, 0x04	; 4
    334c:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
					LCD_VidPrintVar(result);
    3350:	fe 01       	movw	r30, r28
    3352:	e6 53       	subi	r30, 0x36	; 54
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	88 2f       	mov	r24, r24
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_VidPrintVar>
    3360:	fe 01       	movw	r30, r28
    3362:	e1 5a       	subi	r30, 0xA1	; 161
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	aa ef       	ldi	r26, 0xFA	; 250
    336c:	b3 e4       	ldi	r27, 0x43	; 67
    336e:	80 83       	st	Z, r24
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	a2 83       	std	Z+2, r26	; 0x02
    3374:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	8e 01       	movw	r16, r28
    3378:	05 5a       	subi	r16, 0xA5	; 165
    337a:	1f 4f       	sbci	r17, 0xFF	; 255
    337c:	fe 01       	movw	r30, r28
    337e:	e1 5a       	subi	r30, 0xA1	; 161
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	80 83       	st	Z, r24
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	a2 83       	std	Z+2, r26	; 0x02
    33a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a4:	fe 01       	movw	r30, r28
    33a6:	e5 5a       	subi	r30, 0xA5	; 165
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	44 f4       	brge	.+16     	; 0x33d2 <main+0xe16>
		__ticks = 1;
    33c2:	fe 01       	movw	r30, r28
    33c4:	e7 5a       	subi	r30, 0xA7	; 167
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	80 83       	st	Z, r24
    33d0:	64 c0       	rjmp	.+200    	; 0x349a <main+0xede>
	else if (__tmp > 65535)
    33d2:	fe 01       	movw	r30, r28
    33d4:	e5 5a       	subi	r30, 0xA5	; 165
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	0c f0       	brlt	.+2      	; 0x33f2 <main+0xe36>
    33f0:	43 c0       	rjmp	.+134    	; 0x3478 <main+0xebc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f2:	fe 01       	movw	r30, r28
    33f4:	e1 5a       	subi	r30, 0xA1	; 161
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e2       	ldi	r20, 0x20	; 32
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	8e 01       	movw	r16, r28
    3412:	07 5a       	subi	r16, 0xA7	; 167
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	f8 01       	movw	r30, r16
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	80 83       	st	Z, r24
    3428:	1f c0       	rjmp	.+62     	; 0x3468 <main+0xeac>
    342a:	fe 01       	movw	r30, r28
    342c:	e9 5a       	subi	r30, 0xA9	; 169
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	88 ec       	ldi	r24, 0xC8	; 200
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	fe 01       	movw	r30, r28
    343a:	e9 5a       	subi	r30, 0xA9	; 169
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 81       	ld	r24, Z
    3440:	91 81       	ldd	r25, Z+1	; 0x01
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <main+0xe86>
    3446:	fe 01       	movw	r30, r28
    3448:	e9 5a       	subi	r30, 0xA9	; 169
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3450:	de 01       	movw	r26, r28
    3452:	a7 5a       	subi	r26, 0xA7	; 167
    3454:	bf 4f       	sbci	r27, 0xFF	; 255
    3456:	fe 01       	movw	r30, r28
    3458:	e7 5a       	subi	r30, 0xA7	; 167
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	9c 93       	st	X, r25
    3466:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3468:	fe 01       	movw	r30, r28
    346a:	e7 5a       	subi	r30, 0xA7	; 167
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 81       	ld	r24, Z
    3470:	91 81       	ldd	r25, Z+1	; 0x01
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	d1 f6       	brne	.-76     	; 0x342a <main+0xe6e>
    3476:	27 c0       	rjmp	.+78     	; 0x34c6 <main+0xf0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	8e 01       	movw	r16, r28
    347a:	07 5a       	subi	r16, 0xA7	; 167
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	fe 01       	movw	r30, r28
    3480:	e5 5a       	subi	r30, 0xA5	; 165
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	60 81       	ld	r22, Z
    3486:	71 81       	ldd	r23, Z+1	; 0x01
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	93 81       	ldd	r25, Z+3	; 0x03
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	f8 01       	movw	r30, r16
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	80 83       	st	Z, r24
    349a:	de 01       	movw	r26, r28
    349c:	ab 5a       	subi	r26, 0xAB	; 171
    349e:	bf 4f       	sbci	r27, 0xFF	; 255
    34a0:	fe 01       	movw	r30, r28
    34a2:	e7 5a       	subi	r30, 0xA7	; 167
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 81       	ld	r24, Z
    34a8:	91 81       	ldd	r25, Z+1	; 0x01
    34aa:	8d 93       	st	X+, r24
    34ac:	9c 93       	st	X, r25
    34ae:	fe 01       	movw	r30, r28
    34b0:	eb 5a       	subi	r30, 0xAB	; 171
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	91 81       	ldd	r25, Z+1	; 0x01
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <main+0xefc>
    34bc:	fe 01       	movw	r30, r28
    34be:	eb 5a       	subi	r30, 0xAB	; 171
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_VidClear();
    34c6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_VidClear>
    34ca:	fe 01       	movw	r30, r28
    34cc:	ef 5a       	subi	r30, 0xAF	; 175
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	aa ef       	ldi	r26, 0xFA	; 250
    34d6:	b3 e4       	ldi	r27, 0x43	; 67
    34d8:	80 83       	st	Z, r24
    34da:	91 83       	std	Z+1, r25	; 0x01
    34dc:	a2 83       	std	Z+2, r26	; 0x02
    34de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e0:	8e 01       	movw	r16, r28
    34e2:	03 5b       	subi	r16, 0xB3	; 179
    34e4:	1f 4f       	sbci	r17, 0xFF	; 255
    34e6:	fe 01       	movw	r30, r28
    34e8:	ef 5a       	subi	r30, 0xAF	; 175
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	4a ef       	ldi	r20, 0xFA	; 250
    34fa:	54 e4       	ldi	r21, 0x44	; 68
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	f8 01       	movw	r30, r16
    3506:	80 83       	st	Z, r24
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	a2 83       	std	Z+2, r26	; 0x02
    350c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    350e:	fe 01       	movw	r30, r28
    3510:	e3 5b       	subi	r30, 0xB3	; 179
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	60 81       	ld	r22, Z
    3516:	71 81       	ldd	r23, Z+1	; 0x01
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e8       	ldi	r20, 0x80	; 128
    3522:	5f e3       	ldi	r21, 0x3F	; 63
    3524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3528:	88 23       	and	r24, r24
    352a:	44 f4       	brge	.+16     	; 0x353c <main+0xf80>
		__ticks = 1;
    352c:	fe 01       	movw	r30, r28
    352e:	e5 5b       	subi	r30, 0xB5	; 181
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
    353a:	64 c0       	rjmp	.+200    	; 0x3604 <main+0x1048>
	else if (__tmp > 65535)
    353c:	fe 01       	movw	r30, r28
    353e:	e3 5b       	subi	r30, 0xB3	; 179
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	3f ef       	ldi	r19, 0xFF	; 255
    354e:	4f e7       	ldi	r20, 0x7F	; 127
    3550:	57 e4       	ldi	r21, 0x47	; 71
    3552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3556:	18 16       	cp	r1, r24
    3558:	0c f0       	brlt	.+2      	; 0x355c <main+0xfa0>
    355a:	43 c0       	rjmp	.+134    	; 0x35e2 <main+0x1026>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355c:	fe 01       	movw	r30, r28
    355e:	ef 5a       	subi	r30, 0xAF	; 175
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	60 81       	ld	r22, Z
    3564:	71 81       	ldd	r23, Z+1	; 0x01
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	8e 01       	movw	r16, r28
    357c:	05 5b       	subi	r16, 0xB5	; 181
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	f8 01       	movw	r30, r16
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	1f c0       	rjmp	.+62     	; 0x35d2 <main+0x1016>
    3594:	fe 01       	movw	r30, r28
    3596:	e7 5b       	subi	r30, 0xB7	; 183
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	88 ec       	ldi	r24, 0xC8	; 200
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	80 83       	st	Z, r24
    35a2:	fe 01       	movw	r30, r28
    35a4:	e7 5b       	subi	r30, 0xB7	; 183
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 81       	ld	r24, Z
    35aa:	91 81       	ldd	r25, Z+1	; 0x01
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	f1 f7       	brne	.-4      	; 0x35ac <main+0xff0>
    35b0:	fe 01       	movw	r30, r28
    35b2:	e7 5b       	subi	r30, 0xB7	; 183
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ba:	de 01       	movw	r26, r28
    35bc:	a5 5b       	subi	r26, 0xB5	; 181
    35be:	bf 4f       	sbci	r27, 0xFF	; 255
    35c0:	fe 01       	movw	r30, r28
    35c2:	e5 5b       	subi	r30, 0xB5	; 181
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	11 96       	adiw	r26, 0x01	; 1
    35ce:	9c 93       	st	X, r25
    35d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d2:	fe 01       	movw	r30, r28
    35d4:	e5 5b       	subi	r30, 0xB5	; 181
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	80 81       	ld	r24, Z
    35da:	91 81       	ldd	r25, Z+1	; 0x01
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	d1 f6       	brne	.-76     	; 0x3594 <main+0xfd8>
    35e0:	27 c0       	rjmp	.+78     	; 0x3630 <main+0x1074>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e2:	8e 01       	movw	r16, r28
    35e4:	05 5b       	subi	r16, 0xB5	; 181
    35e6:	1f 4f       	sbci	r17, 0xFF	; 255
    35e8:	fe 01       	movw	r30, r28
    35ea:	e3 5b       	subi	r30, 0xB3	; 179
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	60 81       	ld	r22, Z
    35f0:	71 81       	ldd	r23, Z+1	; 0x01
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	93 81       	ldd	r25, Z+3	; 0x03
    35f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	f8 01       	movw	r30, r16
    3600:	91 83       	std	Z+1, r25	; 0x01
    3602:	80 83       	st	Z, r24
    3604:	de 01       	movw	r26, r28
    3606:	a9 5b       	subi	r26, 0xB9	; 185
    3608:	bf 4f       	sbci	r27, 0xFF	; 255
    360a:	fe 01       	movw	r30, r28
    360c:	e5 5b       	subi	r30, 0xB5	; 181
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	80 81       	ld	r24, Z
    3612:	91 81       	ldd	r25, Z+1	; 0x01
    3614:	8d 93       	st	X+, r24
    3616:	9c 93       	st	X, r25
    3618:	fe 01       	movw	r30, r28
    361a:	e9 5b       	subi	r30, 0xB9	; 185
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <main+0x1066>
    3626:	fe 01       	movw	r30, r28
    3628:	e9 5b       	subi	r30, 0xB9	; 185
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
		  if ( (Global_row+1)%2 != 1 ){
			  PIE_VidEnable(3);
				LCD_VidClear();
				DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_2,HIGH);
				//to show state wining
				for (u8 i = 0 ; i < 3 ; i++){
    3630:	de 01       	movw	r26, r28
    3632:	a9 53       	subi	r26, 0x39	; 57
    3634:	bf 4f       	sbci	r27, 0xFF	; 255
    3636:	fe 01       	movw	r30, r28
    3638:	e9 53       	subi	r30, 0x39	; 57
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	8f 5f       	subi	r24, 0xFF	; 255
    3640:	8c 93       	st	X, r24
    3642:	fe 01       	movw	r30, r28
    3644:	e9 53       	subi	r30, 0x39	; 57
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	83 30       	cpi	r24, 0x03	; 3
    364c:	08 f4       	brcc	.+2      	; 0x3650 <main+0x1094>
    364e:	7c ce       	rjmp	.-776    	; 0x3348 <main+0xd8c>
					LCD_VidClear();
					_delay_ms(500);
		          }//end for loop

				//to out low to prevent LCD 2 from display goal
				DIO_VidSetPinValue(PORT_COMMUN,PIN_SAVED_2,LOW);
    3650:	83 e0       	ldi	r24, 0x03	; 3
    3652:	65 e0       	ldi	r22, 0x05	; 5
    3654:	40 e0       	ldi	r20, 0x00	; 0
    3656:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>

				//to show right ping paddle in beginning
				LCD_VidPosCur((Global_row+1)%2,first_col);
    365a:	80 91 6a 00 	lds	r24, 0x006A
    365e:	90 91 6b 00 	lds	r25, 0x006B
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	22 e0       	ldi	r18, 0x02	; 2
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	b9 01       	movw	r22, r18
    366a:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__divmodhi4>
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
				LCD_VidSendChar(ping_paddle_left);
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
				PIE_VidEnable(3);
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	0e 94 34 0a 	call	0x1468	; 0x1468 <PIE_VidEnable>

		  }//end if "check"
		local_col = 1 ;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	80 93 68 00 	sts	0x0068, r24

		//to show fly down
		for(u8 i = 0 ; i < 3 ; i++){
    3686:	fe 01       	movw	r30, r28
    3688:	ea 53       	subi	r30, 0x3A	; 58
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	10 82       	st	Z, r1
    368e:	a7 c0       	rjmp	.+334    	; 0x37de <main+0x1222>
			//to show  ball up
			LCD_VidPosCur(row_1,local_col);
    3690:	80 91 68 00 	lds	r24, 0x0068
    3694:	98 2f       	mov	r25, r24
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	69 2f       	mov	r22, r25
    369a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_left);
    369e:	84 e0       	ldi	r24, 0x04	; 4
    36a0:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    36a4:	fe 01       	movw	r30, r28
    36a6:	ed 5b       	subi	r30, 0xBD	; 189
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	a8 ec       	ldi	r26, 0xC8	; 200
    36b0:	b2 e4       	ldi	r27, 0x42	; 66
    36b2:	80 83       	st	Z, r24
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	a2 83       	std	Z+2, r26	; 0x02
    36b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ba:	8e 01       	movw	r16, r28
    36bc:	01 5c       	subi	r16, 0xC1	; 193
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	fe 01       	movw	r30, r28
    36c2:	ed 5b       	subi	r30, 0xBD	; 189
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	60 81       	ld	r22, Z
    36c8:	71 81       	ldd	r23, Z+1	; 0x01
    36ca:	82 81       	ldd	r24, Z+2	; 0x02
    36cc:	93 81       	ldd	r25, Z+3	; 0x03
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	4a ef       	ldi	r20, 0xFA	; 250
    36d4:	54 e4       	ldi	r21, 0x44	; 68
    36d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	f8 01       	movw	r30, r16
    36e0:	80 83       	st	Z, r24
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	a2 83       	std	Z+2, r26	; 0x02
    36e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e8:	fe 01       	movw	r30, r28
    36ea:	ff 96       	adiw	r30, 0x3f	; 63
    36ec:	60 81       	ld	r22, Z
    36ee:	71 81       	ldd	r23, Z+1	; 0x01
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	93 81       	ldd	r25, Z+3	; 0x03
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e8       	ldi	r20, 0x80	; 128
    36fa:	5f e3       	ldi	r21, 0x3F	; 63
    36fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3700:	88 23       	and	r24, r24
    3702:	2c f4       	brge	.+10     	; 0x370e <main+0x1152>
		__ticks = 1;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	9e af       	std	Y+62, r25	; 0x3e
    370a:	8d af       	std	Y+61, r24	; 0x3d
    370c:	46 c0       	rjmp	.+140    	; 0x379a <main+0x11de>
	else if (__tmp > 65535)
    370e:	fe 01       	movw	r30, r28
    3710:	ff 96       	adiw	r30, 0x3f	; 63
    3712:	60 81       	ld	r22, Z
    3714:	71 81       	ldd	r23, Z+1	; 0x01
    3716:	82 81       	ldd	r24, Z+2	; 0x02
    3718:	93 81       	ldd	r25, Z+3	; 0x03
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	64 f5       	brge	.+88     	; 0x3782 <main+0x11c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372a:	fe 01       	movw	r30, r28
    372c:	ed 5b       	subi	r30, 0xBD	; 189
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e2       	ldi	r20, 0x20	; 32
    373e:	51 e4       	ldi	r21, 0x41	; 65
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9e af       	std	Y+62, r25	; 0x3e
    3756:	8d af       	std	Y+61, r24	; 0x3d
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <main+0x11bc>
    375a:	88 ec       	ldi	r24, 0xC8	; 200
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	9c af       	std	Y+60, r25	; 0x3c
    3760:	8b af       	std	Y+59, r24	; 0x3b
    3762:	8b ad       	ldd	r24, Y+59	; 0x3b
    3764:	9c ad       	ldd	r25, Y+60	; 0x3c
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <main+0x11aa>
    376a:	9c af       	std	Y+60, r25	; 0x3c
    376c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3770:	9e ad       	ldd	r25, Y+62	; 0x3e
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	9e af       	std	Y+62, r25	; 0x3e
    3776:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3778:	8d ad       	ldd	r24, Y+61	; 0x3d
    377a:	9e ad       	ldd	r25, Y+62	; 0x3e
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	69 f7       	brne	.-38     	; 0x375a <main+0x119e>
    3780:	16 c0       	rjmp	.+44     	; 0x37ae <main+0x11f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3782:	fe 01       	movw	r30, r28
    3784:	ff 96       	adiw	r30, 0x3f	; 63
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	9e af       	std	Y+62, r25	; 0x3e
    3798:	8d af       	std	Y+61, r24	; 0x3d
    379a:	8d ad       	ldd	r24, Y+61	; 0x3d
    379c:	9e ad       	ldd	r25, Y+62	; 0x3e
    379e:	9a af       	std	Y+58, r25	; 0x3a
    37a0:	89 af       	std	Y+57, r24	; 0x39
    37a2:	89 ad       	ldd	r24, Y+57	; 0x39
    37a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <main+0x11ea>
    37aa:	9a af       	std	Y+58, r25	; 0x3a
    37ac:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(row_1,local_col);
    37ae:	80 91 68 00 	lds	r24, 0x0068
    37b2:	98 2f       	mov	r25, r24
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	69 2f       	mov	r22, r25
    37b8:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    37bc:	80 e2       	ldi	r24, 0x20	; 32
    37be:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

			local_col++;
    37c2:	80 91 68 00 	lds	r24, 0x0068
    37c6:	8f 5f       	subi	r24, 0xFF	; 255
    37c8:	80 93 68 00 	sts	0x0068, r24

		  }//end if "check"
		local_col = 1 ;

		//to show fly down
		for(u8 i = 0 ; i < 3 ; i++){
    37cc:	de 01       	movw	r26, r28
    37ce:	aa 53       	subi	r26, 0x3A	; 58
    37d0:	bf 4f       	sbci	r27, 0xFF	; 255
    37d2:	fe 01       	movw	r30, r28
    37d4:	ea 53       	subi	r30, 0x3A	; 58
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	80 81       	ld	r24, Z
    37da:	8f 5f       	subi	r24, 0xFF	; 255
    37dc:	8c 93       	st	X, r24
    37de:	fe 01       	movw	r30, r28
    37e0:	ea 53       	subi	r30, 0x3A	; 58
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	83 30       	cpi	r24, 0x03	; 3
    37e8:	08 f4       	brcc	.+2      	; 0x37ec <main+0x1230>
    37ea:	52 cf       	rjmp	.-348    	; 0x3690 <main+0x10d4>

			local_col++;
		}

		//to make ball drop down to up in specific cell and the next to it
		for (s8 i = 1 ; i >= 0 ; i--){
    37ec:	fe 01       	movw	r30, r28
    37ee:	eb 53       	subi	r30, 0x3B	; 59
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	80 83       	st	Z, r24
    37f6:	1c c1       	rjmp	.+568    	; 0x3a30 <main+0x1474>
			//to show  ball down right
			LCD_VidPosCur(i,local_col);
    37f8:	fe 01       	movw	r30, r28
    37fa:	eb 53       	subi	r30, 0x3B	; 59
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	20 81       	ld	r18, Z
    3800:	80 91 68 00 	lds	r24, 0x0068
    3804:	98 2f       	mov	r25, r24
    3806:	82 2f       	mov	r24, r18
    3808:	69 2f       	mov	r22, r25
    380a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(ball_down_left);
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	a8 ec       	ldi	r26, 0xC8	; 200
    381a:	b2 e4       	ldi	r27, 0x42	; 66
    381c:	8d ab       	std	Y+53, r24	; 0x35
    381e:	9e ab       	std	Y+54, r25	; 0x36
    3820:	af ab       	std	Y+55, r26	; 0x37
    3822:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3824:	6d a9       	ldd	r22, Y+53	; 0x35
    3826:	7e a9       	ldd	r23, Y+54	; 0x36
    3828:	8f a9       	ldd	r24, Y+55	; 0x37
    382a:	98 ad       	ldd	r25, Y+56	; 0x38
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	4a ef       	ldi	r20, 0xFA	; 250
    3832:	54 e4       	ldi	r21, 0x44	; 68
    3834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	89 ab       	std	Y+49, r24	; 0x31
    383e:	9a ab       	std	Y+50, r25	; 0x32
    3840:	ab ab       	std	Y+51, r26	; 0x33
    3842:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3844:	69 a9       	ldd	r22, Y+49	; 0x31
    3846:	7a a9       	ldd	r23, Y+50	; 0x32
    3848:	8b a9       	ldd	r24, Y+51	; 0x33
    384a:	9c a9       	ldd	r25, Y+52	; 0x34
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e8       	ldi	r20, 0x80	; 128
    3852:	5f e3       	ldi	r21, 0x3F	; 63
    3854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3858:	88 23       	and	r24, r24
    385a:	2c f4       	brge	.+10     	; 0x3866 <main+0x12aa>
		__ticks = 1;
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	98 ab       	std	Y+48, r25	; 0x30
    3862:	8f a7       	std	Y+47, r24	; 0x2f
    3864:	3f c0       	rjmp	.+126    	; 0x38e4 <main+0x1328>
	else if (__tmp > 65535)
    3866:	69 a9       	ldd	r22, Y+49	; 0x31
    3868:	7a a9       	ldd	r23, Y+50	; 0x32
    386a:	8b a9       	ldd	r24, Y+51	; 0x33
    386c:	9c a9       	ldd	r25, Y+52	; 0x34
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	3f ef       	ldi	r19, 0xFF	; 255
    3872:	4f e7       	ldi	r20, 0x7F	; 127
    3874:	57 e4       	ldi	r21, 0x47	; 71
    3876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    387a:	18 16       	cp	r1, r24
    387c:	4c f5       	brge	.+82     	; 0x38d0 <main+0x1314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387e:	6d a9       	ldd	r22, Y+53	; 0x35
    3880:	7e a9       	ldd	r23, Y+54	; 0x36
    3882:	8f a9       	ldd	r24, Y+55	; 0x37
    3884:	98 ad       	ldd	r25, Y+56	; 0x38
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e2       	ldi	r20, 0x20	; 32
    388c:	51 e4       	ldi	r21, 0x41	; 65
    388e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	bc 01       	movw	r22, r24
    3898:	cd 01       	movw	r24, r26
    389a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	98 ab       	std	Y+48, r25	; 0x30
    38a4:	8f a7       	std	Y+47, r24	; 0x2f
    38a6:	0f c0       	rjmp	.+30     	; 0x38c6 <main+0x130a>
    38a8:	88 ec       	ldi	r24, 0xC8	; 200
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	9e a7       	std	Y+46, r25	; 0x2e
    38ae:	8d a7       	std	Y+45, r24	; 0x2d
    38b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    38b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <main+0x12f8>
    38b8:	9e a7       	std	Y+46, r25	; 0x2e
    38ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    38be:	98 a9       	ldd	r25, Y+48	; 0x30
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	98 ab       	std	Y+48, r25	; 0x30
    38c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38c8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	69 f7       	brne	.-38     	; 0x38a8 <main+0x12ec>
    38ce:	14 c0       	rjmp	.+40     	; 0x38f8 <main+0x133c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d0:	69 a9       	ldd	r22, Y+49	; 0x31
    38d2:	7a a9       	ldd	r23, Y+50	; 0x32
    38d4:	8b a9       	ldd	r24, Y+51	; 0x33
    38d6:	9c a9       	ldd	r25, Y+52	; 0x34
    38d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	98 ab       	std	Y+48, r25	; 0x30
    38e2:	8f a7       	std	Y+47, r24	; 0x2f
    38e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e6:	98 a9       	ldd	r25, Y+48	; 0x30
    38e8:	9c a7       	std	Y+44, r25	; 0x2c
    38ea:	8b a7       	std	Y+43, r24	; 0x2b
    38ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    38ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <main+0x1334>
    38f4:	9c a7       	std	Y+44, r25	; 0x2c
    38f6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);

			//to show ball up left
			LCD_VidPosCur(i,local_col);
    38f8:	fe 01       	movw	r30, r28
    38fa:	eb 53       	subi	r30, 0x3B	; 59
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	20 81       	ld	r18, Z
    3900:	80 91 68 00 	lds	r24, 0x0068
    3904:	98 2f       	mov	r25, r24
    3906:	82 2f       	mov	r24, r18
    3908:	69 2f       	mov	r22, r25
    390a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(ball_up_right);
    390e:	85 e0       	ldi	r24, 0x05	; 5
    3910:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	a8 ec       	ldi	r26, 0xC8	; 200
    391a:	b2 e4       	ldi	r27, 0x42	; 66
    391c:	8f a3       	std	Y+39, r24	; 0x27
    391e:	98 a7       	std	Y+40, r25	; 0x28
    3920:	a9 a7       	std	Y+41, r26	; 0x29
    3922:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3924:	6f a1       	ldd	r22, Y+39	; 0x27
    3926:	78 a5       	ldd	r23, Y+40	; 0x28
    3928:	89 a5       	ldd	r24, Y+41	; 0x29
    392a:	9a a5       	ldd	r25, Y+42	; 0x2a
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	4a ef       	ldi	r20, 0xFA	; 250
    3932:	54 e4       	ldi	r21, 0x44	; 68
    3934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	8b a3       	std	Y+35, r24	; 0x23
    393e:	9c a3       	std	Y+36, r25	; 0x24
    3940:	ad a3       	std	Y+37, r26	; 0x25
    3942:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3944:	6b a1       	ldd	r22, Y+35	; 0x23
    3946:	7c a1       	ldd	r23, Y+36	; 0x24
    3948:	8d a1       	ldd	r24, Y+37	; 0x25
    394a:	9e a1       	ldd	r25, Y+38	; 0x26
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	40 e8       	ldi	r20, 0x80	; 128
    3952:	5f e3       	ldi	r21, 0x3F	; 63
    3954:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3958:	88 23       	and	r24, r24
    395a:	2c f4       	brge	.+10     	; 0x3966 <main+0x13aa>
		__ticks = 1;
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	9a a3       	std	Y+34, r25	; 0x22
    3962:	89 a3       	std	Y+33, r24	; 0x21
    3964:	3f c0       	rjmp	.+126    	; 0x39e4 <main+0x1428>
	else if (__tmp > 65535)
    3966:	6b a1       	ldd	r22, Y+35	; 0x23
    3968:	7c a1       	ldd	r23, Y+36	; 0x24
    396a:	8d a1       	ldd	r24, Y+37	; 0x25
    396c:	9e a1       	ldd	r25, Y+38	; 0x26
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	3f ef       	ldi	r19, 0xFF	; 255
    3972:	4f e7       	ldi	r20, 0x7F	; 127
    3974:	57 e4       	ldi	r21, 0x47	; 71
    3976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397a:	18 16       	cp	r1, r24
    397c:	4c f5       	brge	.+82     	; 0x39d0 <main+0x1414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397e:	6f a1       	ldd	r22, Y+39	; 0x27
    3980:	78 a5       	ldd	r23, Y+40	; 0x28
    3982:	89 a5       	ldd	r24, Y+41	; 0x29
    3984:	9a a5       	ldd	r25, Y+42	; 0x2a
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e2       	ldi	r20, 0x20	; 32
    398c:	51 e4       	ldi	r21, 0x41	; 65
    398e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	bc 01       	movw	r22, r24
    3998:	cd 01       	movw	r24, r26
    399a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	9a a3       	std	Y+34, r25	; 0x22
    39a4:	89 a3       	std	Y+33, r24	; 0x21
    39a6:	0f c0       	rjmp	.+30     	; 0x39c6 <main+0x140a>
    39a8:	88 ec       	ldi	r24, 0xC8	; 200
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	98 a3       	std	Y+32, r25	; 0x20
    39ae:	8f 8f       	std	Y+31, r24	; 0x1f
    39b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39b2:	98 a1       	ldd	r25, Y+32	; 0x20
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <main+0x13f8>
    39b8:	98 a3       	std	Y+32, r25	; 0x20
    39ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39bc:	89 a1       	ldd	r24, Y+33	; 0x21
    39be:	9a a1       	ldd	r25, Y+34	; 0x22
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	9a a3       	std	Y+34, r25	; 0x22
    39c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c6:	89 a1       	ldd	r24, Y+33	; 0x21
    39c8:	9a a1       	ldd	r25, Y+34	; 0x22
    39ca:	00 97       	sbiw	r24, 0x00	; 0
    39cc:	69 f7       	brne	.-38     	; 0x39a8 <main+0x13ec>
    39ce:	14 c0       	rjmp	.+40     	; 0x39f8 <main+0x143c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d0:	6b a1       	ldd	r22, Y+35	; 0x23
    39d2:	7c a1       	ldd	r23, Y+36	; 0x24
    39d4:	8d a1       	ldd	r24, Y+37	; 0x25
    39d6:	9e a1       	ldd	r25, Y+38	; 0x26
    39d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	9a a3       	std	Y+34, r25	; 0x22
    39e2:	89 a3       	std	Y+33, r24	; 0x21
    39e4:	89 a1       	ldd	r24, Y+33	; 0x21
    39e6:	9a a1       	ldd	r25, Y+34	; 0x22
    39e8:	9e 8f       	std	Y+30, r25	; 0x1e
    39ea:	8d 8f       	std	Y+29, r24	; 0x1d
    39ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <main+0x1434>
    39f4:	9e 8f       	std	Y+30, r25	; 0x1e
    39f6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);

			//to clear cell
			LCD_VidPosCur(i,local_col);
    39f8:	fe 01       	movw	r30, r28
    39fa:	eb 53       	subi	r30, 0x3B	; 59
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	20 81       	ld	r18, Z
    3a00:	80 91 68 00 	lds	r24, 0x0068
    3a04:	98 2f       	mov	r25, r24
    3a06:	82 2f       	mov	r24, r18
    3a08:	69 2f       	mov	r22, r25
    3a0a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
			LCD_VidSendChar(' ');
    3a0e:	80 e2       	ldi	r24, 0x20	; 32
    3a10:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

			local_col++ ;
    3a14:	80 91 68 00 	lds	r24, 0x0068
    3a18:	8f 5f       	subi	r24, 0xFF	; 255
    3a1a:	80 93 68 00 	sts	0x0068, r24

			local_col++;
		}

		//to make ball drop down to up in specific cell and the next to it
		for (s8 i = 1 ; i >= 0 ; i--){
    3a1e:	de 01       	movw	r26, r28
    3a20:	ab 53       	subi	r26, 0x3B	; 59
    3a22:	bf 4f       	sbci	r27, 0xFF	; 255
    3a24:	fe 01       	movw	r30, r28
    3a26:	eb 53       	subi	r30, 0x3B	; 59
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	81 50       	subi	r24, 0x01	; 1
    3a2e:	8c 93       	st	X, r24
    3a30:	fe 01       	movw	r30, r28
    3a32:	eb 53       	subi	r30, 0x3B	; 59
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	80 81       	ld	r24, Z
    3a38:	88 23       	and	r24, r24
    3a3a:	0c f0       	brlt	.+2      	; 0x3a3e <main+0x1482>
    3a3c:	dd ce       	rjmp	.-582    	; 0x37f8 <main+0x123c>
    3a3e:	8b c0       	rjmp	.+278    	; 0x3b56 <main+0x159a>

		//to make ball fly up in opposite direction
		while (local_col <= 15){

		//to show  ball up
		LCD_VidPosCur(row_0,local_col);
    3a40:	80 91 68 00 	lds	r24, 0x0068
    3a44:	98 2f       	mov	r25, r24
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	69 2f       	mov	r22, r25
    3a4a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
		LCD_VidSendChar(ball_up_right);
    3a4e:	85 e0       	ldi	r24, 0x05	; 5
    3a50:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	a8 ec       	ldi	r26, 0xC8	; 200
    3a5a:	b2 e4       	ldi	r27, 0x42	; 66
    3a5c:	89 8f       	std	Y+25, r24	; 0x19
    3a5e:	9a 8f       	std	Y+26, r25	; 0x1a
    3a60:	ab 8f       	std	Y+27, r26	; 0x1b
    3a62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a64:	69 8d       	ldd	r22, Y+25	; 0x19
    3a66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	4a ef       	ldi	r20, 0xFA	; 250
    3a72:	54 e4       	ldi	r21, 0x44	; 68
    3a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	8d 8b       	std	Y+21, r24	; 0x15
    3a7e:	9e 8b       	std	Y+22, r25	; 0x16
    3a80:	af 8b       	std	Y+23, r26	; 0x17
    3a82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a84:	6d 89       	ldd	r22, Y+21	; 0x15
    3a86:	7e 89       	ldd	r23, Y+22	; 0x16
    3a88:	8f 89       	ldd	r24, Y+23	; 0x17
    3a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e8       	ldi	r20, 0x80	; 128
    3a92:	5f e3       	ldi	r21, 0x3F	; 63
    3a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a98:	88 23       	and	r24, r24
    3a9a:	2c f4       	brge	.+10     	; 0x3aa6 <main+0x14ea>
		__ticks = 1;
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9c 8b       	std	Y+20, r25	; 0x14
    3aa2:	8b 8b       	std	Y+19, r24	; 0x13
    3aa4:	3f c0       	rjmp	.+126    	; 0x3b24 <main+0x1568>
	else if (__tmp > 65535)
    3aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    3aac:	98 8d       	ldd	r25, Y+24	; 0x18
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	3f ef       	ldi	r19, 0xFF	; 255
    3ab2:	4f e7       	ldi	r20, 0x7F	; 127
    3ab4:	57 e4       	ldi	r21, 0x47	; 71
    3ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aba:	18 16       	cp	r1, r24
    3abc:	4c f5       	brge	.+82     	; 0x3b10 <main+0x1554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3abe:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e2       	ldi	r20, 0x20	; 32
    3acc:	51 e4       	ldi	r21, 0x41	; 65
    3ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	bc 01       	movw	r22, r24
    3ad8:	cd 01       	movw	r24, r26
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9c 8b       	std	Y+20, r25	; 0x14
    3ae4:	8b 8b       	std	Y+19, r24	; 0x13
    3ae6:	0f c0       	rjmp	.+30     	; 0x3b06 <main+0x154a>
    3ae8:	88 ec       	ldi	r24, 0xC8	; 200
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	9a 8b       	std	Y+18, r25	; 0x12
    3aee:	89 8b       	std	Y+17, r24	; 0x11
    3af0:	89 89       	ldd	r24, Y+17	; 0x11
    3af2:	9a 89       	ldd	r25, Y+18	; 0x12
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	f1 f7       	brne	.-4      	; 0x3af4 <main+0x1538>
    3af8:	9a 8b       	std	Y+18, r25	; 0x12
    3afa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afc:	8b 89       	ldd	r24, Y+19	; 0x13
    3afe:	9c 89       	ldd	r25, Y+20	; 0x14
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	9c 8b       	std	Y+20, r25	; 0x14
    3b04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b06:	8b 89       	ldd	r24, Y+19	; 0x13
    3b08:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	69 f7       	brne	.-38     	; 0x3ae8 <main+0x152c>
    3b0e:	14 c0       	rjmp	.+40     	; 0x3b38 <main+0x157c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b10:	6d 89       	ldd	r22, Y+21	; 0x15
    3b12:	7e 89       	ldd	r23, Y+22	; 0x16
    3b14:	8f 89       	ldd	r24, Y+23	; 0x17
    3b16:	98 8d       	ldd	r25, Y+24	; 0x18
    3b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	9c 8b       	std	Y+20, r25	; 0x14
    3b22:	8b 8b       	std	Y+19, r24	; 0x13
    3b24:	8b 89       	ldd	r24, Y+19	; 0x13
    3b26:	9c 89       	ldd	r25, Y+20	; 0x14
    3b28:	98 8b       	std	Y+16, r25	; 0x10
    3b2a:	8f 87       	std	Y+15, r24	; 0x0f
    3b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b2e:	98 89       	ldd	r25, Y+16	; 0x10
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <main+0x1574>
    3b34:	98 8b       	std	Y+16, r25	; 0x10
    3b36:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		//to clear cell
		LCD_VidPosCur(row_0,local_col);
    3b38:	80 91 68 00 	lds	r24, 0x0068
    3b3c:	98 2f       	mov	r25, r24
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	69 2f       	mov	r22, r25
    3b42:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_VidPosCur>
		LCD_VidSendChar(' ');
    3b46:	80 e2       	ldi	r24, 0x20	; 32
    3b48:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_VidSendChar>

		local_col++ ;
    3b4c:	80 91 68 00 	lds	r24, 0x0068
    3b50:	8f 5f       	subi	r24, 0xFF	; 255
    3b52:	80 93 68 00 	sts	0x0068, r24

			local_col++ ;
		}//end for loop

		//to make ball fly up in opposite direction
		while (local_col <= 15){
    3b56:	80 91 68 00 	lds	r24, 0x0068
    3b5a:	80 31       	cpi	r24, 0x10	; 16
    3b5c:	0c f4       	brge	.+2      	; 0x3b60 <main+0x15a4>
    3b5e:	70 cf       	rjmp	.-288    	; 0x3a40 <main+0x1484>
		LCD_VidSendChar(' ');

		local_col++ ;
	   }//end while

		local_col = 15 ;
    3b60:	8f e0       	ldi	r24, 0x0F	; 15
    3b62:	80 93 68 00 	sts	0x0068, r24

		//out high voltage
		DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,HIGH);
    3b66:	83 e0       	ldi	r24, 0x03	; 3
    3b68:	62 e0       	ldi	r22, 0x02	; 2
    3b6a:	41 e0       	ldi	r20, 0x01	; 1
    3b6c:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	a8 e4       	ldi	r26, 0x48	; 72
    3b76:	b2 e4       	ldi	r27, 0x42	; 66
    3b78:	8b 87       	std	Y+11, r24	; 0x0b
    3b7a:	9c 87       	std	Y+12, r25	; 0x0c
    3b7c:	ad 87       	std	Y+13, r26	; 0x0d
    3b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	4a ef       	ldi	r20, 0xFA	; 250
    3b8e:	54 e4       	ldi	r21, 0x44	; 68
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	8f 83       	std	Y+7, r24	; 0x07
    3b9a:	98 87       	std	Y+8, r25	; 0x08
    3b9c:	a9 87       	std	Y+9, r26	; 0x09
    3b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba2:	78 85       	ldd	r23, Y+8	; 0x08
    3ba4:	89 85       	ldd	r24, Y+9	; 0x09
    3ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e8       	ldi	r20, 0x80	; 128
    3bae:	5f e3       	ldi	r21, 0x3F	; 63
    3bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb4:	88 23       	and	r24, r24
    3bb6:	2c f4       	brge	.+10     	; 0x3bc2 <main+0x1606>
		__ticks = 1;
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	3f c0       	rjmp	.+126    	; 0x3c40 <main+0x1684>
	else if (__tmp > 65535)
    3bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc4:	78 85       	ldd	r23, Y+8	; 0x08
    3bc6:	89 85       	ldd	r24, Y+9	; 0x09
    3bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	3f ef       	ldi	r19, 0xFF	; 255
    3bce:	4f e7       	ldi	r20, 0x7F	; 127
    3bd0:	57 e4       	ldi	r21, 0x47	; 71
    3bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd6:	18 16       	cp	r1, r24
    3bd8:	4c f5       	brge	.+82     	; 0x3c2c <main+0x1670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e2       	ldi	r20, 0x20	; 32
    3be8:	51 e4       	ldi	r21, 0x41	; 65
    3bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
    3c02:	0f c0       	rjmp	.+30     	; 0x3c22 <main+0x1666>
    3c04:	88 ec       	ldi	r24, 0xC8	; 200
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	9c 83       	std	Y+4, r25	; 0x04
    3c0a:	8b 83       	std	Y+3, r24	; 0x03
    3c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <main+0x1654>
    3c14:	9c 83       	std	Y+4, r25	; 0x04
    3c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c18:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	9e 83       	std	Y+6, r25	; 0x06
    3c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	9e 81       	ldd	r25, Y+6	; 0x06
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	69 f7       	brne	.-38     	; 0x3c04 <main+0x1648>
    3c2a:	14 c0       	rjmp	.+40     	; 0x3c54 <main+0x1698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2e:	78 85       	ldd	r23, Y+8	; 0x08
    3c30:	89 85       	ldd	r24, Y+9	; 0x09
    3c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	9e 81       	ldd	r25, Y+6	; 0x06
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <main+0x1690>
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	89 83       	std	Y+1, r24	; 0x01
		//to stac with high voltage to permit LCD 1 to display to achieve if condition
		_delay_ms(50);
		//to prevent LCD 1 from display again in reverse direction
		DIO_VidSetPinValue(PORT_COMMUN,PIN_OUT,LOW);
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	62 e0       	ldi	r22, 0x02	; 2
    3c58:	40 e0       	ldi	r20, 0x00	; 0
    3c5a:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_VidSetPinValue>
    3c5e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <main+0x1a4>

00003c62 <__udivmodhi4>:
    3c62:	aa 1b       	sub	r26, r26
    3c64:	bb 1b       	sub	r27, r27
    3c66:	51 e1       	ldi	r21, 0x11	; 17
    3c68:	07 c0       	rjmp	.+14     	; 0x3c78 <__udivmodhi4_ep>

00003c6a <__udivmodhi4_loop>:
    3c6a:	aa 1f       	adc	r26, r26
    3c6c:	bb 1f       	adc	r27, r27
    3c6e:	a6 17       	cp	r26, r22
    3c70:	b7 07       	cpc	r27, r23
    3c72:	10 f0       	brcs	.+4      	; 0x3c78 <__udivmodhi4_ep>
    3c74:	a6 1b       	sub	r26, r22
    3c76:	b7 0b       	sbc	r27, r23

00003c78 <__udivmodhi4_ep>:
    3c78:	88 1f       	adc	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	5a 95       	dec	r21
    3c7e:	a9 f7       	brne	.-22     	; 0x3c6a <__udivmodhi4_loop>
    3c80:	80 95       	com	r24
    3c82:	90 95       	com	r25
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	08 95       	ret

00003c8a <__divmodhi4>:
    3c8a:	97 fb       	bst	r25, 7
    3c8c:	09 2e       	mov	r0, r25
    3c8e:	07 26       	eor	r0, r23
    3c90:	0a d0       	rcall	.+20     	; 0x3ca6 <__divmodhi4_neg1>
    3c92:	77 fd       	sbrc	r23, 7
    3c94:	04 d0       	rcall	.+8      	; 0x3c9e <__divmodhi4_neg2>
    3c96:	e5 df       	rcall	.-54     	; 0x3c62 <__udivmodhi4>
    3c98:	06 d0       	rcall	.+12     	; 0x3ca6 <__divmodhi4_neg1>
    3c9a:	00 20       	and	r0, r0
    3c9c:	1a f4       	brpl	.+6      	; 0x3ca4 <__divmodhi4_exit>

00003c9e <__divmodhi4_neg2>:
    3c9e:	70 95       	com	r23
    3ca0:	61 95       	neg	r22
    3ca2:	7f 4f       	sbci	r23, 0xFF	; 255

00003ca4 <__divmodhi4_exit>:
    3ca4:	08 95       	ret

00003ca6 <__divmodhi4_neg1>:
    3ca6:	f6 f7       	brtc	.-4      	; 0x3ca4 <__divmodhi4_exit>
    3ca8:	90 95       	com	r25
    3caa:	81 95       	neg	r24
    3cac:	9f 4f       	sbci	r25, 0xFF	; 255
    3cae:	08 95       	ret

00003cb0 <__prologue_saves__>:
    3cb0:	2f 92       	push	r2
    3cb2:	3f 92       	push	r3
    3cb4:	4f 92       	push	r4
    3cb6:	5f 92       	push	r5
    3cb8:	6f 92       	push	r6
    3cba:	7f 92       	push	r7
    3cbc:	8f 92       	push	r8
    3cbe:	9f 92       	push	r9
    3cc0:	af 92       	push	r10
    3cc2:	bf 92       	push	r11
    3cc4:	cf 92       	push	r12
    3cc6:	df 92       	push	r13
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	ca 1b       	sub	r28, r26
    3cda:	db 0b       	sbc	r29, r27
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	09 94       	ijmp

00003ce8 <__epilogue_restores__>:
    3ce8:	2a 88       	ldd	r2, Y+18	; 0x12
    3cea:	39 88       	ldd	r3, Y+17	; 0x11
    3cec:	48 88       	ldd	r4, Y+16	; 0x10
    3cee:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cf0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cf2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cf4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cf6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cf8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cfa:	b9 84       	ldd	r11, Y+9	; 0x09
    3cfc:	c8 84       	ldd	r12, Y+8	; 0x08
    3cfe:	df 80       	ldd	r13, Y+7	; 0x07
    3d00:	ee 80       	ldd	r14, Y+6	; 0x06
    3d02:	fd 80       	ldd	r15, Y+5	; 0x05
    3d04:	0c 81       	ldd	r16, Y+4	; 0x04
    3d06:	1b 81       	ldd	r17, Y+3	; 0x03
    3d08:	aa 81       	ldd	r26, Y+2	; 0x02
    3d0a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d0c:	ce 0f       	add	r28, r30
    3d0e:	d1 1d       	adc	r29, r1
    3d10:	0f b6       	in	r0, 0x3f	; 63
    3d12:	f8 94       	cli
    3d14:	de bf       	out	0x3e, r29	; 62
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	cd bf       	out	0x3d, r28	; 61
    3d1a:	ed 01       	movw	r28, r26
    3d1c:	08 95       	ret

00003d1e <_exit>:
    3d1e:	f8 94       	cli

00003d20 <__stop_program>:
    3d20:	ff cf       	rjmp	.-2      	; 0x3d20 <__stop_program>
